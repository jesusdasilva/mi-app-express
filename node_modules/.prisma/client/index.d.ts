
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model cache
 * 
 */
export type cache = $Result.DefaultSelection<Prisma.$cachePayload>
/**
 * Model cache_locks
 * 
 */
export type cache_locks = $Result.DefaultSelection<Prisma.$cache_locksPayload>
/**
 * Model failed_jobs
 * 
 */
export type failed_jobs = $Result.DefaultSelection<Prisma.$failed_jobsPayload>
/**
 * Model migrations
 * 
 */
export type migrations = $Result.DefaultSelection<Prisma.$migrationsPayload>
/**
 * Model password_reset_tokens
 * 
 */
export type password_reset_tokens = $Result.DefaultSelection<Prisma.$password_reset_tokensPayload>
/**
 * Model payment_categories
 * 
 */
export type payment_categories = $Result.DefaultSelection<Prisma.$payment_categoriesPayload>
/**
 * Model payment_frequencies
 * 
 */
export type payment_frequencies = $Result.DefaultSelection<Prisma.$payment_frequenciesPayload>
/**
 * Model payment_periods
 * 
 */
export type payment_periods = $Result.DefaultSelection<Prisma.$payment_periodsPayload>
/**
 * Model payment_platforms
 * 
 */
export type payment_platforms = $Result.DefaultSelection<Prisma.$payment_platformsPayload>
/**
 * Model payment_records
 * 
 */
export type payment_records = $Result.DefaultSelection<Prisma.$payment_recordsPayload>
/**
 * Model payment_templates
 * 
 */
export type payment_templates = $Result.DefaultSelection<Prisma.$payment_templatesPayload>
/**
 * Model personal_access_tokens
 * 
 */
export type personal_access_tokens = $Result.DefaultSelection<Prisma.$personal_access_tokensPayload>
/**
 * Model telescope_entries
 * 
 */
export type telescope_entries = $Result.DefaultSelection<Prisma.$telescope_entriesPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Caches
 * const caches = await prisma.cache.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Caches
   * const caches = await prisma.cache.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.cache`: Exposes CRUD operations for the **cache** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Caches
    * const caches = await prisma.cache.findMany()
    * ```
    */
  get cache(): Prisma.cacheDelegate<ExtArgs>;

  /**
   * `prisma.cache_locks`: Exposes CRUD operations for the **cache_locks** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cache_locks
    * const cache_locks = await prisma.cache_locks.findMany()
    * ```
    */
  get cache_locks(): Prisma.cache_locksDelegate<ExtArgs>;

  /**
   * `prisma.failed_jobs`: Exposes CRUD operations for the **failed_jobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Failed_jobs
    * const failed_jobs = await prisma.failed_jobs.findMany()
    * ```
    */
  get failed_jobs(): Prisma.failed_jobsDelegate<ExtArgs>;

  /**
   * `prisma.migrations`: Exposes CRUD operations for the **migrations** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Migrations
    * const migrations = await prisma.migrations.findMany()
    * ```
    */
  get migrations(): Prisma.migrationsDelegate<ExtArgs>;

  /**
   * `prisma.password_reset_tokens`: Exposes CRUD operations for the **password_reset_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Password_reset_tokens
    * const password_reset_tokens = await prisma.password_reset_tokens.findMany()
    * ```
    */
  get password_reset_tokens(): Prisma.password_reset_tokensDelegate<ExtArgs>;

  /**
   * `prisma.payment_categories`: Exposes CRUD operations for the **payment_categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_categories
    * const payment_categories = await prisma.payment_categories.findMany()
    * ```
    */
  get payment_categories(): Prisma.payment_categoriesDelegate<ExtArgs>;

  /**
   * `prisma.payment_frequencies`: Exposes CRUD operations for the **payment_frequencies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_frequencies
    * const payment_frequencies = await prisma.payment_frequencies.findMany()
    * ```
    */
  get payment_frequencies(): Prisma.payment_frequenciesDelegate<ExtArgs>;

  /**
   * `prisma.payment_periods`: Exposes CRUD operations for the **payment_periods** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_periods
    * const payment_periods = await prisma.payment_periods.findMany()
    * ```
    */
  get payment_periods(): Prisma.payment_periodsDelegate<ExtArgs>;

  /**
   * `prisma.payment_platforms`: Exposes CRUD operations for the **payment_platforms** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_platforms
    * const payment_platforms = await prisma.payment_platforms.findMany()
    * ```
    */
  get payment_platforms(): Prisma.payment_platformsDelegate<ExtArgs>;

  /**
   * `prisma.payment_records`: Exposes CRUD operations for the **payment_records** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_records
    * const payment_records = await prisma.payment_records.findMany()
    * ```
    */
  get payment_records(): Prisma.payment_recordsDelegate<ExtArgs>;

  /**
   * `prisma.payment_templates`: Exposes CRUD operations for the **payment_templates** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payment_templates
    * const payment_templates = await prisma.payment_templates.findMany()
    * ```
    */
  get payment_templates(): Prisma.payment_templatesDelegate<ExtArgs>;

  /**
   * `prisma.personal_access_tokens`: Exposes CRUD operations for the **personal_access_tokens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personal_access_tokens
    * const personal_access_tokens = await prisma.personal_access_tokens.findMany()
    * ```
    */
  get personal_access_tokens(): Prisma.personal_access_tokensDelegate<ExtArgs>;

  /**
   * `prisma.telescope_entries`: Exposes CRUD operations for the **telescope_entries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Telescope_entries
    * const telescope_entries = await prisma.telescope_entries.findMany()
    * ```
    */
  get telescope_entries(): Prisma.telescope_entriesDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    cache: 'cache',
    cache_locks: 'cache_locks',
    failed_jobs: 'failed_jobs',
    migrations: 'migrations',
    password_reset_tokens: 'password_reset_tokens',
    payment_categories: 'payment_categories',
    payment_frequencies: 'payment_frequencies',
    payment_periods: 'payment_periods',
    payment_platforms: 'payment_platforms',
    payment_records: 'payment_records',
    payment_templates: 'payment_templates',
    personal_access_tokens: 'personal_access_tokens',
    telescope_entries: 'telescope_entries',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'cache' | 'cache_locks' | 'failed_jobs' | 'migrations' | 'password_reset_tokens' | 'payment_categories' | 'payment_frequencies' | 'payment_periods' | 'payment_platforms' | 'payment_records' | 'payment_templates' | 'personal_access_tokens' | 'telescope_entries' | 'users'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      cache: {
        payload: Prisma.$cachePayload<ExtArgs>
        fields: Prisma.cacheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cacheFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cacheFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          findFirst: {
            args: Prisma.cacheFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cacheFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          findMany: {
            args: Prisma.cacheFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>[]
          }
          create: {
            args: Prisma.cacheCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          createMany: {
            args: Prisma.cacheCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cacheDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          update: {
            args: Prisma.cacheUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          deleteMany: {
            args: Prisma.cacheDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cacheUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cacheUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cachePayload>
          }
          aggregate: {
            args: Prisma.CacheAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCache>
          }
          groupBy: {
            args: Prisma.cacheGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CacheGroupByOutputType>[]
          }
          count: {
            args: Prisma.cacheCountArgs<ExtArgs>,
            result: $Utils.Optional<CacheCountAggregateOutputType> | number
          }
        }
      }
      cache_locks: {
        payload: Prisma.$cache_locksPayload<ExtArgs>
        fields: Prisma.cache_locksFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cache_locksFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cache_locksFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          findFirst: {
            args: Prisma.cache_locksFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cache_locksFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          findMany: {
            args: Prisma.cache_locksFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>[]
          }
          create: {
            args: Prisma.cache_locksCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          createMany: {
            args: Prisma.cache_locksCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.cache_locksDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          update: {
            args: Prisma.cache_locksUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          deleteMany: {
            args: Prisma.cache_locksDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.cache_locksUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.cache_locksUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$cache_locksPayload>
          }
          aggregate: {
            args: Prisma.Cache_locksAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCache_locks>
          }
          groupBy: {
            args: Prisma.cache_locksGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Cache_locksGroupByOutputType>[]
          }
          count: {
            args: Prisma.cache_locksCountArgs<ExtArgs>,
            result: $Utils.Optional<Cache_locksCountAggregateOutputType> | number
          }
        }
      }
      failed_jobs: {
        payload: Prisma.$failed_jobsPayload<ExtArgs>
        fields: Prisma.failed_jobsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.failed_jobsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.failed_jobsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          findFirst: {
            args: Prisma.failed_jobsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.failed_jobsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          findMany: {
            args: Prisma.failed_jobsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>[]
          }
          create: {
            args: Prisma.failed_jobsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          createMany: {
            args: Prisma.failed_jobsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.failed_jobsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          update: {
            args: Prisma.failed_jobsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          deleteMany: {
            args: Prisma.failed_jobsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.failed_jobsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.failed_jobsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$failed_jobsPayload>
          }
          aggregate: {
            args: Prisma.Failed_jobsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFailed_jobs>
          }
          groupBy: {
            args: Prisma.failed_jobsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Failed_jobsGroupByOutputType>[]
          }
          count: {
            args: Prisma.failed_jobsCountArgs<ExtArgs>,
            result: $Utils.Optional<Failed_jobsCountAggregateOutputType> | number
          }
        }
      }
      migrations: {
        payload: Prisma.$migrationsPayload<ExtArgs>
        fields: Prisma.migrationsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.migrationsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.migrationsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          findFirst: {
            args: Prisma.migrationsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.migrationsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          findMany: {
            args: Prisma.migrationsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>[]
          }
          create: {
            args: Prisma.migrationsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          createMany: {
            args: Prisma.migrationsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.migrationsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          update: {
            args: Prisma.migrationsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          deleteMany: {
            args: Prisma.migrationsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.migrationsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.migrationsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$migrationsPayload>
          }
          aggregate: {
            args: Prisma.MigrationsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMigrations>
          }
          groupBy: {
            args: Prisma.migrationsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MigrationsGroupByOutputType>[]
          }
          count: {
            args: Prisma.migrationsCountArgs<ExtArgs>,
            result: $Utils.Optional<MigrationsCountAggregateOutputType> | number
          }
        }
      }
      password_reset_tokens: {
        payload: Prisma.$password_reset_tokensPayload<ExtArgs>
        fields: Prisma.password_reset_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.password_reset_tokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.password_reset_tokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          findFirst: {
            args: Prisma.password_reset_tokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.password_reset_tokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          findMany: {
            args: Prisma.password_reset_tokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>[]
          }
          create: {
            args: Prisma.password_reset_tokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          createMany: {
            args: Prisma.password_reset_tokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.password_reset_tokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          update: {
            args: Prisma.password_reset_tokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          deleteMany: {
            args: Prisma.password_reset_tokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.password_reset_tokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.password_reset_tokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$password_reset_tokensPayload>
          }
          aggregate: {
            args: Prisma.Password_reset_tokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePassword_reset_tokens>
          }
          groupBy: {
            args: Prisma.password_reset_tokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Password_reset_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.password_reset_tokensCountArgs<ExtArgs>,
            result: $Utils.Optional<Password_reset_tokensCountAggregateOutputType> | number
          }
        }
      }
      payment_categories: {
        payload: Prisma.$payment_categoriesPayload<ExtArgs>
        fields: Prisma.payment_categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          findFirst: {
            args: Prisma.payment_categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          findMany: {
            args: Prisma.payment_categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>[]
          }
          create: {
            args: Prisma.payment_categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          createMany: {
            args: Prisma.payment_categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          update: {
            args: Prisma.payment_categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          deleteMany: {
            args: Prisma.payment_categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_categoriesPayload>
          }
          aggregate: {
            args: Prisma.Payment_categoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_categories>
          }
          groupBy: {
            args: Prisma.payment_categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_categoriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_categoriesCountAggregateOutputType> | number
          }
        }
      }
      payment_frequencies: {
        payload: Prisma.$payment_frequenciesPayload<ExtArgs>
        fields: Prisma.payment_frequenciesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_frequenciesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_frequenciesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          findFirst: {
            args: Prisma.payment_frequenciesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_frequenciesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          findMany: {
            args: Prisma.payment_frequenciesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>[]
          }
          create: {
            args: Prisma.payment_frequenciesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          createMany: {
            args: Prisma.payment_frequenciesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_frequenciesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          update: {
            args: Prisma.payment_frequenciesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          deleteMany: {
            args: Prisma.payment_frequenciesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_frequenciesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_frequenciesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_frequenciesPayload>
          }
          aggregate: {
            args: Prisma.Payment_frequenciesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_frequencies>
          }
          groupBy: {
            args: Prisma.payment_frequenciesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_frequenciesGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_frequenciesCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_frequenciesCountAggregateOutputType> | number
          }
        }
      }
      payment_periods: {
        payload: Prisma.$payment_periodsPayload<ExtArgs>
        fields: Prisma.payment_periodsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_periodsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_periodsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          findFirst: {
            args: Prisma.payment_periodsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_periodsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          findMany: {
            args: Prisma.payment_periodsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>[]
          }
          create: {
            args: Prisma.payment_periodsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          createMany: {
            args: Prisma.payment_periodsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_periodsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          update: {
            args: Prisma.payment_periodsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          deleteMany: {
            args: Prisma.payment_periodsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_periodsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_periodsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_periodsPayload>
          }
          aggregate: {
            args: Prisma.Payment_periodsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_periods>
          }
          groupBy: {
            args: Prisma.payment_periodsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_periodsGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_periodsCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_periodsCountAggregateOutputType> | number
          }
        }
      }
      payment_platforms: {
        payload: Prisma.$payment_platformsPayload<ExtArgs>
        fields: Prisma.payment_platformsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_platformsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_platformsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          findFirst: {
            args: Prisma.payment_platformsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_platformsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          findMany: {
            args: Prisma.payment_platformsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>[]
          }
          create: {
            args: Prisma.payment_platformsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          createMany: {
            args: Prisma.payment_platformsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_platformsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          update: {
            args: Prisma.payment_platformsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          deleteMany: {
            args: Prisma.payment_platformsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_platformsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_platformsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_platformsPayload>
          }
          aggregate: {
            args: Prisma.Payment_platformsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_platforms>
          }
          groupBy: {
            args: Prisma.payment_platformsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_platformsGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_platformsCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_platformsCountAggregateOutputType> | number
          }
        }
      }
      payment_records: {
        payload: Prisma.$payment_recordsPayload<ExtArgs>
        fields: Prisma.payment_recordsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_recordsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_recordsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          findFirst: {
            args: Prisma.payment_recordsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_recordsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          findMany: {
            args: Prisma.payment_recordsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>[]
          }
          create: {
            args: Prisma.payment_recordsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          createMany: {
            args: Prisma.payment_recordsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_recordsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          update: {
            args: Prisma.payment_recordsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          deleteMany: {
            args: Prisma.payment_recordsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_recordsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_recordsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_recordsPayload>
          }
          aggregate: {
            args: Prisma.Payment_recordsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_records>
          }
          groupBy: {
            args: Prisma.payment_recordsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_recordsGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_recordsCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_recordsCountAggregateOutputType> | number
          }
        }
      }
      payment_templates: {
        payload: Prisma.$payment_templatesPayload<ExtArgs>
        fields: Prisma.payment_templatesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.payment_templatesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.payment_templatesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          findFirst: {
            args: Prisma.payment_templatesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.payment_templatesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          findMany: {
            args: Prisma.payment_templatesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>[]
          }
          create: {
            args: Prisma.payment_templatesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          createMany: {
            args: Prisma.payment_templatesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.payment_templatesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          update: {
            args: Prisma.payment_templatesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          deleteMany: {
            args: Prisma.payment_templatesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.payment_templatesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.payment_templatesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$payment_templatesPayload>
          }
          aggregate: {
            args: Prisma.Payment_templatesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePayment_templates>
          }
          groupBy: {
            args: Prisma.payment_templatesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Payment_templatesGroupByOutputType>[]
          }
          count: {
            args: Prisma.payment_templatesCountArgs<ExtArgs>,
            result: $Utils.Optional<Payment_templatesCountAggregateOutputType> | number
          }
        }
      }
      personal_access_tokens: {
        payload: Prisma.$personal_access_tokensPayload<ExtArgs>
        fields: Prisma.personal_access_tokensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.personal_access_tokensFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.personal_access_tokensFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          findFirst: {
            args: Prisma.personal_access_tokensFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.personal_access_tokensFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          findMany: {
            args: Prisma.personal_access_tokensFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>[]
          }
          create: {
            args: Prisma.personal_access_tokensCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          createMany: {
            args: Prisma.personal_access_tokensCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.personal_access_tokensDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          update: {
            args: Prisma.personal_access_tokensUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          deleteMany: {
            args: Prisma.personal_access_tokensDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.personal_access_tokensUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.personal_access_tokensUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$personal_access_tokensPayload>
          }
          aggregate: {
            args: Prisma.Personal_access_tokensAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePersonal_access_tokens>
          }
          groupBy: {
            args: Prisma.personal_access_tokensGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Personal_access_tokensGroupByOutputType>[]
          }
          count: {
            args: Prisma.personal_access_tokensCountArgs<ExtArgs>,
            result: $Utils.Optional<Personal_access_tokensCountAggregateOutputType> | number
          }
        }
      }
      telescope_entries: {
        payload: Prisma.$telescope_entriesPayload<ExtArgs>
        fields: Prisma.telescope_entriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.telescope_entriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.telescope_entriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          findFirst: {
            args: Prisma.telescope_entriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.telescope_entriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          findMany: {
            args: Prisma.telescope_entriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>[]
          }
          create: {
            args: Prisma.telescope_entriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          createMany: {
            args: Prisma.telescope_entriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.telescope_entriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          update: {
            args: Prisma.telescope_entriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          deleteMany: {
            args: Prisma.telescope_entriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.telescope_entriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.telescope_entriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$telescope_entriesPayload>
          }
          aggregate: {
            args: Prisma.Telescope_entriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTelescope_entries>
          }
          groupBy: {
            args: Prisma.telescope_entriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<Telescope_entriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.telescope_entriesCountArgs<ExtArgs>,
            result: $Utils.Optional<Telescope_entriesCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type Payment_categoriesCountOutputType
   */

  export type Payment_categoriesCountOutputType = {
    payment_records: number
    payment_templates: number
  }

  export type Payment_categoriesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | Payment_categoriesCountOutputTypeCountPayment_recordsArgs
    payment_templates?: boolean | Payment_categoriesCountOutputTypeCountPayment_templatesArgs
  }

  // Custom InputTypes
  /**
   * Payment_categoriesCountOutputType without action
   */
  export type Payment_categoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_categoriesCountOutputType
     */
    select?: Payment_categoriesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Payment_categoriesCountOutputType without action
   */
  export type Payment_categoriesCountOutputTypeCountPayment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordsWhereInput
  }

  /**
   * Payment_categoriesCountOutputType without action
   */
  export type Payment_categoriesCountOutputTypeCountPayment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_templatesWhereInput
  }


  /**
   * Count Type Payment_frequenciesCountOutputType
   */

  export type Payment_frequenciesCountOutputType = {
    payment_records: number
    payment_templates: number
  }

  export type Payment_frequenciesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | Payment_frequenciesCountOutputTypeCountPayment_recordsArgs
    payment_templates?: boolean | Payment_frequenciesCountOutputTypeCountPayment_templatesArgs
  }

  // Custom InputTypes
  /**
   * Payment_frequenciesCountOutputType without action
   */
  export type Payment_frequenciesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_frequenciesCountOutputType
     */
    select?: Payment_frequenciesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Payment_frequenciesCountOutputType without action
   */
  export type Payment_frequenciesCountOutputTypeCountPayment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordsWhereInput
  }

  /**
   * Payment_frequenciesCountOutputType without action
   */
  export type Payment_frequenciesCountOutputTypeCountPayment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_templatesWhereInput
  }


  /**
   * Count Type Payment_periodsCountOutputType
   */

  export type Payment_periodsCountOutputType = {
    payment_records: number
  }

  export type Payment_periodsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | Payment_periodsCountOutputTypeCountPayment_recordsArgs
  }

  // Custom InputTypes
  /**
   * Payment_periodsCountOutputType without action
   */
  export type Payment_periodsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_periodsCountOutputType
     */
    select?: Payment_periodsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Payment_periodsCountOutputType without action
   */
  export type Payment_periodsCountOutputTypeCountPayment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordsWhereInput
  }


  /**
   * Count Type Payment_platformsCountOutputType
   */

  export type Payment_platformsCountOutputType = {
    payment_records: number
    payment_templates: number
  }

  export type Payment_platformsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | Payment_platformsCountOutputTypeCountPayment_recordsArgs
    payment_templates?: boolean | Payment_platformsCountOutputTypeCountPayment_templatesArgs
  }

  // Custom InputTypes
  /**
   * Payment_platformsCountOutputType without action
   */
  export type Payment_platformsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment_platformsCountOutputType
     */
    select?: Payment_platformsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Payment_platformsCountOutputType without action
   */
  export type Payment_platformsCountOutputTypeCountPayment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordsWhereInput
  }

  /**
   * Payment_platformsCountOutputType without action
   */
  export type Payment_platformsCountOutputTypeCountPayment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_templatesWhereInput
  }


  /**
   * Models
   */

  /**
   * Model cache
   */

  export type AggregateCache = {
    _count: CacheCountAggregateOutputType | null
    _avg: CacheAvgAggregateOutputType | null
    _sum: CacheSumAggregateOutputType | null
    _min: CacheMinAggregateOutputType | null
    _max: CacheMaxAggregateOutputType | null
  }

  export type CacheAvgAggregateOutputType = {
    expiration: number | null
  }

  export type CacheSumAggregateOutputType = {
    expiration: number | null
  }

  export type CacheMinAggregateOutputType = {
    key: string | null
    value: string | null
    expiration: number | null
  }

  export type CacheMaxAggregateOutputType = {
    key: string | null
    value: string | null
    expiration: number | null
  }

  export type CacheCountAggregateOutputType = {
    key: number
    value: number
    expiration: number
    _all: number
  }


  export type CacheAvgAggregateInputType = {
    expiration?: true
  }

  export type CacheSumAggregateInputType = {
    expiration?: true
  }

  export type CacheMinAggregateInputType = {
    key?: true
    value?: true
    expiration?: true
  }

  export type CacheMaxAggregateInputType = {
    key?: true
    value?: true
    expiration?: true
  }

  export type CacheCountAggregateInputType = {
    key?: true
    value?: true
    expiration?: true
    _all?: true
  }

  export type CacheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cache to aggregate.
     */
    where?: cacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caches to fetch.
     */
    orderBy?: cacheOrderByWithRelationInput | cacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned caches
    **/
    _count?: true | CacheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CacheAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CacheSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CacheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CacheMaxAggregateInputType
  }

  export type GetCacheAggregateType<T extends CacheAggregateArgs> = {
        [P in keyof T & keyof AggregateCache]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCache[P]>
      : GetScalarType<T[P], AggregateCache[P]>
  }




  export type cacheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cacheWhereInput
    orderBy?: cacheOrderByWithAggregationInput | cacheOrderByWithAggregationInput[]
    by: CacheScalarFieldEnum[] | CacheScalarFieldEnum
    having?: cacheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CacheCountAggregateInputType | true
    _avg?: CacheAvgAggregateInputType
    _sum?: CacheSumAggregateInputType
    _min?: CacheMinAggregateInputType
    _max?: CacheMaxAggregateInputType
  }

  export type CacheGroupByOutputType = {
    key: string
    value: string
    expiration: number
    _count: CacheCountAggregateOutputType | null
    _avg: CacheAvgAggregateOutputType | null
    _sum: CacheSumAggregateOutputType | null
    _min: CacheMinAggregateOutputType | null
    _max: CacheMaxAggregateOutputType | null
  }

  type GetCacheGroupByPayload<T extends cacheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CacheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CacheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CacheGroupByOutputType[P]>
            : GetScalarType<T[P], CacheGroupByOutputType[P]>
        }
      >
    >


  export type cacheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    value?: boolean
    expiration?: boolean
  }, ExtArgs["result"]["cache"]>

  export type cacheSelectScalar = {
    key?: boolean
    value?: boolean
    expiration?: boolean
  }



  export type $cachePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cache"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: string
      value: string
      expiration: number
    }, ExtArgs["result"]["cache"]>
    composites: {}
  }


  type cacheGetPayload<S extends boolean | null | undefined | cacheDefaultArgs> = $Result.GetResult<Prisma.$cachePayload, S>

  type cacheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cacheFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CacheCountAggregateInputType | true
    }

  export interface cacheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cache'], meta: { name: 'cache' } }
    /**
     * Find zero or one Cache that matches the filter.
     * @param {cacheFindUniqueArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cacheFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cacheFindUniqueArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cache that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cacheFindUniqueOrThrowArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cacheFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cache that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheFindFirstArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cacheFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheFindFirstArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cache that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheFindFirstOrThrowArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cacheFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Caches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Caches
     * const caches = await prisma.cache.findMany()
     * 
     * // Get first 10 Caches
     * const caches = await prisma.cache.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const cacheWithKeyOnly = await prisma.cache.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends cacheFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cache.
     * @param {cacheCreateArgs} args - Arguments to create a Cache.
     * @example
     * // Create one Cache
     * const Cache = await prisma.cache.create({
     *   data: {
     *     // ... data to create a Cache
     *   }
     * })
     * 
    **/
    create<T extends cacheCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cacheCreateArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Caches.
     *     @param {cacheCreateManyArgs} args - Arguments to create many Caches.
     *     @example
     *     // Create many Caches
     *     const cache = await prisma.cache.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cacheCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cache.
     * @param {cacheDeleteArgs} args - Arguments to delete one Cache.
     * @example
     * // Delete one Cache
     * const Cache = await prisma.cache.delete({
     *   where: {
     *     // ... filter to delete one Cache
     *   }
     * })
     * 
    **/
    delete<T extends cacheDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cacheDeleteArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cache.
     * @param {cacheUpdateArgs} args - Arguments to update one Cache.
     * @example
     * // Update one Cache
     * const cache = await prisma.cache.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cacheUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cacheUpdateArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Caches.
     * @param {cacheDeleteManyArgs} args - Arguments to filter Caches to delete.
     * @example
     * // Delete a few Caches
     * const { count } = await prisma.cache.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cacheDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cacheDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Caches
     * const cache = await prisma.cache.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cacheUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cacheUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cache.
     * @param {cacheUpsertArgs} args - Arguments to update or create a Cache.
     * @example
     * // Update or create a Cache
     * const cache = await prisma.cache.upsert({
     *   create: {
     *     // ... data to create a Cache
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cache we want to update
     *   }
     * })
    **/
    upsert<T extends cacheUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cacheUpsertArgs<ExtArgs>>
    ): Prisma__cacheClient<$Result.GetResult<Prisma.$cachePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Caches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheCountArgs} args - Arguments to filter Caches to count.
     * @example
     * // Count the number of Caches
     * const count = await prisma.cache.count({
     *   where: {
     *     // ... the filter for the Caches we want to count
     *   }
     * })
    **/
    count<T extends cacheCountArgs>(
      args?: Subset<T, cacheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CacheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CacheAggregateArgs>(args: Subset<T, CacheAggregateArgs>): Prisma.PrismaPromise<GetCacheAggregateType<T>>

    /**
     * Group by Cache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cacheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cacheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cacheGroupByArgs['orderBy'] }
        : { orderBy?: cacheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cacheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCacheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cache model
   */
  readonly fields: cacheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cache.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cacheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cache model
   */ 
  interface cacheFieldRefs {
    readonly key: FieldRef<"cache", 'String'>
    readonly value: FieldRef<"cache", 'String'>
    readonly expiration: FieldRef<"cache", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * cache findUnique
   */
  export type cacheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter, which cache to fetch.
     */
    where: cacheWhereUniqueInput
  }

  /**
   * cache findUniqueOrThrow
   */
  export type cacheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter, which cache to fetch.
     */
    where: cacheWhereUniqueInput
  }

  /**
   * cache findFirst
   */
  export type cacheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter, which cache to fetch.
     */
    where?: cacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caches to fetch.
     */
    orderBy?: cacheOrderByWithRelationInput | cacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for caches.
     */
    cursor?: cacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of caches.
     */
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * cache findFirstOrThrow
   */
  export type cacheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter, which cache to fetch.
     */
    where?: cacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caches to fetch.
     */
    orderBy?: cacheOrderByWithRelationInput | cacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for caches.
     */
    cursor?: cacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of caches.
     */
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * cache findMany
   */
  export type cacheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter, which caches to fetch.
     */
    where?: cacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of caches to fetch.
     */
    orderBy?: cacheOrderByWithRelationInput | cacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing caches.
     */
    cursor?: cacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` caches.
     */
    skip?: number
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * cache create
   */
  export type cacheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * The data needed to create a cache.
     */
    data: XOR<cacheCreateInput, cacheUncheckedCreateInput>
  }

  /**
   * cache createMany
   */
  export type cacheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many caches.
     */
    data: cacheCreateManyInput | cacheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cache update
   */
  export type cacheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * The data needed to update a cache.
     */
    data: XOR<cacheUpdateInput, cacheUncheckedUpdateInput>
    /**
     * Choose, which cache to update.
     */
    where: cacheWhereUniqueInput
  }

  /**
   * cache updateMany
   */
  export type cacheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update caches.
     */
    data: XOR<cacheUpdateManyMutationInput, cacheUncheckedUpdateManyInput>
    /**
     * Filter which caches to update
     */
    where?: cacheWhereInput
  }

  /**
   * cache upsert
   */
  export type cacheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * The filter to search for the cache to update in case it exists.
     */
    where: cacheWhereUniqueInput
    /**
     * In case the cache found by the `where` argument doesn't exist, create a new cache with this data.
     */
    create: XOR<cacheCreateInput, cacheUncheckedCreateInput>
    /**
     * In case the cache was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cacheUpdateInput, cacheUncheckedUpdateInput>
  }

  /**
   * cache delete
   */
  export type cacheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
    /**
     * Filter which cache to delete.
     */
    where: cacheWhereUniqueInput
  }

  /**
   * cache deleteMany
   */
  export type cacheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which caches to delete
     */
    where?: cacheWhereInput
  }

  /**
   * cache without action
   */
  export type cacheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache
     */
    select?: cacheSelect<ExtArgs> | null
  }


  /**
   * Model cache_locks
   */

  export type AggregateCache_locks = {
    _count: Cache_locksCountAggregateOutputType | null
    _avg: Cache_locksAvgAggregateOutputType | null
    _sum: Cache_locksSumAggregateOutputType | null
    _min: Cache_locksMinAggregateOutputType | null
    _max: Cache_locksMaxAggregateOutputType | null
  }

  export type Cache_locksAvgAggregateOutputType = {
    expiration: number | null
  }

  export type Cache_locksSumAggregateOutputType = {
    expiration: number | null
  }

  export type Cache_locksMinAggregateOutputType = {
    key: string | null
    owner: string | null
    expiration: number | null
  }

  export type Cache_locksMaxAggregateOutputType = {
    key: string | null
    owner: string | null
    expiration: number | null
  }

  export type Cache_locksCountAggregateOutputType = {
    key: number
    owner: number
    expiration: number
    _all: number
  }


  export type Cache_locksAvgAggregateInputType = {
    expiration?: true
  }

  export type Cache_locksSumAggregateInputType = {
    expiration?: true
  }

  export type Cache_locksMinAggregateInputType = {
    key?: true
    owner?: true
    expiration?: true
  }

  export type Cache_locksMaxAggregateInputType = {
    key?: true
    owner?: true
    expiration?: true
  }

  export type Cache_locksCountAggregateInputType = {
    key?: true
    owner?: true
    expiration?: true
    _all?: true
  }

  export type Cache_locksAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cache_locks to aggregate.
     */
    where?: cache_locksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cache_locks to fetch.
     */
    orderBy?: cache_locksOrderByWithRelationInput | cache_locksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cache_locksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cache_locks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cache_locks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cache_locks
    **/
    _count?: true | Cache_locksCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Cache_locksAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Cache_locksSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Cache_locksMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Cache_locksMaxAggregateInputType
  }

  export type GetCache_locksAggregateType<T extends Cache_locksAggregateArgs> = {
        [P in keyof T & keyof AggregateCache_locks]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCache_locks[P]>
      : GetScalarType<T[P], AggregateCache_locks[P]>
  }




  export type cache_locksGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cache_locksWhereInput
    orderBy?: cache_locksOrderByWithAggregationInput | cache_locksOrderByWithAggregationInput[]
    by: Cache_locksScalarFieldEnum[] | Cache_locksScalarFieldEnum
    having?: cache_locksScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Cache_locksCountAggregateInputType | true
    _avg?: Cache_locksAvgAggregateInputType
    _sum?: Cache_locksSumAggregateInputType
    _min?: Cache_locksMinAggregateInputType
    _max?: Cache_locksMaxAggregateInputType
  }

  export type Cache_locksGroupByOutputType = {
    key: string
    owner: string
    expiration: number
    _count: Cache_locksCountAggregateOutputType | null
    _avg: Cache_locksAvgAggregateOutputType | null
    _sum: Cache_locksSumAggregateOutputType | null
    _min: Cache_locksMinAggregateOutputType | null
    _max: Cache_locksMaxAggregateOutputType | null
  }

  type GetCache_locksGroupByPayload<T extends cache_locksGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Cache_locksGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Cache_locksGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Cache_locksGroupByOutputType[P]>
            : GetScalarType<T[P], Cache_locksGroupByOutputType[P]>
        }
      >
    >


  export type cache_locksSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    owner?: boolean
    expiration?: boolean
  }, ExtArgs["result"]["cache_locks"]>

  export type cache_locksSelectScalar = {
    key?: boolean
    owner?: boolean
    expiration?: boolean
  }



  export type $cache_locksPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "cache_locks"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: string
      owner: string
      expiration: number
    }, ExtArgs["result"]["cache_locks"]>
    composites: {}
  }


  type cache_locksGetPayload<S extends boolean | null | undefined | cache_locksDefaultArgs> = $Result.GetResult<Prisma.$cache_locksPayload, S>

  type cache_locksCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<cache_locksFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Cache_locksCountAggregateInputType | true
    }

  export interface cache_locksDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['cache_locks'], meta: { name: 'cache_locks' } }
    /**
     * Find zero or one Cache_locks that matches the filter.
     * @param {cache_locksFindUniqueArgs} args - Arguments to find a Cache_locks
     * @example
     * // Get one Cache_locks
     * const cache_locks = await prisma.cache_locks.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends cache_locksFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksFindUniqueArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Cache_locks that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {cache_locksFindUniqueOrThrowArgs} args - Arguments to find a Cache_locks
     * @example
     * // Get one Cache_locks
     * const cache_locks = await prisma.cache_locks.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends cache_locksFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Cache_locks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksFindFirstArgs} args - Arguments to find a Cache_locks
     * @example
     * // Get one Cache_locks
     * const cache_locks = await prisma.cache_locks.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends cache_locksFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksFindFirstArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Cache_locks that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksFindFirstOrThrowArgs} args - Arguments to find a Cache_locks
     * @example
     * // Get one Cache_locks
     * const cache_locks = await prisma.cache_locks.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends cache_locksFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Cache_locks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cache_locks
     * const cache_locks = await prisma.cache_locks.findMany()
     * 
     * // Get first 10 Cache_locks
     * const cache_locks = await prisma.cache_locks.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const cache_locksWithKeyOnly = await prisma.cache_locks.findMany({ select: { key: true } })
     * 
    **/
    findMany<T extends cache_locksFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Cache_locks.
     * @param {cache_locksCreateArgs} args - Arguments to create a Cache_locks.
     * @example
     * // Create one Cache_locks
     * const Cache_locks = await prisma.cache_locks.create({
     *   data: {
     *     // ... data to create a Cache_locks
     *   }
     * })
     * 
    **/
    create<T extends cache_locksCreateArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksCreateArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Cache_locks.
     *     @param {cache_locksCreateManyArgs} args - Arguments to create many Cache_locks.
     *     @example
     *     // Create many Cache_locks
     *     const cache_locks = await prisma.cache_locks.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends cache_locksCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Cache_locks.
     * @param {cache_locksDeleteArgs} args - Arguments to delete one Cache_locks.
     * @example
     * // Delete one Cache_locks
     * const Cache_locks = await prisma.cache_locks.delete({
     *   where: {
     *     // ... filter to delete one Cache_locks
     *   }
     * })
     * 
    **/
    delete<T extends cache_locksDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksDeleteArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Cache_locks.
     * @param {cache_locksUpdateArgs} args - Arguments to update one Cache_locks.
     * @example
     * // Update one Cache_locks
     * const cache_locks = await prisma.cache_locks.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends cache_locksUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksUpdateArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Cache_locks.
     * @param {cache_locksDeleteManyArgs} args - Arguments to filter Cache_locks to delete.
     * @example
     * // Delete a few Cache_locks
     * const { count } = await prisma.cache_locks.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends cache_locksDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, cache_locksDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cache_locks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cache_locks
     * const cache_locks = await prisma.cache_locks.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends cache_locksUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Cache_locks.
     * @param {cache_locksUpsertArgs} args - Arguments to update or create a Cache_locks.
     * @example
     * // Update or create a Cache_locks
     * const cache_locks = await prisma.cache_locks.upsert({
     *   create: {
     *     // ... data to create a Cache_locks
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cache_locks we want to update
     *   }
     * })
    **/
    upsert<T extends cache_locksUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, cache_locksUpsertArgs<ExtArgs>>
    ): Prisma__cache_locksClient<$Result.GetResult<Prisma.$cache_locksPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Cache_locks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksCountArgs} args - Arguments to filter Cache_locks to count.
     * @example
     * // Count the number of Cache_locks
     * const count = await prisma.cache_locks.count({
     *   where: {
     *     // ... the filter for the Cache_locks we want to count
     *   }
     * })
    **/
    count<T extends cache_locksCountArgs>(
      args?: Subset<T, cache_locksCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Cache_locksCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cache_locks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Cache_locksAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Cache_locksAggregateArgs>(args: Subset<T, Cache_locksAggregateArgs>): Prisma.PrismaPromise<GetCache_locksAggregateType<T>>

    /**
     * Group by Cache_locks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cache_locksGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cache_locksGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cache_locksGroupByArgs['orderBy'] }
        : { orderBy?: cache_locksGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cache_locksGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCache_locksGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the cache_locks model
   */
  readonly fields: cache_locksFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for cache_locks.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cache_locksClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the cache_locks model
   */ 
  interface cache_locksFieldRefs {
    readonly key: FieldRef<"cache_locks", 'String'>
    readonly owner: FieldRef<"cache_locks", 'String'>
    readonly expiration: FieldRef<"cache_locks", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * cache_locks findUnique
   */
  export type cache_locksFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter, which cache_locks to fetch.
     */
    where: cache_locksWhereUniqueInput
  }

  /**
   * cache_locks findUniqueOrThrow
   */
  export type cache_locksFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter, which cache_locks to fetch.
     */
    where: cache_locksWhereUniqueInput
  }

  /**
   * cache_locks findFirst
   */
  export type cache_locksFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter, which cache_locks to fetch.
     */
    where?: cache_locksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cache_locks to fetch.
     */
    orderBy?: cache_locksOrderByWithRelationInput | cache_locksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cache_locks.
     */
    cursor?: cache_locksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cache_locks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cache_locks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cache_locks.
     */
    distinct?: Cache_locksScalarFieldEnum | Cache_locksScalarFieldEnum[]
  }

  /**
   * cache_locks findFirstOrThrow
   */
  export type cache_locksFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter, which cache_locks to fetch.
     */
    where?: cache_locksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cache_locks to fetch.
     */
    orderBy?: cache_locksOrderByWithRelationInput | cache_locksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cache_locks.
     */
    cursor?: cache_locksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cache_locks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cache_locks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cache_locks.
     */
    distinct?: Cache_locksScalarFieldEnum | Cache_locksScalarFieldEnum[]
  }

  /**
   * cache_locks findMany
   */
  export type cache_locksFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter, which cache_locks to fetch.
     */
    where?: cache_locksWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cache_locks to fetch.
     */
    orderBy?: cache_locksOrderByWithRelationInput | cache_locksOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cache_locks.
     */
    cursor?: cache_locksWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cache_locks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cache_locks.
     */
    skip?: number
    distinct?: Cache_locksScalarFieldEnum | Cache_locksScalarFieldEnum[]
  }

  /**
   * cache_locks create
   */
  export type cache_locksCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * The data needed to create a cache_locks.
     */
    data: XOR<cache_locksCreateInput, cache_locksUncheckedCreateInput>
  }

  /**
   * cache_locks createMany
   */
  export type cache_locksCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cache_locks.
     */
    data: cache_locksCreateManyInput | cache_locksCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * cache_locks update
   */
  export type cache_locksUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * The data needed to update a cache_locks.
     */
    data: XOR<cache_locksUpdateInput, cache_locksUncheckedUpdateInput>
    /**
     * Choose, which cache_locks to update.
     */
    where: cache_locksWhereUniqueInput
  }

  /**
   * cache_locks updateMany
   */
  export type cache_locksUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cache_locks.
     */
    data: XOR<cache_locksUpdateManyMutationInput, cache_locksUncheckedUpdateManyInput>
    /**
     * Filter which cache_locks to update
     */
    where?: cache_locksWhereInput
  }

  /**
   * cache_locks upsert
   */
  export type cache_locksUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * The filter to search for the cache_locks to update in case it exists.
     */
    where: cache_locksWhereUniqueInput
    /**
     * In case the cache_locks found by the `where` argument doesn't exist, create a new cache_locks with this data.
     */
    create: XOR<cache_locksCreateInput, cache_locksUncheckedCreateInput>
    /**
     * In case the cache_locks was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cache_locksUpdateInput, cache_locksUncheckedUpdateInput>
  }

  /**
   * cache_locks delete
   */
  export type cache_locksDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
    /**
     * Filter which cache_locks to delete.
     */
    where: cache_locksWhereUniqueInput
  }

  /**
   * cache_locks deleteMany
   */
  export type cache_locksDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cache_locks to delete
     */
    where?: cache_locksWhereInput
  }

  /**
   * cache_locks without action
   */
  export type cache_locksDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the cache_locks
     */
    select?: cache_locksSelect<ExtArgs> | null
  }


  /**
   * Model failed_jobs
   */

  export type AggregateFailed_jobs = {
    _count: Failed_jobsCountAggregateOutputType | null
    _avg: Failed_jobsAvgAggregateOutputType | null
    _sum: Failed_jobsSumAggregateOutputType | null
    _min: Failed_jobsMinAggregateOutputType | null
    _max: Failed_jobsMaxAggregateOutputType | null
  }

  export type Failed_jobsAvgAggregateOutputType = {
    id: number | null
  }

  export type Failed_jobsSumAggregateOutputType = {
    id: bigint | null
  }

  export type Failed_jobsMinAggregateOutputType = {
    id: bigint | null
    uuid: string | null
    connection: string | null
    queue: string | null
    payload: string | null
    exception: string | null
    failed_at: Date | null
  }

  export type Failed_jobsMaxAggregateOutputType = {
    id: bigint | null
    uuid: string | null
    connection: string | null
    queue: string | null
    payload: string | null
    exception: string | null
    failed_at: Date | null
  }

  export type Failed_jobsCountAggregateOutputType = {
    id: number
    uuid: number
    connection: number
    queue: number
    payload: number
    exception: number
    failed_at: number
    _all: number
  }


  export type Failed_jobsAvgAggregateInputType = {
    id?: true
  }

  export type Failed_jobsSumAggregateInputType = {
    id?: true
  }

  export type Failed_jobsMinAggregateInputType = {
    id?: true
    uuid?: true
    connection?: true
    queue?: true
    payload?: true
    exception?: true
    failed_at?: true
  }

  export type Failed_jobsMaxAggregateInputType = {
    id?: true
    uuid?: true
    connection?: true
    queue?: true
    payload?: true
    exception?: true
    failed_at?: true
  }

  export type Failed_jobsCountAggregateInputType = {
    id?: true
    uuid?: true
    connection?: true
    queue?: true
    payload?: true
    exception?: true
    failed_at?: true
    _all?: true
  }

  export type Failed_jobsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which failed_jobs to aggregate.
     */
    where?: failed_jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of failed_jobs to fetch.
     */
    orderBy?: failed_jobsOrderByWithRelationInput | failed_jobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: failed_jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` failed_jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` failed_jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned failed_jobs
    **/
    _count?: true | Failed_jobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Failed_jobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Failed_jobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Failed_jobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Failed_jobsMaxAggregateInputType
  }

  export type GetFailed_jobsAggregateType<T extends Failed_jobsAggregateArgs> = {
        [P in keyof T & keyof AggregateFailed_jobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFailed_jobs[P]>
      : GetScalarType<T[P], AggregateFailed_jobs[P]>
  }




  export type failed_jobsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: failed_jobsWhereInput
    orderBy?: failed_jobsOrderByWithAggregationInput | failed_jobsOrderByWithAggregationInput[]
    by: Failed_jobsScalarFieldEnum[] | Failed_jobsScalarFieldEnum
    having?: failed_jobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Failed_jobsCountAggregateInputType | true
    _avg?: Failed_jobsAvgAggregateInputType
    _sum?: Failed_jobsSumAggregateInputType
    _min?: Failed_jobsMinAggregateInputType
    _max?: Failed_jobsMaxAggregateInputType
  }

  export type Failed_jobsGroupByOutputType = {
    id: bigint
    uuid: string
    connection: string
    queue: string
    payload: string
    exception: string
    failed_at: Date
    _count: Failed_jobsCountAggregateOutputType | null
    _avg: Failed_jobsAvgAggregateOutputType | null
    _sum: Failed_jobsSumAggregateOutputType | null
    _min: Failed_jobsMinAggregateOutputType | null
    _max: Failed_jobsMaxAggregateOutputType | null
  }

  type GetFailed_jobsGroupByPayload<T extends failed_jobsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Failed_jobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Failed_jobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Failed_jobsGroupByOutputType[P]>
            : GetScalarType<T[P], Failed_jobsGroupByOutputType[P]>
        }
      >
    >


  export type failed_jobsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    uuid?: boolean
    connection?: boolean
    queue?: boolean
    payload?: boolean
    exception?: boolean
    failed_at?: boolean
  }, ExtArgs["result"]["failed_jobs"]>

  export type failed_jobsSelectScalar = {
    id?: boolean
    uuid?: boolean
    connection?: boolean
    queue?: boolean
    payload?: boolean
    exception?: boolean
    failed_at?: boolean
  }



  export type $failed_jobsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "failed_jobs"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      uuid: string
      connection: string
      queue: string
      payload: string
      exception: string
      failed_at: Date
    }, ExtArgs["result"]["failed_jobs"]>
    composites: {}
  }


  type failed_jobsGetPayload<S extends boolean | null | undefined | failed_jobsDefaultArgs> = $Result.GetResult<Prisma.$failed_jobsPayload, S>

  type failed_jobsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<failed_jobsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Failed_jobsCountAggregateInputType | true
    }

  export interface failed_jobsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['failed_jobs'], meta: { name: 'failed_jobs' } }
    /**
     * Find zero or one Failed_jobs that matches the filter.
     * @param {failed_jobsFindUniqueArgs} args - Arguments to find a Failed_jobs
     * @example
     * // Get one Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends failed_jobsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsFindUniqueArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Failed_jobs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {failed_jobsFindUniqueOrThrowArgs} args - Arguments to find a Failed_jobs
     * @example
     * // Get one Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends failed_jobsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Failed_jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsFindFirstArgs} args - Arguments to find a Failed_jobs
     * @example
     * // Get one Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends failed_jobsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsFindFirstArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Failed_jobs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsFindFirstOrThrowArgs} args - Arguments to find a Failed_jobs
     * @example
     * // Get one Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends failed_jobsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Failed_jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findMany()
     * 
     * // Get first 10 Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const failed_jobsWithIdOnly = await prisma.failed_jobs.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends failed_jobsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Failed_jobs.
     * @param {failed_jobsCreateArgs} args - Arguments to create a Failed_jobs.
     * @example
     * // Create one Failed_jobs
     * const Failed_jobs = await prisma.failed_jobs.create({
     *   data: {
     *     // ... data to create a Failed_jobs
     *   }
     * })
     * 
    **/
    create<T extends failed_jobsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsCreateArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Failed_jobs.
     *     @param {failed_jobsCreateManyArgs} args - Arguments to create many Failed_jobs.
     *     @example
     *     // Create many Failed_jobs
     *     const failed_jobs = await prisma.failed_jobs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends failed_jobsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Failed_jobs.
     * @param {failed_jobsDeleteArgs} args - Arguments to delete one Failed_jobs.
     * @example
     * // Delete one Failed_jobs
     * const Failed_jobs = await prisma.failed_jobs.delete({
     *   where: {
     *     // ... filter to delete one Failed_jobs
     *   }
     * })
     * 
    **/
    delete<T extends failed_jobsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsDeleteArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Failed_jobs.
     * @param {failed_jobsUpdateArgs} args - Arguments to update one Failed_jobs.
     * @example
     * // Update one Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends failed_jobsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsUpdateArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Failed_jobs.
     * @param {failed_jobsDeleteManyArgs} args - Arguments to filter Failed_jobs to delete.
     * @example
     * // Delete a few Failed_jobs
     * const { count } = await prisma.failed_jobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends failed_jobsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, failed_jobsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Failed_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends failed_jobsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Failed_jobs.
     * @param {failed_jobsUpsertArgs} args - Arguments to update or create a Failed_jobs.
     * @example
     * // Update or create a Failed_jobs
     * const failed_jobs = await prisma.failed_jobs.upsert({
     *   create: {
     *     // ... data to create a Failed_jobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Failed_jobs we want to update
     *   }
     * })
    **/
    upsert<T extends failed_jobsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, failed_jobsUpsertArgs<ExtArgs>>
    ): Prisma__failed_jobsClient<$Result.GetResult<Prisma.$failed_jobsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Failed_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsCountArgs} args - Arguments to filter Failed_jobs to count.
     * @example
     * // Count the number of Failed_jobs
     * const count = await prisma.failed_jobs.count({
     *   where: {
     *     // ... the filter for the Failed_jobs we want to count
     *   }
     * })
    **/
    count<T extends failed_jobsCountArgs>(
      args?: Subset<T, failed_jobsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Failed_jobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Failed_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Failed_jobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Failed_jobsAggregateArgs>(args: Subset<T, Failed_jobsAggregateArgs>): Prisma.PrismaPromise<GetFailed_jobsAggregateType<T>>

    /**
     * Group by Failed_jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {failed_jobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends failed_jobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: failed_jobsGroupByArgs['orderBy'] }
        : { orderBy?: failed_jobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, failed_jobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFailed_jobsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the failed_jobs model
   */
  readonly fields: failed_jobsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for failed_jobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__failed_jobsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the failed_jobs model
   */ 
  interface failed_jobsFieldRefs {
    readonly id: FieldRef<"failed_jobs", 'BigInt'>
    readonly uuid: FieldRef<"failed_jobs", 'String'>
    readonly connection: FieldRef<"failed_jobs", 'String'>
    readonly queue: FieldRef<"failed_jobs", 'String'>
    readonly payload: FieldRef<"failed_jobs", 'String'>
    readonly exception: FieldRef<"failed_jobs", 'String'>
    readonly failed_at: FieldRef<"failed_jobs", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * failed_jobs findUnique
   */
  export type failed_jobsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter, which failed_jobs to fetch.
     */
    where: failed_jobsWhereUniqueInput
  }

  /**
   * failed_jobs findUniqueOrThrow
   */
  export type failed_jobsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter, which failed_jobs to fetch.
     */
    where: failed_jobsWhereUniqueInput
  }

  /**
   * failed_jobs findFirst
   */
  export type failed_jobsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter, which failed_jobs to fetch.
     */
    where?: failed_jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of failed_jobs to fetch.
     */
    orderBy?: failed_jobsOrderByWithRelationInput | failed_jobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for failed_jobs.
     */
    cursor?: failed_jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` failed_jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` failed_jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of failed_jobs.
     */
    distinct?: Failed_jobsScalarFieldEnum | Failed_jobsScalarFieldEnum[]
  }

  /**
   * failed_jobs findFirstOrThrow
   */
  export type failed_jobsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter, which failed_jobs to fetch.
     */
    where?: failed_jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of failed_jobs to fetch.
     */
    orderBy?: failed_jobsOrderByWithRelationInput | failed_jobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for failed_jobs.
     */
    cursor?: failed_jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` failed_jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` failed_jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of failed_jobs.
     */
    distinct?: Failed_jobsScalarFieldEnum | Failed_jobsScalarFieldEnum[]
  }

  /**
   * failed_jobs findMany
   */
  export type failed_jobsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter, which failed_jobs to fetch.
     */
    where?: failed_jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of failed_jobs to fetch.
     */
    orderBy?: failed_jobsOrderByWithRelationInput | failed_jobsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing failed_jobs.
     */
    cursor?: failed_jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` failed_jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` failed_jobs.
     */
    skip?: number
    distinct?: Failed_jobsScalarFieldEnum | Failed_jobsScalarFieldEnum[]
  }

  /**
   * failed_jobs create
   */
  export type failed_jobsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * The data needed to create a failed_jobs.
     */
    data: XOR<failed_jobsCreateInput, failed_jobsUncheckedCreateInput>
  }

  /**
   * failed_jobs createMany
   */
  export type failed_jobsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many failed_jobs.
     */
    data: failed_jobsCreateManyInput | failed_jobsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * failed_jobs update
   */
  export type failed_jobsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * The data needed to update a failed_jobs.
     */
    data: XOR<failed_jobsUpdateInput, failed_jobsUncheckedUpdateInput>
    /**
     * Choose, which failed_jobs to update.
     */
    where: failed_jobsWhereUniqueInput
  }

  /**
   * failed_jobs updateMany
   */
  export type failed_jobsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update failed_jobs.
     */
    data: XOR<failed_jobsUpdateManyMutationInput, failed_jobsUncheckedUpdateManyInput>
    /**
     * Filter which failed_jobs to update
     */
    where?: failed_jobsWhereInput
  }

  /**
   * failed_jobs upsert
   */
  export type failed_jobsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * The filter to search for the failed_jobs to update in case it exists.
     */
    where: failed_jobsWhereUniqueInput
    /**
     * In case the failed_jobs found by the `where` argument doesn't exist, create a new failed_jobs with this data.
     */
    create: XOR<failed_jobsCreateInput, failed_jobsUncheckedCreateInput>
    /**
     * In case the failed_jobs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<failed_jobsUpdateInput, failed_jobsUncheckedUpdateInput>
  }

  /**
   * failed_jobs delete
   */
  export type failed_jobsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
    /**
     * Filter which failed_jobs to delete.
     */
    where: failed_jobsWhereUniqueInput
  }

  /**
   * failed_jobs deleteMany
   */
  export type failed_jobsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which failed_jobs to delete
     */
    where?: failed_jobsWhereInput
  }

  /**
   * failed_jobs without action
   */
  export type failed_jobsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the failed_jobs
     */
    select?: failed_jobsSelect<ExtArgs> | null
  }


  /**
   * Model migrations
   */

  export type AggregateMigrations = {
    _count: MigrationsCountAggregateOutputType | null
    _avg: MigrationsAvgAggregateOutputType | null
    _sum: MigrationsSumAggregateOutputType | null
    _min: MigrationsMinAggregateOutputType | null
    _max: MigrationsMaxAggregateOutputType | null
  }

  export type MigrationsAvgAggregateOutputType = {
    id: number | null
    batch: number | null
  }

  export type MigrationsSumAggregateOutputType = {
    id: number | null
    batch: number | null
  }

  export type MigrationsMinAggregateOutputType = {
    id: number | null
    migration: string | null
    batch: number | null
  }

  export type MigrationsMaxAggregateOutputType = {
    id: number | null
    migration: string | null
    batch: number | null
  }

  export type MigrationsCountAggregateOutputType = {
    id: number
    migration: number
    batch: number
    _all: number
  }


  export type MigrationsAvgAggregateInputType = {
    id?: true
    batch?: true
  }

  export type MigrationsSumAggregateInputType = {
    id?: true
    batch?: true
  }

  export type MigrationsMinAggregateInputType = {
    id?: true
    migration?: true
    batch?: true
  }

  export type MigrationsMaxAggregateInputType = {
    id?: true
    migration?: true
    batch?: true
  }

  export type MigrationsCountAggregateInputType = {
    id?: true
    migration?: true
    batch?: true
    _all?: true
  }

  export type MigrationsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which migrations to aggregate.
     */
    where?: migrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of migrations to fetch.
     */
    orderBy?: migrationsOrderByWithRelationInput | migrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: migrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` migrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` migrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned migrations
    **/
    _count?: true | MigrationsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MigrationsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MigrationsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MigrationsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MigrationsMaxAggregateInputType
  }

  export type GetMigrationsAggregateType<T extends MigrationsAggregateArgs> = {
        [P in keyof T & keyof AggregateMigrations]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMigrations[P]>
      : GetScalarType<T[P], AggregateMigrations[P]>
  }




  export type migrationsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: migrationsWhereInput
    orderBy?: migrationsOrderByWithAggregationInput | migrationsOrderByWithAggregationInput[]
    by: MigrationsScalarFieldEnum[] | MigrationsScalarFieldEnum
    having?: migrationsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MigrationsCountAggregateInputType | true
    _avg?: MigrationsAvgAggregateInputType
    _sum?: MigrationsSumAggregateInputType
    _min?: MigrationsMinAggregateInputType
    _max?: MigrationsMaxAggregateInputType
  }

  export type MigrationsGroupByOutputType = {
    id: number
    migration: string
    batch: number
    _count: MigrationsCountAggregateOutputType | null
    _avg: MigrationsAvgAggregateOutputType | null
    _sum: MigrationsSumAggregateOutputType | null
    _min: MigrationsMinAggregateOutputType | null
    _max: MigrationsMaxAggregateOutputType | null
  }

  type GetMigrationsGroupByPayload<T extends migrationsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MigrationsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MigrationsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MigrationsGroupByOutputType[P]>
            : GetScalarType<T[P], MigrationsGroupByOutputType[P]>
        }
      >
    >


  export type migrationsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    migration?: boolean
    batch?: boolean
  }, ExtArgs["result"]["migrations"]>

  export type migrationsSelectScalar = {
    id?: boolean
    migration?: boolean
    batch?: boolean
  }



  export type $migrationsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "migrations"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      migration: string
      batch: number
    }, ExtArgs["result"]["migrations"]>
    composites: {}
  }


  type migrationsGetPayload<S extends boolean | null | undefined | migrationsDefaultArgs> = $Result.GetResult<Prisma.$migrationsPayload, S>

  type migrationsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<migrationsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MigrationsCountAggregateInputType | true
    }

  export interface migrationsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['migrations'], meta: { name: 'migrations' } }
    /**
     * Find zero or one Migrations that matches the filter.
     * @param {migrationsFindUniqueArgs} args - Arguments to find a Migrations
     * @example
     * // Get one Migrations
     * const migrations = await prisma.migrations.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends migrationsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsFindUniqueArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Migrations that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {migrationsFindUniqueOrThrowArgs} args - Arguments to find a Migrations
     * @example
     * // Get one Migrations
     * const migrations = await prisma.migrations.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends migrationsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Migrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsFindFirstArgs} args - Arguments to find a Migrations
     * @example
     * // Get one Migrations
     * const migrations = await prisma.migrations.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends migrationsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsFindFirstArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Migrations that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsFindFirstOrThrowArgs} args - Arguments to find a Migrations
     * @example
     * // Get one Migrations
     * const migrations = await prisma.migrations.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends migrationsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Migrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Migrations
     * const migrations = await prisma.migrations.findMany()
     * 
     * // Get first 10 Migrations
     * const migrations = await prisma.migrations.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const migrationsWithIdOnly = await prisma.migrations.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends migrationsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Migrations.
     * @param {migrationsCreateArgs} args - Arguments to create a Migrations.
     * @example
     * // Create one Migrations
     * const Migrations = await prisma.migrations.create({
     *   data: {
     *     // ... data to create a Migrations
     *   }
     * })
     * 
    **/
    create<T extends migrationsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsCreateArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Migrations.
     *     @param {migrationsCreateManyArgs} args - Arguments to create many Migrations.
     *     @example
     *     // Create many Migrations
     *     const migrations = await prisma.migrations.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends migrationsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Migrations.
     * @param {migrationsDeleteArgs} args - Arguments to delete one Migrations.
     * @example
     * // Delete one Migrations
     * const Migrations = await prisma.migrations.delete({
     *   where: {
     *     // ... filter to delete one Migrations
     *   }
     * })
     * 
    **/
    delete<T extends migrationsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsDeleteArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Migrations.
     * @param {migrationsUpdateArgs} args - Arguments to update one Migrations.
     * @example
     * // Update one Migrations
     * const migrations = await prisma.migrations.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends migrationsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsUpdateArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Migrations.
     * @param {migrationsDeleteManyArgs} args - Arguments to filter Migrations to delete.
     * @example
     * // Delete a few Migrations
     * const { count } = await prisma.migrations.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends migrationsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, migrationsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Migrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Migrations
     * const migrations = await prisma.migrations.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends migrationsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Migrations.
     * @param {migrationsUpsertArgs} args - Arguments to update or create a Migrations.
     * @example
     * // Update or create a Migrations
     * const migrations = await prisma.migrations.upsert({
     *   create: {
     *     // ... data to create a Migrations
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Migrations we want to update
     *   }
     * })
    **/
    upsert<T extends migrationsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, migrationsUpsertArgs<ExtArgs>>
    ): Prisma__migrationsClient<$Result.GetResult<Prisma.$migrationsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Migrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsCountArgs} args - Arguments to filter Migrations to count.
     * @example
     * // Count the number of Migrations
     * const count = await prisma.migrations.count({
     *   where: {
     *     // ... the filter for the Migrations we want to count
     *   }
     * })
    **/
    count<T extends migrationsCountArgs>(
      args?: Subset<T, migrationsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MigrationsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Migrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MigrationsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MigrationsAggregateArgs>(args: Subset<T, MigrationsAggregateArgs>): Prisma.PrismaPromise<GetMigrationsAggregateType<T>>

    /**
     * Group by Migrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {migrationsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends migrationsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: migrationsGroupByArgs['orderBy'] }
        : { orderBy?: migrationsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, migrationsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMigrationsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the migrations model
   */
  readonly fields: migrationsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for migrations.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__migrationsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the migrations model
   */ 
  interface migrationsFieldRefs {
    readonly id: FieldRef<"migrations", 'Int'>
    readonly migration: FieldRef<"migrations", 'String'>
    readonly batch: FieldRef<"migrations", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * migrations findUnique
   */
  export type migrationsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter, which migrations to fetch.
     */
    where: migrationsWhereUniqueInput
  }

  /**
   * migrations findUniqueOrThrow
   */
  export type migrationsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter, which migrations to fetch.
     */
    where: migrationsWhereUniqueInput
  }

  /**
   * migrations findFirst
   */
  export type migrationsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter, which migrations to fetch.
     */
    where?: migrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of migrations to fetch.
     */
    orderBy?: migrationsOrderByWithRelationInput | migrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for migrations.
     */
    cursor?: migrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` migrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` migrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of migrations.
     */
    distinct?: MigrationsScalarFieldEnum | MigrationsScalarFieldEnum[]
  }

  /**
   * migrations findFirstOrThrow
   */
  export type migrationsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter, which migrations to fetch.
     */
    where?: migrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of migrations to fetch.
     */
    orderBy?: migrationsOrderByWithRelationInput | migrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for migrations.
     */
    cursor?: migrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` migrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` migrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of migrations.
     */
    distinct?: MigrationsScalarFieldEnum | MigrationsScalarFieldEnum[]
  }

  /**
   * migrations findMany
   */
  export type migrationsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter, which migrations to fetch.
     */
    where?: migrationsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of migrations to fetch.
     */
    orderBy?: migrationsOrderByWithRelationInput | migrationsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing migrations.
     */
    cursor?: migrationsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` migrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` migrations.
     */
    skip?: number
    distinct?: MigrationsScalarFieldEnum | MigrationsScalarFieldEnum[]
  }

  /**
   * migrations create
   */
  export type migrationsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * The data needed to create a migrations.
     */
    data: XOR<migrationsCreateInput, migrationsUncheckedCreateInput>
  }

  /**
   * migrations createMany
   */
  export type migrationsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many migrations.
     */
    data: migrationsCreateManyInput | migrationsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * migrations update
   */
  export type migrationsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * The data needed to update a migrations.
     */
    data: XOR<migrationsUpdateInput, migrationsUncheckedUpdateInput>
    /**
     * Choose, which migrations to update.
     */
    where: migrationsWhereUniqueInput
  }

  /**
   * migrations updateMany
   */
  export type migrationsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update migrations.
     */
    data: XOR<migrationsUpdateManyMutationInput, migrationsUncheckedUpdateManyInput>
    /**
     * Filter which migrations to update
     */
    where?: migrationsWhereInput
  }

  /**
   * migrations upsert
   */
  export type migrationsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * The filter to search for the migrations to update in case it exists.
     */
    where: migrationsWhereUniqueInput
    /**
     * In case the migrations found by the `where` argument doesn't exist, create a new migrations with this data.
     */
    create: XOR<migrationsCreateInput, migrationsUncheckedCreateInput>
    /**
     * In case the migrations was found with the provided `where` argument, update it with this data.
     */
    update: XOR<migrationsUpdateInput, migrationsUncheckedUpdateInput>
  }

  /**
   * migrations delete
   */
  export type migrationsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
    /**
     * Filter which migrations to delete.
     */
    where: migrationsWhereUniqueInput
  }

  /**
   * migrations deleteMany
   */
  export type migrationsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which migrations to delete
     */
    where?: migrationsWhereInput
  }

  /**
   * migrations without action
   */
  export type migrationsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the migrations
     */
    select?: migrationsSelect<ExtArgs> | null
  }


  /**
   * Model password_reset_tokens
   */

  export type AggregatePassword_reset_tokens = {
    _count: Password_reset_tokensCountAggregateOutputType | null
    _min: Password_reset_tokensMinAggregateOutputType | null
    _max: Password_reset_tokensMaxAggregateOutputType | null
  }

  export type Password_reset_tokensMinAggregateOutputType = {
    email: string | null
    token: string | null
    created_at: Date | null
  }

  export type Password_reset_tokensMaxAggregateOutputType = {
    email: string | null
    token: string | null
    created_at: Date | null
  }

  export type Password_reset_tokensCountAggregateOutputType = {
    email: number
    token: number
    created_at: number
    _all: number
  }


  export type Password_reset_tokensMinAggregateInputType = {
    email?: true
    token?: true
    created_at?: true
  }

  export type Password_reset_tokensMaxAggregateInputType = {
    email?: true
    token?: true
    created_at?: true
  }

  export type Password_reset_tokensCountAggregateInputType = {
    email?: true
    token?: true
    created_at?: true
    _all?: true
  }

  export type Password_reset_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which password_reset_tokens to aggregate.
     */
    where?: password_reset_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of password_reset_tokens to fetch.
     */
    orderBy?: password_reset_tokensOrderByWithRelationInput | password_reset_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: password_reset_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` password_reset_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` password_reset_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned password_reset_tokens
    **/
    _count?: true | Password_reset_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Password_reset_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Password_reset_tokensMaxAggregateInputType
  }

  export type GetPassword_reset_tokensAggregateType<T extends Password_reset_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregatePassword_reset_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePassword_reset_tokens[P]>
      : GetScalarType<T[P], AggregatePassword_reset_tokens[P]>
  }




  export type password_reset_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: password_reset_tokensWhereInput
    orderBy?: password_reset_tokensOrderByWithAggregationInput | password_reset_tokensOrderByWithAggregationInput[]
    by: Password_reset_tokensScalarFieldEnum[] | Password_reset_tokensScalarFieldEnum
    having?: password_reset_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Password_reset_tokensCountAggregateInputType | true
    _min?: Password_reset_tokensMinAggregateInputType
    _max?: Password_reset_tokensMaxAggregateInputType
  }

  export type Password_reset_tokensGroupByOutputType = {
    email: string
    token: string
    created_at: Date | null
    _count: Password_reset_tokensCountAggregateOutputType | null
    _min: Password_reset_tokensMinAggregateOutputType | null
    _max: Password_reset_tokensMaxAggregateOutputType | null
  }

  type GetPassword_reset_tokensGroupByPayload<T extends password_reset_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Password_reset_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Password_reset_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Password_reset_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Password_reset_tokensGroupByOutputType[P]>
        }
      >
    >


  export type password_reset_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    token?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["password_reset_tokens"]>

  export type password_reset_tokensSelectScalar = {
    email?: boolean
    token?: boolean
    created_at?: boolean
  }



  export type $password_reset_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "password_reset_tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      email: string
      token: string
      created_at: Date | null
    }, ExtArgs["result"]["password_reset_tokens"]>
    composites: {}
  }


  type password_reset_tokensGetPayload<S extends boolean | null | undefined | password_reset_tokensDefaultArgs> = $Result.GetResult<Prisma.$password_reset_tokensPayload, S>

  type password_reset_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<password_reset_tokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Password_reset_tokensCountAggregateInputType | true
    }

  export interface password_reset_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['password_reset_tokens'], meta: { name: 'password_reset_tokens' } }
    /**
     * Find zero or one Password_reset_tokens that matches the filter.
     * @param {password_reset_tokensFindUniqueArgs} args - Arguments to find a Password_reset_tokens
     * @example
     * // Get one Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends password_reset_tokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensFindUniqueArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Password_reset_tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {password_reset_tokensFindUniqueOrThrowArgs} args - Arguments to find a Password_reset_tokens
     * @example
     * // Get one Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends password_reset_tokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Password_reset_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensFindFirstArgs} args - Arguments to find a Password_reset_tokens
     * @example
     * // Get one Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends password_reset_tokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensFindFirstArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Password_reset_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensFindFirstOrThrowArgs} args - Arguments to find a Password_reset_tokens
     * @example
     * // Get one Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends password_reset_tokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Password_reset_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findMany()
     * 
     * // Get first 10 Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const password_reset_tokensWithEmailOnly = await prisma.password_reset_tokens.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends password_reset_tokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Password_reset_tokens.
     * @param {password_reset_tokensCreateArgs} args - Arguments to create a Password_reset_tokens.
     * @example
     * // Create one Password_reset_tokens
     * const Password_reset_tokens = await prisma.password_reset_tokens.create({
     *   data: {
     *     // ... data to create a Password_reset_tokens
     *   }
     * })
     * 
    **/
    create<T extends password_reset_tokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensCreateArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Password_reset_tokens.
     *     @param {password_reset_tokensCreateManyArgs} args - Arguments to create many Password_reset_tokens.
     *     @example
     *     // Create many Password_reset_tokens
     *     const password_reset_tokens = await prisma.password_reset_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends password_reset_tokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Password_reset_tokens.
     * @param {password_reset_tokensDeleteArgs} args - Arguments to delete one Password_reset_tokens.
     * @example
     * // Delete one Password_reset_tokens
     * const Password_reset_tokens = await prisma.password_reset_tokens.delete({
     *   where: {
     *     // ... filter to delete one Password_reset_tokens
     *   }
     * })
     * 
    **/
    delete<T extends password_reset_tokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensDeleteArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Password_reset_tokens.
     * @param {password_reset_tokensUpdateArgs} args - Arguments to update one Password_reset_tokens.
     * @example
     * // Update one Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends password_reset_tokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensUpdateArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Password_reset_tokens.
     * @param {password_reset_tokensDeleteManyArgs} args - Arguments to filter Password_reset_tokens to delete.
     * @example
     * // Delete a few Password_reset_tokens
     * const { count } = await prisma.password_reset_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends password_reset_tokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, password_reset_tokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Password_reset_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends password_reset_tokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Password_reset_tokens.
     * @param {password_reset_tokensUpsertArgs} args - Arguments to update or create a Password_reset_tokens.
     * @example
     * // Update or create a Password_reset_tokens
     * const password_reset_tokens = await prisma.password_reset_tokens.upsert({
     *   create: {
     *     // ... data to create a Password_reset_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Password_reset_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends password_reset_tokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, password_reset_tokensUpsertArgs<ExtArgs>>
    ): Prisma__password_reset_tokensClient<$Result.GetResult<Prisma.$password_reset_tokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Password_reset_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensCountArgs} args - Arguments to filter Password_reset_tokens to count.
     * @example
     * // Count the number of Password_reset_tokens
     * const count = await prisma.password_reset_tokens.count({
     *   where: {
     *     // ... the filter for the Password_reset_tokens we want to count
     *   }
     * })
    **/
    count<T extends password_reset_tokensCountArgs>(
      args?: Subset<T, password_reset_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Password_reset_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Password_reset_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Password_reset_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Password_reset_tokensAggregateArgs>(args: Subset<T, Password_reset_tokensAggregateArgs>): Prisma.PrismaPromise<GetPassword_reset_tokensAggregateType<T>>

    /**
     * Group by Password_reset_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {password_reset_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends password_reset_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: password_reset_tokensGroupByArgs['orderBy'] }
        : { orderBy?: password_reset_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, password_reset_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPassword_reset_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the password_reset_tokens model
   */
  readonly fields: password_reset_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for password_reset_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__password_reset_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the password_reset_tokens model
   */ 
  interface password_reset_tokensFieldRefs {
    readonly email: FieldRef<"password_reset_tokens", 'String'>
    readonly token: FieldRef<"password_reset_tokens", 'String'>
    readonly created_at: FieldRef<"password_reset_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * password_reset_tokens findUnique
   */
  export type password_reset_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter, which password_reset_tokens to fetch.
     */
    where: password_reset_tokensWhereUniqueInput
  }

  /**
   * password_reset_tokens findUniqueOrThrow
   */
  export type password_reset_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter, which password_reset_tokens to fetch.
     */
    where: password_reset_tokensWhereUniqueInput
  }

  /**
   * password_reset_tokens findFirst
   */
  export type password_reset_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter, which password_reset_tokens to fetch.
     */
    where?: password_reset_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of password_reset_tokens to fetch.
     */
    orderBy?: password_reset_tokensOrderByWithRelationInput | password_reset_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for password_reset_tokens.
     */
    cursor?: password_reset_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` password_reset_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` password_reset_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of password_reset_tokens.
     */
    distinct?: Password_reset_tokensScalarFieldEnum | Password_reset_tokensScalarFieldEnum[]
  }

  /**
   * password_reset_tokens findFirstOrThrow
   */
  export type password_reset_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter, which password_reset_tokens to fetch.
     */
    where?: password_reset_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of password_reset_tokens to fetch.
     */
    orderBy?: password_reset_tokensOrderByWithRelationInput | password_reset_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for password_reset_tokens.
     */
    cursor?: password_reset_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` password_reset_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` password_reset_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of password_reset_tokens.
     */
    distinct?: Password_reset_tokensScalarFieldEnum | Password_reset_tokensScalarFieldEnum[]
  }

  /**
   * password_reset_tokens findMany
   */
  export type password_reset_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter, which password_reset_tokens to fetch.
     */
    where?: password_reset_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of password_reset_tokens to fetch.
     */
    orderBy?: password_reset_tokensOrderByWithRelationInput | password_reset_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing password_reset_tokens.
     */
    cursor?: password_reset_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` password_reset_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` password_reset_tokens.
     */
    skip?: number
    distinct?: Password_reset_tokensScalarFieldEnum | Password_reset_tokensScalarFieldEnum[]
  }

  /**
   * password_reset_tokens create
   */
  export type password_reset_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * The data needed to create a password_reset_tokens.
     */
    data: XOR<password_reset_tokensCreateInput, password_reset_tokensUncheckedCreateInput>
  }

  /**
   * password_reset_tokens createMany
   */
  export type password_reset_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many password_reset_tokens.
     */
    data: password_reset_tokensCreateManyInput | password_reset_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * password_reset_tokens update
   */
  export type password_reset_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * The data needed to update a password_reset_tokens.
     */
    data: XOR<password_reset_tokensUpdateInput, password_reset_tokensUncheckedUpdateInput>
    /**
     * Choose, which password_reset_tokens to update.
     */
    where: password_reset_tokensWhereUniqueInput
  }

  /**
   * password_reset_tokens updateMany
   */
  export type password_reset_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update password_reset_tokens.
     */
    data: XOR<password_reset_tokensUpdateManyMutationInput, password_reset_tokensUncheckedUpdateManyInput>
    /**
     * Filter which password_reset_tokens to update
     */
    where?: password_reset_tokensWhereInput
  }

  /**
   * password_reset_tokens upsert
   */
  export type password_reset_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * The filter to search for the password_reset_tokens to update in case it exists.
     */
    where: password_reset_tokensWhereUniqueInput
    /**
     * In case the password_reset_tokens found by the `where` argument doesn't exist, create a new password_reset_tokens with this data.
     */
    create: XOR<password_reset_tokensCreateInput, password_reset_tokensUncheckedCreateInput>
    /**
     * In case the password_reset_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<password_reset_tokensUpdateInput, password_reset_tokensUncheckedUpdateInput>
  }

  /**
   * password_reset_tokens delete
   */
  export type password_reset_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
    /**
     * Filter which password_reset_tokens to delete.
     */
    where: password_reset_tokensWhereUniqueInput
  }

  /**
   * password_reset_tokens deleteMany
   */
  export type password_reset_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which password_reset_tokens to delete
     */
    where?: password_reset_tokensWhereInput
  }

  /**
   * password_reset_tokens without action
   */
  export type password_reset_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the password_reset_tokens
     */
    select?: password_reset_tokensSelect<ExtArgs> | null
  }


  /**
   * Model payment_categories
   */

  export type AggregatePayment_categories = {
    _count: Payment_categoriesCountAggregateOutputType | null
    _avg: Payment_categoriesAvgAggregateOutputType | null
    _sum: Payment_categoriesSumAggregateOutputType | null
    _min: Payment_categoriesMinAggregateOutputType | null
    _max: Payment_categoriesMaxAggregateOutputType | null
  }

  export type Payment_categoriesAvgAggregateOutputType = {
    id: number | null
  }

  export type Payment_categoriesSumAggregateOutputType = {
    id: bigint | null
  }

  export type Payment_categoriesMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    color: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_categoriesMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    color: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_categoriesCountAggregateOutputType = {
    id: number
    name: number
    color: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Payment_categoriesAvgAggregateInputType = {
    id?: true
  }

  export type Payment_categoriesSumAggregateInputType = {
    id?: true
  }

  export type Payment_categoriesMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_categoriesMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_categoriesCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Payment_categoriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_categories to aggregate.
     */
    where?: payment_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_categories to fetch.
     */
    orderBy?: payment_categoriesOrderByWithRelationInput | payment_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_categories
    **/
    _count?: true | Payment_categoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_categoriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_categoriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_categoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_categoriesMaxAggregateInputType
  }

  export type GetPayment_categoriesAggregateType<T extends Payment_categoriesAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_categories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_categories[P]>
      : GetScalarType<T[P], AggregatePayment_categories[P]>
  }




  export type payment_categoriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_categoriesWhereInput
    orderBy?: payment_categoriesOrderByWithAggregationInput | payment_categoriesOrderByWithAggregationInput[]
    by: Payment_categoriesScalarFieldEnum[] | Payment_categoriesScalarFieldEnum
    having?: payment_categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_categoriesCountAggregateInputType | true
    _avg?: Payment_categoriesAvgAggregateInputType
    _sum?: Payment_categoriesSumAggregateInputType
    _min?: Payment_categoriesMinAggregateInputType
    _max?: Payment_categoriesMaxAggregateInputType
  }

  export type Payment_categoriesGroupByOutputType = {
    id: bigint
    name: string
    color: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: Payment_categoriesCountAggregateOutputType | null
    _avg: Payment_categoriesAvgAggregateOutputType | null
    _sum: Payment_categoriesSumAggregateOutputType | null
    _min: Payment_categoriesMinAggregateOutputType | null
    _max: Payment_categoriesMaxAggregateOutputType | null
  }

  type GetPayment_categoriesGroupByPayload<T extends payment_categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_categoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_categoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_categoriesGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_categoriesGroupByOutputType[P]>
        }
      >
    >


  export type payment_categoriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    payment_records?: boolean | payment_categories$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_categories$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_categories"]>

  export type payment_categoriesSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type payment_categoriesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | payment_categories$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_categories$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_categoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $payment_categoriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_categories"
    objects: {
      payment_records: Prisma.$payment_recordsPayload<ExtArgs>[]
      payment_templates: Prisma.$payment_templatesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      color: string
      description: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["payment_categories"]>
    composites: {}
  }


  type payment_categoriesGetPayload<S extends boolean | null | undefined | payment_categoriesDefaultArgs> = $Result.GetResult<Prisma.$payment_categoriesPayload, S>

  type payment_categoriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_categoriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_categoriesCountAggregateInputType | true
    }

  export interface payment_categoriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_categories'], meta: { name: 'payment_categories' } }
    /**
     * Find zero or one Payment_categories that matches the filter.
     * @param {payment_categoriesFindUniqueArgs} args - Arguments to find a Payment_categories
     * @example
     * // Get one Payment_categories
     * const payment_categories = await prisma.payment_categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_categoriesFindUniqueOrThrowArgs} args - Arguments to find a Payment_categories
     * @example
     * // Get one Payment_categories
     * const payment_categories = await prisma.payment_categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesFindFirstArgs} args - Arguments to find a Payment_categories
     * @example
     * // Get one Payment_categories
     * const payment_categories = await prisma.payment_categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesFindFirstOrThrowArgs} args - Arguments to find a Payment_categories
     * @example
     * // Get one Payment_categories
     * const payment_categories = await prisma.payment_categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_categories
     * const payment_categories = await prisma.payment_categories.findMany()
     * 
     * // Get first 10 Payment_categories
     * const payment_categories = await prisma.payment_categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_categoriesWithIdOnly = await prisma.payment_categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_categories.
     * @param {payment_categoriesCreateArgs} args - Arguments to create a Payment_categories.
     * @example
     * // Create one Payment_categories
     * const Payment_categories = await prisma.payment_categories.create({
     *   data: {
     *     // ... data to create a Payment_categories
     *   }
     * })
     * 
    **/
    create<T extends payment_categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesCreateArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_categories.
     *     @param {payment_categoriesCreateManyArgs} args - Arguments to create many Payment_categories.
     *     @example
     *     // Create many Payment_categories
     *     const payment_categories = await prisma.payment_categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_categories.
     * @param {payment_categoriesDeleteArgs} args - Arguments to delete one Payment_categories.
     * @example
     * // Delete one Payment_categories
     * const Payment_categories = await prisma.payment_categories.delete({
     *   where: {
     *     // ... filter to delete one Payment_categories
     *   }
     * })
     * 
    **/
    delete<T extends payment_categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesDeleteArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_categories.
     * @param {payment_categoriesUpdateArgs} args - Arguments to update one Payment_categories.
     * @example
     * // Update one Payment_categories
     * const payment_categories = await prisma.payment_categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesUpdateArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_categories.
     * @param {payment_categoriesDeleteManyArgs} args - Arguments to filter Payment_categories to delete.
     * @example
     * // Delete a few Payment_categories
     * const { count } = await prisma.payment_categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_categories
     * const payment_categories = await prisma.payment_categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_categories.
     * @param {payment_categoriesUpsertArgs} args - Arguments to update or create a Payment_categories.
     * @example
     * // Update or create a Payment_categories
     * const payment_categories = await prisma.payment_categories.upsert({
     *   create: {
     *     // ... data to create a Payment_categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_categories we want to update
     *   }
     * })
    **/
    upsert<T extends payment_categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_categoriesUpsertArgs<ExtArgs>>
    ): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesCountArgs} args - Arguments to filter Payment_categories to count.
     * @example
     * // Count the number of Payment_categories
     * const count = await prisma.payment_categories.count({
     *   where: {
     *     // ... the filter for the Payment_categories we want to count
     *   }
     * })
    **/
    count<T extends payment_categoriesCountArgs>(
      args?: Subset<T, payment_categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_categoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_categoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_categoriesAggregateArgs>(args: Subset<T, Payment_categoriesAggregateArgs>): Prisma.PrismaPromise<GetPayment_categoriesAggregateType<T>>

    /**
     * Group by Payment_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_categoriesGroupByArgs['orderBy'] }
        : { orderBy?: payment_categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_categoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_categories model
   */
  readonly fields: payment_categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_categoriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_records<T extends payment_categories$payment_recordsArgs<ExtArgs> = {}>(args?: Subset<T, payment_categories$payment_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findMany'> | Null>;

    payment_templates<T extends payment_categories$payment_templatesArgs<ExtArgs> = {}>(args?: Subset<T, payment_categories$payment_templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_categories model
   */ 
  interface payment_categoriesFieldRefs {
    readonly id: FieldRef<"payment_categories", 'BigInt'>
    readonly name: FieldRef<"payment_categories", 'String'>
    readonly color: FieldRef<"payment_categories", 'String'>
    readonly description: FieldRef<"payment_categories", 'String'>
    readonly created_at: FieldRef<"payment_categories", 'DateTime'>
    readonly updated_at: FieldRef<"payment_categories", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment_categories findUnique
   */
  export type payment_categoriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which payment_categories to fetch.
     */
    where: payment_categoriesWhereUniqueInput
  }

  /**
   * payment_categories findUniqueOrThrow
   */
  export type payment_categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which payment_categories to fetch.
     */
    where: payment_categoriesWhereUniqueInput
  }

  /**
   * payment_categories findFirst
   */
  export type payment_categoriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which payment_categories to fetch.
     */
    where?: payment_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_categories to fetch.
     */
    orderBy?: payment_categoriesOrderByWithRelationInput | payment_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_categories.
     */
    cursor?: payment_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_categories.
     */
    distinct?: Payment_categoriesScalarFieldEnum | Payment_categoriesScalarFieldEnum[]
  }

  /**
   * payment_categories findFirstOrThrow
   */
  export type payment_categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which payment_categories to fetch.
     */
    where?: payment_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_categories to fetch.
     */
    orderBy?: payment_categoriesOrderByWithRelationInput | payment_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_categories.
     */
    cursor?: payment_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_categories.
     */
    distinct?: Payment_categoriesScalarFieldEnum | Payment_categoriesScalarFieldEnum[]
  }

  /**
   * payment_categories findMany
   */
  export type payment_categoriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter, which payment_categories to fetch.
     */
    where?: payment_categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_categories to fetch.
     */
    orderBy?: payment_categoriesOrderByWithRelationInput | payment_categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_categories.
     */
    cursor?: payment_categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_categories.
     */
    skip?: number
    distinct?: Payment_categoriesScalarFieldEnum | Payment_categoriesScalarFieldEnum[]
  }

  /**
   * payment_categories create
   */
  export type payment_categoriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_categories.
     */
    data: XOR<payment_categoriesCreateInput, payment_categoriesUncheckedCreateInput>
  }

  /**
   * payment_categories createMany
   */
  export type payment_categoriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_categories.
     */
    data: payment_categoriesCreateManyInput | payment_categoriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_categories update
   */
  export type payment_categoriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_categories.
     */
    data: XOR<payment_categoriesUpdateInput, payment_categoriesUncheckedUpdateInput>
    /**
     * Choose, which payment_categories to update.
     */
    where: payment_categoriesWhereUniqueInput
  }

  /**
   * payment_categories updateMany
   */
  export type payment_categoriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_categories.
     */
    data: XOR<payment_categoriesUpdateManyMutationInput, payment_categoriesUncheckedUpdateManyInput>
    /**
     * Filter which payment_categories to update
     */
    where?: payment_categoriesWhereInput
  }

  /**
   * payment_categories upsert
   */
  export type payment_categoriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_categories to update in case it exists.
     */
    where: payment_categoriesWhereUniqueInput
    /**
     * In case the payment_categories found by the `where` argument doesn't exist, create a new payment_categories with this data.
     */
    create: XOR<payment_categoriesCreateInput, payment_categoriesUncheckedCreateInput>
    /**
     * In case the payment_categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_categoriesUpdateInput, payment_categoriesUncheckedUpdateInput>
  }

  /**
   * payment_categories delete
   */
  export type payment_categoriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
    /**
     * Filter which payment_categories to delete.
     */
    where: payment_categoriesWhereUniqueInput
  }

  /**
   * payment_categories deleteMany
   */
  export type payment_categoriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_categories to delete
     */
    where?: payment_categoriesWhereInput
  }

  /**
   * payment_categories.payment_records
   */
  export type payment_categories$payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    where?: payment_recordsWhereInput
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    cursor?: payment_recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_categories.payment_templates
   */
  export type payment_categories$payment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    where?: payment_templatesWhereInput
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    cursor?: payment_templatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_categories without action
   */
  export type payment_categoriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_categories
     */
    select?: payment_categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_categoriesInclude<ExtArgs> | null
  }


  /**
   * Model payment_frequencies
   */

  export type AggregatePayment_frequencies = {
    _count: Payment_frequenciesCountAggregateOutputType | null
    _avg: Payment_frequenciesAvgAggregateOutputType | null
    _sum: Payment_frequenciesSumAggregateOutputType | null
    _min: Payment_frequenciesMinAggregateOutputType | null
    _max: Payment_frequenciesMaxAggregateOutputType | null
  }

  export type Payment_frequenciesAvgAggregateOutputType = {
    id: number | null
  }

  export type Payment_frequenciesSumAggregateOutputType = {
    id: bigint | null
  }

  export type Payment_frequenciesMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    color: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_frequenciesMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    color: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_frequenciesCountAggregateOutputType = {
    id: number
    name: number
    color: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Payment_frequenciesAvgAggregateInputType = {
    id?: true
  }

  export type Payment_frequenciesSumAggregateInputType = {
    id?: true
  }

  export type Payment_frequenciesMinAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_frequenciesMaxAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_frequenciesCountAggregateInputType = {
    id?: true
    name?: true
    color?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Payment_frequenciesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_frequencies to aggregate.
     */
    where?: payment_frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_frequencies to fetch.
     */
    orderBy?: payment_frequenciesOrderByWithRelationInput | payment_frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_frequencies
    **/
    _count?: true | Payment_frequenciesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_frequenciesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_frequenciesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_frequenciesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_frequenciesMaxAggregateInputType
  }

  export type GetPayment_frequenciesAggregateType<T extends Payment_frequenciesAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_frequencies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_frequencies[P]>
      : GetScalarType<T[P], AggregatePayment_frequencies[P]>
  }




  export type payment_frequenciesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_frequenciesWhereInput
    orderBy?: payment_frequenciesOrderByWithAggregationInput | payment_frequenciesOrderByWithAggregationInput[]
    by: Payment_frequenciesScalarFieldEnum[] | Payment_frequenciesScalarFieldEnum
    having?: payment_frequenciesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_frequenciesCountAggregateInputType | true
    _avg?: Payment_frequenciesAvgAggregateInputType
    _sum?: Payment_frequenciesSumAggregateInputType
    _min?: Payment_frequenciesMinAggregateInputType
    _max?: Payment_frequenciesMaxAggregateInputType
  }

  export type Payment_frequenciesGroupByOutputType = {
    id: bigint
    name: string
    color: string
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: Payment_frequenciesCountAggregateOutputType | null
    _avg: Payment_frequenciesAvgAggregateOutputType | null
    _sum: Payment_frequenciesSumAggregateOutputType | null
    _min: Payment_frequenciesMinAggregateOutputType | null
    _max: Payment_frequenciesMaxAggregateOutputType | null
  }

  type GetPayment_frequenciesGroupByPayload<T extends payment_frequenciesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_frequenciesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_frequenciesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_frequenciesGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_frequenciesGroupByOutputType[P]>
        }
      >
    >


  export type payment_frequenciesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    color?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    payment_records?: boolean | payment_frequencies$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_frequencies$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_frequenciesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_frequencies"]>

  export type payment_frequenciesSelectScalar = {
    id?: boolean
    name?: boolean
    color?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type payment_frequenciesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | payment_frequencies$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_frequencies$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_frequenciesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $payment_frequenciesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_frequencies"
    objects: {
      payment_records: Prisma.$payment_recordsPayload<ExtArgs>[]
      payment_templates: Prisma.$payment_templatesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      color: string
      description: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["payment_frequencies"]>
    composites: {}
  }


  type payment_frequenciesGetPayload<S extends boolean | null | undefined | payment_frequenciesDefaultArgs> = $Result.GetResult<Prisma.$payment_frequenciesPayload, S>

  type payment_frequenciesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_frequenciesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_frequenciesCountAggregateInputType | true
    }

  export interface payment_frequenciesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_frequencies'], meta: { name: 'payment_frequencies' } }
    /**
     * Find zero or one Payment_frequencies that matches the filter.
     * @param {payment_frequenciesFindUniqueArgs} args - Arguments to find a Payment_frequencies
     * @example
     * // Get one Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_frequenciesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_frequencies that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_frequenciesFindUniqueOrThrowArgs} args - Arguments to find a Payment_frequencies
     * @example
     * // Get one Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_frequenciesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_frequencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesFindFirstArgs} args - Arguments to find a Payment_frequencies
     * @example
     * // Get one Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_frequenciesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesFindFirstArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_frequencies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesFindFirstOrThrowArgs} args - Arguments to find a Payment_frequencies
     * @example
     * // Get one Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_frequenciesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_frequencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findMany()
     * 
     * // Get first 10 Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_frequenciesWithIdOnly = await prisma.payment_frequencies.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_frequenciesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_frequencies.
     * @param {payment_frequenciesCreateArgs} args - Arguments to create a Payment_frequencies.
     * @example
     * // Create one Payment_frequencies
     * const Payment_frequencies = await prisma.payment_frequencies.create({
     *   data: {
     *     // ... data to create a Payment_frequencies
     *   }
     * })
     * 
    **/
    create<T extends payment_frequenciesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesCreateArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_frequencies.
     *     @param {payment_frequenciesCreateManyArgs} args - Arguments to create many Payment_frequencies.
     *     @example
     *     // Create many Payment_frequencies
     *     const payment_frequencies = await prisma.payment_frequencies.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_frequenciesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_frequencies.
     * @param {payment_frequenciesDeleteArgs} args - Arguments to delete one Payment_frequencies.
     * @example
     * // Delete one Payment_frequencies
     * const Payment_frequencies = await prisma.payment_frequencies.delete({
     *   where: {
     *     // ... filter to delete one Payment_frequencies
     *   }
     * })
     * 
    **/
    delete<T extends payment_frequenciesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesDeleteArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_frequencies.
     * @param {payment_frequenciesUpdateArgs} args - Arguments to update one Payment_frequencies.
     * @example
     * // Update one Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_frequenciesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesUpdateArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_frequencies.
     * @param {payment_frequenciesDeleteManyArgs} args - Arguments to filter Payment_frequencies to delete.
     * @example
     * // Delete a few Payment_frequencies
     * const { count } = await prisma.payment_frequencies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_frequenciesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_frequenciesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_frequenciesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_frequencies.
     * @param {payment_frequenciesUpsertArgs} args - Arguments to update or create a Payment_frequencies.
     * @example
     * // Update or create a Payment_frequencies
     * const payment_frequencies = await prisma.payment_frequencies.upsert({
     *   create: {
     *     // ... data to create a Payment_frequencies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_frequencies we want to update
     *   }
     * })
    **/
    upsert<T extends payment_frequenciesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_frequenciesUpsertArgs<ExtArgs>>
    ): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesCountArgs} args - Arguments to filter Payment_frequencies to count.
     * @example
     * // Count the number of Payment_frequencies
     * const count = await prisma.payment_frequencies.count({
     *   where: {
     *     // ... the filter for the Payment_frequencies we want to count
     *   }
     * })
    **/
    count<T extends payment_frequenciesCountArgs>(
      args?: Subset<T, payment_frequenciesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_frequenciesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_frequenciesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_frequenciesAggregateArgs>(args: Subset<T, Payment_frequenciesAggregateArgs>): Prisma.PrismaPromise<GetPayment_frequenciesAggregateType<T>>

    /**
     * Group by Payment_frequencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_frequenciesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_frequenciesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_frequenciesGroupByArgs['orderBy'] }
        : { orderBy?: payment_frequenciesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_frequenciesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_frequenciesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_frequencies model
   */
  readonly fields: payment_frequenciesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_frequencies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_frequenciesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_records<T extends payment_frequencies$payment_recordsArgs<ExtArgs> = {}>(args?: Subset<T, payment_frequencies$payment_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findMany'> | Null>;

    payment_templates<T extends payment_frequencies$payment_templatesArgs<ExtArgs> = {}>(args?: Subset<T, payment_frequencies$payment_templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_frequencies model
   */ 
  interface payment_frequenciesFieldRefs {
    readonly id: FieldRef<"payment_frequencies", 'BigInt'>
    readonly name: FieldRef<"payment_frequencies", 'String'>
    readonly color: FieldRef<"payment_frequencies", 'String'>
    readonly description: FieldRef<"payment_frequencies", 'String'>
    readonly created_at: FieldRef<"payment_frequencies", 'DateTime'>
    readonly updated_at: FieldRef<"payment_frequencies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment_frequencies findUnique
   */
  export type payment_frequenciesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which payment_frequencies to fetch.
     */
    where: payment_frequenciesWhereUniqueInput
  }

  /**
   * payment_frequencies findUniqueOrThrow
   */
  export type payment_frequenciesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which payment_frequencies to fetch.
     */
    where: payment_frequenciesWhereUniqueInput
  }

  /**
   * payment_frequencies findFirst
   */
  export type payment_frequenciesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which payment_frequencies to fetch.
     */
    where?: payment_frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_frequencies to fetch.
     */
    orderBy?: payment_frequenciesOrderByWithRelationInput | payment_frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_frequencies.
     */
    cursor?: payment_frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_frequencies.
     */
    distinct?: Payment_frequenciesScalarFieldEnum | Payment_frequenciesScalarFieldEnum[]
  }

  /**
   * payment_frequencies findFirstOrThrow
   */
  export type payment_frequenciesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which payment_frequencies to fetch.
     */
    where?: payment_frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_frequencies to fetch.
     */
    orderBy?: payment_frequenciesOrderByWithRelationInput | payment_frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_frequencies.
     */
    cursor?: payment_frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_frequencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_frequencies.
     */
    distinct?: Payment_frequenciesScalarFieldEnum | Payment_frequenciesScalarFieldEnum[]
  }

  /**
   * payment_frequencies findMany
   */
  export type payment_frequenciesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter, which payment_frequencies to fetch.
     */
    where?: payment_frequenciesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_frequencies to fetch.
     */
    orderBy?: payment_frequenciesOrderByWithRelationInput | payment_frequenciesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_frequencies.
     */
    cursor?: payment_frequenciesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_frequencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_frequencies.
     */
    skip?: number
    distinct?: Payment_frequenciesScalarFieldEnum | Payment_frequenciesScalarFieldEnum[]
  }

  /**
   * payment_frequencies create
   */
  export type payment_frequenciesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_frequencies.
     */
    data: XOR<payment_frequenciesCreateInput, payment_frequenciesUncheckedCreateInput>
  }

  /**
   * payment_frequencies createMany
   */
  export type payment_frequenciesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_frequencies.
     */
    data: payment_frequenciesCreateManyInput | payment_frequenciesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_frequencies update
   */
  export type payment_frequenciesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_frequencies.
     */
    data: XOR<payment_frequenciesUpdateInput, payment_frequenciesUncheckedUpdateInput>
    /**
     * Choose, which payment_frequencies to update.
     */
    where: payment_frequenciesWhereUniqueInput
  }

  /**
   * payment_frequencies updateMany
   */
  export type payment_frequenciesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_frequencies.
     */
    data: XOR<payment_frequenciesUpdateManyMutationInput, payment_frequenciesUncheckedUpdateManyInput>
    /**
     * Filter which payment_frequencies to update
     */
    where?: payment_frequenciesWhereInput
  }

  /**
   * payment_frequencies upsert
   */
  export type payment_frequenciesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_frequencies to update in case it exists.
     */
    where: payment_frequenciesWhereUniqueInput
    /**
     * In case the payment_frequencies found by the `where` argument doesn't exist, create a new payment_frequencies with this data.
     */
    create: XOR<payment_frequenciesCreateInput, payment_frequenciesUncheckedCreateInput>
    /**
     * In case the payment_frequencies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_frequenciesUpdateInput, payment_frequenciesUncheckedUpdateInput>
  }

  /**
   * payment_frequencies delete
   */
  export type payment_frequenciesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
    /**
     * Filter which payment_frequencies to delete.
     */
    where: payment_frequenciesWhereUniqueInput
  }

  /**
   * payment_frequencies deleteMany
   */
  export type payment_frequenciesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_frequencies to delete
     */
    where?: payment_frequenciesWhereInput
  }

  /**
   * payment_frequencies.payment_records
   */
  export type payment_frequencies$payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    where?: payment_recordsWhereInput
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    cursor?: payment_recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_frequencies.payment_templates
   */
  export type payment_frequencies$payment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    where?: payment_templatesWhereInput
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    cursor?: payment_templatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_frequencies without action
   */
  export type payment_frequenciesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_frequencies
     */
    select?: payment_frequenciesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_frequenciesInclude<ExtArgs> | null
  }


  /**
   * Model payment_periods
   */

  export type AggregatePayment_periods = {
    _count: Payment_periodsCountAggregateOutputType | null
    _avg: Payment_periodsAvgAggregateOutputType | null
    _sum: Payment_periodsSumAggregateOutputType | null
    _min: Payment_periodsMinAggregateOutputType | null
    _max: Payment_periodsMaxAggregateOutputType | null
  }

  export type Payment_periodsAvgAggregateOutputType = {
    id: number | null
    year: number | null
  }

  export type Payment_periodsSumAggregateOutputType = {
    id: bigint | null
    year: number | null
  }

  export type Payment_periodsMinAggregateOutputType = {
    id: bigint | null
    start_date: Date | null
    end_date: Date | null
    month: string | null
    year: number | null
    active: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_periodsMaxAggregateOutputType = {
    id: bigint | null
    start_date: Date | null
    end_date: Date | null
    month: string | null
    year: number | null
    active: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_periodsCountAggregateOutputType = {
    id: number
    start_date: number
    end_date: number
    month: number
    year: number
    active: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Payment_periodsAvgAggregateInputType = {
    id?: true
    year?: true
  }

  export type Payment_periodsSumAggregateInputType = {
    id?: true
    year?: true
  }

  export type Payment_periodsMinAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    month?: true
    year?: true
    active?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_periodsMaxAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    month?: true
    year?: true
    active?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_periodsCountAggregateInputType = {
    id?: true
    start_date?: true
    end_date?: true
    month?: true
    year?: true
    active?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Payment_periodsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_periods to aggregate.
     */
    where?: payment_periodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_periods to fetch.
     */
    orderBy?: payment_periodsOrderByWithRelationInput | payment_periodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_periodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_periods
    **/
    _count?: true | Payment_periodsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_periodsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_periodsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_periodsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_periodsMaxAggregateInputType
  }

  export type GetPayment_periodsAggregateType<T extends Payment_periodsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_periods]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_periods[P]>
      : GetScalarType<T[P], AggregatePayment_periods[P]>
  }




  export type payment_periodsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_periodsWhereInput
    orderBy?: payment_periodsOrderByWithAggregationInput | payment_periodsOrderByWithAggregationInput[]
    by: Payment_periodsScalarFieldEnum[] | Payment_periodsScalarFieldEnum
    having?: payment_periodsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_periodsCountAggregateInputType | true
    _avg?: Payment_periodsAvgAggregateInputType
    _sum?: Payment_periodsSumAggregateInputType
    _min?: Payment_periodsMinAggregateInputType
    _max?: Payment_periodsMaxAggregateInputType
  }

  export type Payment_periodsGroupByOutputType = {
    id: bigint
    start_date: Date
    end_date: Date
    month: string
    year: number
    active: boolean
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: Payment_periodsCountAggregateOutputType | null
    _avg: Payment_periodsAvgAggregateOutputType | null
    _sum: Payment_periodsSumAggregateOutputType | null
    _min: Payment_periodsMinAggregateOutputType | null
    _max: Payment_periodsMaxAggregateOutputType | null
  }

  type GetPayment_periodsGroupByPayload<T extends payment_periodsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_periodsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_periodsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_periodsGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_periodsGroupByOutputType[P]>
        }
      >
    >


  export type payment_periodsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    start_date?: boolean
    end_date?: boolean
    month?: boolean
    year?: boolean
    active?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    payment_records?: boolean | payment_periods$payment_recordsArgs<ExtArgs>
    _count?: boolean | Payment_periodsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_periods"]>

  export type payment_periodsSelectScalar = {
    id?: boolean
    start_date?: boolean
    end_date?: boolean
    month?: boolean
    year?: boolean
    active?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type payment_periodsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | payment_periods$payment_recordsArgs<ExtArgs>
    _count?: boolean | Payment_periodsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $payment_periodsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_periods"
    objects: {
      payment_records: Prisma.$payment_recordsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      start_date: Date
      end_date: Date
      month: string
      year: number
      active: boolean
      description: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["payment_periods"]>
    composites: {}
  }


  type payment_periodsGetPayload<S extends boolean | null | undefined | payment_periodsDefaultArgs> = $Result.GetResult<Prisma.$payment_periodsPayload, S>

  type payment_periodsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_periodsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_periodsCountAggregateInputType | true
    }

  export interface payment_periodsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_periods'], meta: { name: 'payment_periods' } }
    /**
     * Find zero or one Payment_periods that matches the filter.
     * @param {payment_periodsFindUniqueArgs} args - Arguments to find a Payment_periods
     * @example
     * // Get one Payment_periods
     * const payment_periods = await prisma.payment_periods.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_periodsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_periods that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_periodsFindUniqueOrThrowArgs} args - Arguments to find a Payment_periods
     * @example
     * // Get one Payment_periods
     * const payment_periods = await prisma.payment_periods.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_periodsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsFindFirstArgs} args - Arguments to find a Payment_periods
     * @example
     * // Get one Payment_periods
     * const payment_periods = await prisma.payment_periods.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_periodsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsFindFirstArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_periods that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsFindFirstOrThrowArgs} args - Arguments to find a Payment_periods
     * @example
     * // Get one Payment_periods
     * const payment_periods = await prisma.payment_periods.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_periodsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_periods that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_periods
     * const payment_periods = await prisma.payment_periods.findMany()
     * 
     * // Get first 10 Payment_periods
     * const payment_periods = await prisma.payment_periods.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_periodsWithIdOnly = await prisma.payment_periods.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_periodsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_periods.
     * @param {payment_periodsCreateArgs} args - Arguments to create a Payment_periods.
     * @example
     * // Create one Payment_periods
     * const Payment_periods = await prisma.payment_periods.create({
     *   data: {
     *     // ... data to create a Payment_periods
     *   }
     * })
     * 
    **/
    create<T extends payment_periodsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsCreateArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_periods.
     *     @param {payment_periodsCreateManyArgs} args - Arguments to create many Payment_periods.
     *     @example
     *     // Create many Payment_periods
     *     const payment_periods = await prisma.payment_periods.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_periodsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_periods.
     * @param {payment_periodsDeleteArgs} args - Arguments to delete one Payment_periods.
     * @example
     * // Delete one Payment_periods
     * const Payment_periods = await prisma.payment_periods.delete({
     *   where: {
     *     // ... filter to delete one Payment_periods
     *   }
     * })
     * 
    **/
    delete<T extends payment_periodsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsDeleteArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_periods.
     * @param {payment_periodsUpdateArgs} args - Arguments to update one Payment_periods.
     * @example
     * // Update one Payment_periods
     * const payment_periods = await prisma.payment_periods.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_periodsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsUpdateArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_periods.
     * @param {payment_periodsDeleteManyArgs} args - Arguments to filter Payment_periods to delete.
     * @example
     * // Delete a few Payment_periods
     * const { count } = await prisma.payment_periods.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_periodsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_periodsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_periods
     * const payment_periods = await prisma.payment_periods.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_periodsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_periods.
     * @param {payment_periodsUpsertArgs} args - Arguments to update or create a Payment_periods.
     * @example
     * // Update or create a Payment_periods
     * const payment_periods = await prisma.payment_periods.upsert({
     *   create: {
     *     // ... data to create a Payment_periods
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_periods we want to update
     *   }
     * })
    **/
    upsert<T extends payment_periodsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_periodsUpsertArgs<ExtArgs>>
    ): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsCountArgs} args - Arguments to filter Payment_periods to count.
     * @example
     * // Count the number of Payment_periods
     * const count = await prisma.payment_periods.count({
     *   where: {
     *     // ... the filter for the Payment_periods we want to count
     *   }
     * })
    **/
    count<T extends payment_periodsCountArgs>(
      args?: Subset<T, payment_periodsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_periodsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_periodsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_periodsAggregateArgs>(args: Subset<T, Payment_periodsAggregateArgs>): Prisma.PrismaPromise<GetPayment_periodsAggregateType<T>>

    /**
     * Group by Payment_periods.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_periodsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_periodsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_periodsGroupByArgs['orderBy'] }
        : { orderBy?: payment_periodsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_periodsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_periodsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_periods model
   */
  readonly fields: payment_periodsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_periods.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_periodsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_records<T extends payment_periods$payment_recordsArgs<ExtArgs> = {}>(args?: Subset<T, payment_periods$payment_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_periods model
   */ 
  interface payment_periodsFieldRefs {
    readonly id: FieldRef<"payment_periods", 'BigInt'>
    readonly start_date: FieldRef<"payment_periods", 'DateTime'>
    readonly end_date: FieldRef<"payment_periods", 'DateTime'>
    readonly month: FieldRef<"payment_periods", 'String'>
    readonly year: FieldRef<"payment_periods", 'Int'>
    readonly active: FieldRef<"payment_periods", 'Boolean'>
    readonly description: FieldRef<"payment_periods", 'String'>
    readonly created_at: FieldRef<"payment_periods", 'DateTime'>
    readonly updated_at: FieldRef<"payment_periods", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment_periods findUnique
   */
  export type payment_periodsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter, which payment_periods to fetch.
     */
    where: payment_periodsWhereUniqueInput
  }

  /**
   * payment_periods findUniqueOrThrow
   */
  export type payment_periodsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter, which payment_periods to fetch.
     */
    where: payment_periodsWhereUniqueInput
  }

  /**
   * payment_periods findFirst
   */
  export type payment_periodsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter, which payment_periods to fetch.
     */
    where?: payment_periodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_periods to fetch.
     */
    orderBy?: payment_periodsOrderByWithRelationInput | payment_periodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_periods.
     */
    cursor?: payment_periodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_periods.
     */
    distinct?: Payment_periodsScalarFieldEnum | Payment_periodsScalarFieldEnum[]
  }

  /**
   * payment_periods findFirstOrThrow
   */
  export type payment_periodsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter, which payment_periods to fetch.
     */
    where?: payment_periodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_periods to fetch.
     */
    orderBy?: payment_periodsOrderByWithRelationInput | payment_periodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_periods.
     */
    cursor?: payment_periodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_periods.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_periods.
     */
    distinct?: Payment_periodsScalarFieldEnum | Payment_periodsScalarFieldEnum[]
  }

  /**
   * payment_periods findMany
   */
  export type payment_periodsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter, which payment_periods to fetch.
     */
    where?: payment_periodsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_periods to fetch.
     */
    orderBy?: payment_periodsOrderByWithRelationInput | payment_periodsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_periods.
     */
    cursor?: payment_periodsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_periods from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_periods.
     */
    skip?: number
    distinct?: Payment_periodsScalarFieldEnum | Payment_periodsScalarFieldEnum[]
  }

  /**
   * payment_periods create
   */
  export type payment_periodsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_periods.
     */
    data: XOR<payment_periodsCreateInput, payment_periodsUncheckedCreateInput>
  }

  /**
   * payment_periods createMany
   */
  export type payment_periodsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_periods.
     */
    data: payment_periodsCreateManyInput | payment_periodsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_periods update
   */
  export type payment_periodsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_periods.
     */
    data: XOR<payment_periodsUpdateInput, payment_periodsUncheckedUpdateInput>
    /**
     * Choose, which payment_periods to update.
     */
    where: payment_periodsWhereUniqueInput
  }

  /**
   * payment_periods updateMany
   */
  export type payment_periodsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_periods.
     */
    data: XOR<payment_periodsUpdateManyMutationInput, payment_periodsUncheckedUpdateManyInput>
    /**
     * Filter which payment_periods to update
     */
    where?: payment_periodsWhereInput
  }

  /**
   * payment_periods upsert
   */
  export type payment_periodsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_periods to update in case it exists.
     */
    where: payment_periodsWhereUniqueInput
    /**
     * In case the payment_periods found by the `where` argument doesn't exist, create a new payment_periods with this data.
     */
    create: XOR<payment_periodsCreateInput, payment_periodsUncheckedCreateInput>
    /**
     * In case the payment_periods was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_periodsUpdateInput, payment_periodsUncheckedUpdateInput>
  }

  /**
   * payment_periods delete
   */
  export type payment_periodsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
    /**
     * Filter which payment_periods to delete.
     */
    where: payment_periodsWhereUniqueInput
  }

  /**
   * payment_periods deleteMany
   */
  export type payment_periodsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_periods to delete
     */
    where?: payment_periodsWhereInput
  }

  /**
   * payment_periods.payment_records
   */
  export type payment_periods$payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    where?: payment_recordsWhereInput
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    cursor?: payment_recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_periods without action
   */
  export type payment_periodsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_periods
     */
    select?: payment_periodsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_periodsInclude<ExtArgs> | null
  }


  /**
   * Model payment_platforms
   */

  export type AggregatePayment_platforms = {
    _count: Payment_platformsCountAggregateOutputType | null
    _avg: Payment_platformsAvgAggregateOutputType | null
    _sum: Payment_platformsSumAggregateOutputType | null
    _min: Payment_platformsMinAggregateOutputType | null
    _max: Payment_platformsMaxAggregateOutputType | null
  }

  export type Payment_platformsAvgAggregateOutputType = {
    id: number | null
  }

  export type Payment_platformsSumAggregateOutputType = {
    id: bigint | null
  }

  export type Payment_platformsMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    description: string | null
    image_url: string | null
    color: string | null
    abbreviation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_platformsMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    description: string | null
    image_url: string | null
    color: string | null
    abbreviation: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_platformsCountAggregateOutputType = {
    id: number
    name: number
    description: number
    image_url: number
    color: number
    abbreviation: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Payment_platformsAvgAggregateInputType = {
    id?: true
  }

  export type Payment_platformsSumAggregateInputType = {
    id?: true
  }

  export type Payment_platformsMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image_url?: true
    color?: true
    abbreviation?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_platformsMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image_url?: true
    color?: true
    abbreviation?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_platformsCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    image_url?: true
    color?: true
    abbreviation?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Payment_platformsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_platforms to aggregate.
     */
    where?: payment_platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_platforms to fetch.
     */
    orderBy?: payment_platformsOrderByWithRelationInput | payment_platformsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_platforms
    **/
    _count?: true | Payment_platformsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_platformsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_platformsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_platformsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_platformsMaxAggregateInputType
  }

  export type GetPayment_platformsAggregateType<T extends Payment_platformsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_platforms]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_platforms[P]>
      : GetScalarType<T[P], AggregatePayment_platforms[P]>
  }




  export type payment_platformsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_platformsWhereInput
    orderBy?: payment_platformsOrderByWithAggregationInput | payment_platformsOrderByWithAggregationInput[]
    by: Payment_platformsScalarFieldEnum[] | Payment_platformsScalarFieldEnum
    having?: payment_platformsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_platformsCountAggregateInputType | true
    _avg?: Payment_platformsAvgAggregateInputType
    _sum?: Payment_platformsSumAggregateInputType
    _min?: Payment_platformsMinAggregateInputType
    _max?: Payment_platformsMaxAggregateInputType
  }

  export type Payment_platformsGroupByOutputType = {
    id: bigint
    name: string
    description: string | null
    image_url: string | null
    color: string
    abbreviation: string
    created_at: Date | null
    updated_at: Date | null
    _count: Payment_platformsCountAggregateOutputType | null
    _avg: Payment_platformsAvgAggregateOutputType | null
    _sum: Payment_platformsSumAggregateOutputType | null
    _min: Payment_platformsMinAggregateOutputType | null
    _max: Payment_platformsMaxAggregateOutputType | null
  }

  type GetPayment_platformsGroupByPayload<T extends payment_platformsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_platformsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_platformsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_platformsGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_platformsGroupByOutputType[P]>
        }
      >
    >


  export type payment_platformsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    image_url?: boolean
    color?: boolean
    abbreviation?: boolean
    created_at?: boolean
    updated_at?: boolean
    payment_records?: boolean | payment_platforms$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_platforms$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_platformsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_platforms"]>

  export type payment_platformsSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    image_url?: boolean
    color?: boolean
    abbreviation?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type payment_platformsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_records?: boolean | payment_platforms$payment_recordsArgs<ExtArgs>
    payment_templates?: boolean | payment_platforms$payment_templatesArgs<ExtArgs>
    _count?: boolean | Payment_platformsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $payment_platformsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_platforms"
    objects: {
      payment_records: Prisma.$payment_recordsPayload<ExtArgs>[]
      payment_templates: Prisma.$payment_templatesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      description: string | null
      image_url: string | null
      color: string
      abbreviation: string
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["payment_platforms"]>
    composites: {}
  }


  type payment_platformsGetPayload<S extends boolean | null | undefined | payment_platformsDefaultArgs> = $Result.GetResult<Prisma.$payment_platformsPayload, S>

  type payment_platformsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_platformsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_platformsCountAggregateInputType | true
    }

  export interface payment_platformsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_platforms'], meta: { name: 'payment_platforms' } }
    /**
     * Find zero or one Payment_platforms that matches the filter.
     * @param {payment_platformsFindUniqueArgs} args - Arguments to find a Payment_platforms
     * @example
     * // Get one Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_platformsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_platforms that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_platformsFindUniqueOrThrowArgs} args - Arguments to find a Payment_platforms
     * @example
     * // Get one Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_platformsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsFindFirstArgs} args - Arguments to find a Payment_platforms
     * @example
     * // Get one Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_platformsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsFindFirstArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_platforms that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsFindFirstOrThrowArgs} args - Arguments to find a Payment_platforms
     * @example
     * // Get one Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_platformsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findMany()
     * 
     * // Get first 10 Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_platformsWithIdOnly = await prisma.payment_platforms.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_platformsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_platforms.
     * @param {payment_platformsCreateArgs} args - Arguments to create a Payment_platforms.
     * @example
     * // Create one Payment_platforms
     * const Payment_platforms = await prisma.payment_platforms.create({
     *   data: {
     *     // ... data to create a Payment_platforms
     *   }
     * })
     * 
    **/
    create<T extends payment_platformsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsCreateArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_platforms.
     *     @param {payment_platformsCreateManyArgs} args - Arguments to create many Payment_platforms.
     *     @example
     *     // Create many Payment_platforms
     *     const payment_platforms = await prisma.payment_platforms.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_platformsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_platforms.
     * @param {payment_platformsDeleteArgs} args - Arguments to delete one Payment_platforms.
     * @example
     * // Delete one Payment_platforms
     * const Payment_platforms = await prisma.payment_platforms.delete({
     *   where: {
     *     // ... filter to delete one Payment_platforms
     *   }
     * })
     * 
    **/
    delete<T extends payment_platformsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsDeleteArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_platforms.
     * @param {payment_platformsUpdateArgs} args - Arguments to update one Payment_platforms.
     * @example
     * // Update one Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_platformsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsUpdateArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_platforms.
     * @param {payment_platformsDeleteManyArgs} args - Arguments to filter Payment_platforms to delete.
     * @example
     * // Delete a few Payment_platforms
     * const { count } = await prisma.payment_platforms.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_platformsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_platformsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_platformsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_platforms.
     * @param {payment_platformsUpsertArgs} args - Arguments to update or create a Payment_platforms.
     * @example
     * // Update or create a Payment_platforms
     * const payment_platforms = await prisma.payment_platforms.upsert({
     *   create: {
     *     // ... data to create a Payment_platforms
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_platforms we want to update
     *   }
     * })
    **/
    upsert<T extends payment_platformsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_platformsUpsertArgs<ExtArgs>>
    ): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsCountArgs} args - Arguments to filter Payment_platforms to count.
     * @example
     * // Count the number of Payment_platforms
     * const count = await prisma.payment_platforms.count({
     *   where: {
     *     // ... the filter for the Payment_platforms we want to count
     *   }
     * })
    **/
    count<T extends payment_platformsCountArgs>(
      args?: Subset<T, payment_platformsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_platformsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_platformsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_platformsAggregateArgs>(args: Subset<T, Payment_platformsAggregateArgs>): Prisma.PrismaPromise<GetPayment_platformsAggregateType<T>>

    /**
     * Group by Payment_platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_platformsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_platformsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_platformsGroupByArgs['orderBy'] }
        : { orderBy?: payment_platformsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_platformsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_platformsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_platforms model
   */
  readonly fields: payment_platformsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_platforms.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_platformsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_records<T extends payment_platforms$payment_recordsArgs<ExtArgs> = {}>(args?: Subset<T, payment_platforms$payment_recordsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findMany'> | Null>;

    payment_templates<T extends payment_platforms$payment_templatesArgs<ExtArgs> = {}>(args?: Subset<T, payment_platforms$payment_templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_platforms model
   */ 
  interface payment_platformsFieldRefs {
    readonly id: FieldRef<"payment_platforms", 'BigInt'>
    readonly name: FieldRef<"payment_platforms", 'String'>
    readonly description: FieldRef<"payment_platforms", 'String'>
    readonly image_url: FieldRef<"payment_platforms", 'String'>
    readonly color: FieldRef<"payment_platforms", 'String'>
    readonly abbreviation: FieldRef<"payment_platforms", 'String'>
    readonly created_at: FieldRef<"payment_platforms", 'DateTime'>
    readonly updated_at: FieldRef<"payment_platforms", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment_platforms findUnique
   */
  export type payment_platformsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter, which payment_platforms to fetch.
     */
    where: payment_platformsWhereUniqueInput
  }

  /**
   * payment_platforms findUniqueOrThrow
   */
  export type payment_platformsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter, which payment_platforms to fetch.
     */
    where: payment_platformsWhereUniqueInput
  }

  /**
   * payment_platforms findFirst
   */
  export type payment_platformsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter, which payment_platforms to fetch.
     */
    where?: payment_platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_platforms to fetch.
     */
    orderBy?: payment_platformsOrderByWithRelationInput | payment_platformsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_platforms.
     */
    cursor?: payment_platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_platforms.
     */
    distinct?: Payment_platformsScalarFieldEnum | Payment_platformsScalarFieldEnum[]
  }

  /**
   * payment_platforms findFirstOrThrow
   */
  export type payment_platformsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter, which payment_platforms to fetch.
     */
    where?: payment_platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_platforms to fetch.
     */
    orderBy?: payment_platformsOrderByWithRelationInput | payment_platformsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_platforms.
     */
    cursor?: payment_platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_platforms.
     */
    distinct?: Payment_platformsScalarFieldEnum | Payment_platformsScalarFieldEnum[]
  }

  /**
   * payment_platforms findMany
   */
  export type payment_platformsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter, which payment_platforms to fetch.
     */
    where?: payment_platformsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_platforms to fetch.
     */
    orderBy?: payment_platformsOrderByWithRelationInput | payment_platformsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_platforms.
     */
    cursor?: payment_platformsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_platforms.
     */
    skip?: number
    distinct?: Payment_platformsScalarFieldEnum | Payment_platformsScalarFieldEnum[]
  }

  /**
   * payment_platforms create
   */
  export type payment_platformsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_platforms.
     */
    data: XOR<payment_platformsCreateInput, payment_platformsUncheckedCreateInput>
  }

  /**
   * payment_platforms createMany
   */
  export type payment_platformsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_platforms.
     */
    data: payment_platformsCreateManyInput | payment_platformsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_platforms update
   */
  export type payment_platformsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_platforms.
     */
    data: XOR<payment_platformsUpdateInput, payment_platformsUncheckedUpdateInput>
    /**
     * Choose, which payment_platforms to update.
     */
    where: payment_platformsWhereUniqueInput
  }

  /**
   * payment_platforms updateMany
   */
  export type payment_platformsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_platforms.
     */
    data: XOR<payment_platformsUpdateManyMutationInput, payment_platformsUncheckedUpdateManyInput>
    /**
     * Filter which payment_platforms to update
     */
    where?: payment_platformsWhereInput
  }

  /**
   * payment_platforms upsert
   */
  export type payment_platformsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_platforms to update in case it exists.
     */
    where: payment_platformsWhereUniqueInput
    /**
     * In case the payment_platforms found by the `where` argument doesn't exist, create a new payment_platforms with this data.
     */
    create: XOR<payment_platformsCreateInput, payment_platformsUncheckedCreateInput>
    /**
     * In case the payment_platforms was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_platformsUpdateInput, payment_platformsUncheckedUpdateInput>
  }

  /**
   * payment_platforms delete
   */
  export type payment_platformsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
    /**
     * Filter which payment_platforms to delete.
     */
    where: payment_platformsWhereUniqueInput
  }

  /**
   * payment_platforms deleteMany
   */
  export type payment_platformsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_platforms to delete
     */
    where?: payment_platformsWhereInput
  }

  /**
   * payment_platforms.payment_records
   */
  export type payment_platforms$payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    where?: payment_recordsWhereInput
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    cursor?: payment_recordsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_platforms.payment_templates
   */
  export type payment_platforms$payment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    where?: payment_templatesWhereInput
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    cursor?: payment_templatesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_platforms without action
   */
  export type payment_platformsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_platforms
     */
    select?: payment_platformsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_platformsInclude<ExtArgs> | null
  }


  /**
   * Model payment_records
   */

  export type AggregatePayment_records = {
    _count: Payment_recordsCountAggregateOutputType | null
    _avg: Payment_recordsAvgAggregateOutputType | null
    _sum: Payment_recordsSumAggregateOutputType | null
    _min: Payment_recordsMinAggregateOutputType | null
    _max: Payment_recordsMaxAggregateOutputType | null
  }

  export type Payment_recordsAvgAggregateOutputType = {
    id: number | null
    amount_usd: number | null
    amount_clp: number | null
    payment_period_id: number | null
    payment_platform_id: number | null
    payment_frequency_id: number | null
    payment_category_id: number | null
  }

  export type Payment_recordsSumAggregateOutputType = {
    id: bigint | null
    amount_usd: number | null
    amount_clp: number | null
    payment_period_id: bigint | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
  }

  export type Payment_recordsMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    billing_date: Date | null
    payment_date: Date | null
    due_date: Date | null
    currency: string | null
    amount_usd: number | null
    amount_clp: number | null
    payment_period_id: bigint | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
    image_url: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    monitored: boolean | null
  }

  export type Payment_recordsMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    billing_date: Date | null
    payment_date: Date | null
    due_date: Date | null
    currency: string | null
    amount_usd: number | null
    amount_clp: number | null
    payment_period_id: bigint | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
    image_url: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    monitored: boolean | null
  }

  export type Payment_recordsCountAggregateOutputType = {
    id: number
    name: number
    billing_date: number
    payment_date: number
    due_date: number
    currency: number
    amount_usd: number
    amount_clp: number
    payment_period_id: number
    payment_platform_id: number
    payment_frequency_id: number
    payment_category_id: number
    image_url: number
    description: number
    created_at: number
    updated_at: number
    monitored: number
    _all: number
  }


  export type Payment_recordsAvgAggregateInputType = {
    id?: true
    amount_usd?: true
    amount_clp?: true
    payment_period_id?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
  }

  export type Payment_recordsSumAggregateInputType = {
    id?: true
    amount_usd?: true
    amount_clp?: true
    payment_period_id?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
  }

  export type Payment_recordsMinAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    payment_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_period_id?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    image_url?: true
    description?: true
    created_at?: true
    updated_at?: true
    monitored?: true
  }

  export type Payment_recordsMaxAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    payment_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_period_id?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    image_url?: true
    description?: true
    created_at?: true
    updated_at?: true
    monitored?: true
  }

  export type Payment_recordsCountAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    payment_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_period_id?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    image_url?: true
    description?: true
    created_at?: true
    updated_at?: true
    monitored?: true
    _all?: true
  }

  export type Payment_recordsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_records to aggregate.
     */
    where?: payment_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_records
    **/
    _count?: true | Payment_recordsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_recordsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_recordsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_recordsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_recordsMaxAggregateInputType
  }

  export type GetPayment_recordsAggregateType<T extends Payment_recordsAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_records]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_records[P]>
      : GetScalarType<T[P], AggregatePayment_records[P]>
  }




  export type payment_recordsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_recordsWhereInput
    orderBy?: payment_recordsOrderByWithAggregationInput | payment_recordsOrderByWithAggregationInput[]
    by: Payment_recordsScalarFieldEnum[] | Payment_recordsScalarFieldEnum
    having?: payment_recordsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_recordsCountAggregateInputType | true
    _avg?: Payment_recordsAvgAggregateInputType
    _sum?: Payment_recordsSumAggregateInputType
    _min?: Payment_recordsMinAggregateInputType
    _max?: Payment_recordsMaxAggregateInputType
  }

  export type Payment_recordsGroupByOutputType = {
    id: bigint
    name: string
    billing_date: Date
    payment_date: Date
    due_date: Date
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint
    payment_platform_id: bigint
    payment_frequency_id: bigint
    payment_category_id: bigint
    image_url: string | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    monitored: boolean
    _count: Payment_recordsCountAggregateOutputType | null
    _avg: Payment_recordsAvgAggregateOutputType | null
    _sum: Payment_recordsSumAggregateOutputType | null
    _min: Payment_recordsMinAggregateOutputType | null
    _max: Payment_recordsMaxAggregateOutputType | null
  }

  type GetPayment_recordsGroupByPayload<T extends payment_recordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_recordsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_recordsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_recordsGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_recordsGroupByOutputType[P]>
        }
      >
    >


  export type payment_recordsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    billing_date?: boolean
    payment_date?: boolean
    due_date?: boolean
    currency?: boolean
    amount_usd?: boolean
    amount_clp?: boolean
    payment_period_id?: boolean
    payment_platform_id?: boolean
    payment_frequency_id?: boolean
    payment_category_id?: boolean
    image_url?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    monitored?: boolean
    payment_categories?: boolean | payment_categoriesDefaultArgs<ExtArgs>
    payment_frequencies?: boolean | payment_frequenciesDefaultArgs<ExtArgs>
    payment_periods?: boolean | payment_periodsDefaultArgs<ExtArgs>
    payment_platforms?: boolean | payment_platformsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_records"]>

  export type payment_recordsSelectScalar = {
    id?: boolean
    name?: boolean
    billing_date?: boolean
    payment_date?: boolean
    due_date?: boolean
    currency?: boolean
    amount_usd?: boolean
    amount_clp?: boolean
    payment_period_id?: boolean
    payment_platform_id?: boolean
    payment_frequency_id?: boolean
    payment_category_id?: boolean
    image_url?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    monitored?: boolean
  }


  export type payment_recordsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_categories?: boolean | payment_categoriesDefaultArgs<ExtArgs>
    payment_frequencies?: boolean | payment_frequenciesDefaultArgs<ExtArgs>
    payment_periods?: boolean | payment_periodsDefaultArgs<ExtArgs>
    payment_platforms?: boolean | payment_platformsDefaultArgs<ExtArgs>
  }


  export type $payment_recordsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_records"
    objects: {
      payment_categories: Prisma.$payment_categoriesPayload<ExtArgs>
      payment_frequencies: Prisma.$payment_frequenciesPayload<ExtArgs>
      payment_periods: Prisma.$payment_periodsPayload<ExtArgs>
      payment_platforms: Prisma.$payment_platformsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      billing_date: Date
      payment_date: Date
      due_date: Date
      currency: string
      amount_usd: number
      amount_clp: number
      payment_period_id: bigint
      payment_platform_id: bigint
      payment_frequency_id: bigint
      payment_category_id: bigint
      image_url: string | null
      description: string | null
      created_at: Date | null
      updated_at: Date | null
      monitored: boolean
    }, ExtArgs["result"]["payment_records"]>
    composites: {}
  }


  type payment_recordsGetPayload<S extends boolean | null | undefined | payment_recordsDefaultArgs> = $Result.GetResult<Prisma.$payment_recordsPayload, S>

  type payment_recordsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_recordsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_recordsCountAggregateInputType | true
    }

  export interface payment_recordsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_records'], meta: { name: 'payment_records' } }
    /**
     * Find zero or one Payment_records that matches the filter.
     * @param {payment_recordsFindUniqueArgs} args - Arguments to find a Payment_records
     * @example
     * // Get one Payment_records
     * const payment_records = await prisma.payment_records.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_recordsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_records that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_recordsFindUniqueOrThrowArgs} args - Arguments to find a Payment_records
     * @example
     * // Get one Payment_records
     * const payment_records = await prisma.payment_records.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_recordsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsFindFirstArgs} args - Arguments to find a Payment_records
     * @example
     * // Get one Payment_records
     * const payment_records = await prisma.payment_records.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_recordsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsFindFirstArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_records that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsFindFirstOrThrowArgs} args - Arguments to find a Payment_records
     * @example
     * // Get one Payment_records
     * const payment_records = await prisma.payment_records.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_recordsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_records that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_records
     * const payment_records = await prisma.payment_records.findMany()
     * 
     * // Get first 10 Payment_records
     * const payment_records = await prisma.payment_records.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_recordsWithIdOnly = await prisma.payment_records.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_recordsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_records.
     * @param {payment_recordsCreateArgs} args - Arguments to create a Payment_records.
     * @example
     * // Create one Payment_records
     * const Payment_records = await prisma.payment_records.create({
     *   data: {
     *     // ... data to create a Payment_records
     *   }
     * })
     * 
    **/
    create<T extends payment_recordsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsCreateArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_records.
     *     @param {payment_recordsCreateManyArgs} args - Arguments to create many Payment_records.
     *     @example
     *     // Create many Payment_records
     *     const payment_records = await prisma.payment_records.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_recordsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_records.
     * @param {payment_recordsDeleteArgs} args - Arguments to delete one Payment_records.
     * @example
     * // Delete one Payment_records
     * const Payment_records = await prisma.payment_records.delete({
     *   where: {
     *     // ... filter to delete one Payment_records
     *   }
     * })
     * 
    **/
    delete<T extends payment_recordsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsDeleteArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_records.
     * @param {payment_recordsUpdateArgs} args - Arguments to update one Payment_records.
     * @example
     * // Update one Payment_records
     * const payment_records = await prisma.payment_records.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_recordsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsUpdateArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_records.
     * @param {payment_recordsDeleteManyArgs} args - Arguments to filter Payment_records to delete.
     * @example
     * // Delete a few Payment_records
     * const { count } = await prisma.payment_records.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_recordsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_recordsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_records
     * const payment_records = await prisma.payment_records.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_recordsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_records.
     * @param {payment_recordsUpsertArgs} args - Arguments to update or create a Payment_records.
     * @example
     * // Update or create a Payment_records
     * const payment_records = await prisma.payment_records.upsert({
     *   create: {
     *     // ... data to create a Payment_records
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_records we want to update
     *   }
     * })
    **/
    upsert<T extends payment_recordsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_recordsUpsertArgs<ExtArgs>>
    ): Prisma__payment_recordsClient<$Result.GetResult<Prisma.$payment_recordsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsCountArgs} args - Arguments to filter Payment_records to count.
     * @example
     * // Count the number of Payment_records
     * const count = await prisma.payment_records.count({
     *   where: {
     *     // ... the filter for the Payment_records we want to count
     *   }
     * })
    **/
    count<T extends payment_recordsCountArgs>(
      args?: Subset<T, payment_recordsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_recordsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_recordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_recordsAggregateArgs>(args: Subset<T, Payment_recordsAggregateArgs>): Prisma.PrismaPromise<GetPayment_recordsAggregateType<T>>

    /**
     * Group by Payment_records.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_recordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_recordsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_recordsGroupByArgs['orderBy'] }
        : { orderBy?: payment_recordsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_recordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_recordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_records model
   */
  readonly fields: payment_recordsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_records.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_recordsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_categories<T extends payment_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_categoriesDefaultArgs<ExtArgs>>): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payment_frequencies<T extends payment_frequenciesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_frequenciesDefaultArgs<ExtArgs>>): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payment_periods<T extends payment_periodsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_periodsDefaultArgs<ExtArgs>>): Prisma__payment_periodsClient<$Result.GetResult<Prisma.$payment_periodsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payment_platforms<T extends payment_platformsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_platformsDefaultArgs<ExtArgs>>): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_records model
   */ 
  interface payment_recordsFieldRefs {
    readonly id: FieldRef<"payment_records", 'BigInt'>
    readonly name: FieldRef<"payment_records", 'String'>
    readonly billing_date: FieldRef<"payment_records", 'DateTime'>
    readonly payment_date: FieldRef<"payment_records", 'DateTime'>
    readonly due_date: FieldRef<"payment_records", 'DateTime'>
    readonly currency: FieldRef<"payment_records", 'String'>
    readonly amount_usd: FieldRef<"payment_records", 'Float'>
    readonly amount_clp: FieldRef<"payment_records", 'Float'>
    readonly payment_period_id: FieldRef<"payment_records", 'BigInt'>
    readonly payment_platform_id: FieldRef<"payment_records", 'BigInt'>
    readonly payment_frequency_id: FieldRef<"payment_records", 'BigInt'>
    readonly payment_category_id: FieldRef<"payment_records", 'BigInt'>
    readonly image_url: FieldRef<"payment_records", 'String'>
    readonly description: FieldRef<"payment_records", 'String'>
    readonly created_at: FieldRef<"payment_records", 'DateTime'>
    readonly updated_at: FieldRef<"payment_records", 'DateTime'>
    readonly monitored: FieldRef<"payment_records", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * payment_records findUnique
   */
  export type payment_recordsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where: payment_recordsWhereUniqueInput
  }

  /**
   * payment_records findUniqueOrThrow
   */
  export type payment_recordsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where: payment_recordsWhereUniqueInput
  }

  /**
   * payment_records findFirst
   */
  export type payment_recordsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where?: payment_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_records.
     */
    cursor?: payment_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_records.
     */
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_records findFirstOrThrow
   */
  export type payment_recordsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where?: payment_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_records.
     */
    cursor?: payment_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_records.
     */
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_records findMany
   */
  export type payment_recordsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter, which payment_records to fetch.
     */
    where?: payment_recordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_records to fetch.
     */
    orderBy?: payment_recordsOrderByWithRelationInput | payment_recordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_records.
     */
    cursor?: payment_recordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_records from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_records.
     */
    skip?: number
    distinct?: Payment_recordsScalarFieldEnum | Payment_recordsScalarFieldEnum[]
  }

  /**
   * payment_records create
   */
  export type payment_recordsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_records.
     */
    data: XOR<payment_recordsCreateInput, payment_recordsUncheckedCreateInput>
  }

  /**
   * payment_records createMany
   */
  export type payment_recordsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_records.
     */
    data: payment_recordsCreateManyInput | payment_recordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_records update
   */
  export type payment_recordsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_records.
     */
    data: XOR<payment_recordsUpdateInput, payment_recordsUncheckedUpdateInput>
    /**
     * Choose, which payment_records to update.
     */
    where: payment_recordsWhereUniqueInput
  }

  /**
   * payment_records updateMany
   */
  export type payment_recordsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_records.
     */
    data: XOR<payment_recordsUpdateManyMutationInput, payment_recordsUncheckedUpdateManyInput>
    /**
     * Filter which payment_records to update
     */
    where?: payment_recordsWhereInput
  }

  /**
   * payment_records upsert
   */
  export type payment_recordsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_records to update in case it exists.
     */
    where: payment_recordsWhereUniqueInput
    /**
     * In case the payment_records found by the `where` argument doesn't exist, create a new payment_records with this data.
     */
    create: XOR<payment_recordsCreateInput, payment_recordsUncheckedCreateInput>
    /**
     * In case the payment_records was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_recordsUpdateInput, payment_recordsUncheckedUpdateInput>
  }

  /**
   * payment_records delete
   */
  export type payment_recordsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
    /**
     * Filter which payment_records to delete.
     */
    where: payment_recordsWhereUniqueInput
  }

  /**
   * payment_records deleteMany
   */
  export type payment_recordsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_records to delete
     */
    where?: payment_recordsWhereInput
  }

  /**
   * payment_records without action
   */
  export type payment_recordsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_records
     */
    select?: payment_recordsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_recordsInclude<ExtArgs> | null
  }


  /**
   * Model payment_templates
   */

  export type AggregatePayment_templates = {
    _count: Payment_templatesCountAggregateOutputType | null
    _avg: Payment_templatesAvgAggregateOutputType | null
    _sum: Payment_templatesSumAggregateOutputType | null
    _min: Payment_templatesMinAggregateOutputType | null
    _max: Payment_templatesMaxAggregateOutputType | null
  }

  export type Payment_templatesAvgAggregateOutputType = {
    id: number | null
    amount_usd: number | null
    amount_clp: number | null
    payment_platform_id: number | null
    payment_frequency_id: number | null
    payment_category_id: number | null
  }

  export type Payment_templatesSumAggregateOutputType = {
    id: bigint | null
    amount_usd: number | null
    amount_clp: number | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
  }

  export type Payment_templatesMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    billing_date: Date | null
    due_date: Date | null
    currency: string | null
    amount_usd: number | null
    amount_clp: number | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
    monitored: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_templatesMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    billing_date: Date | null
    due_date: Date | null
    currency: string | null
    amount_usd: number | null
    amount_clp: number | null
    payment_platform_id: bigint | null
    payment_frequency_id: bigint | null
    payment_category_id: bigint | null
    monitored: boolean | null
    description: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Payment_templatesCountAggregateOutputType = {
    id: number
    name: number
    billing_date: number
    due_date: number
    currency: number
    amount_usd: number
    amount_clp: number
    payment_platform_id: number
    payment_frequency_id: number
    payment_category_id: number
    monitored: number
    description: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Payment_templatesAvgAggregateInputType = {
    id?: true
    amount_usd?: true
    amount_clp?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
  }

  export type Payment_templatesSumAggregateInputType = {
    id?: true
    amount_usd?: true
    amount_clp?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
  }

  export type Payment_templatesMinAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    monitored?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_templatesMaxAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    monitored?: true
    description?: true
    created_at?: true
    updated_at?: true
  }

  export type Payment_templatesCountAggregateInputType = {
    id?: true
    name?: true
    billing_date?: true
    due_date?: true
    currency?: true
    amount_usd?: true
    amount_clp?: true
    payment_platform_id?: true
    payment_frequency_id?: true
    payment_category_id?: true
    monitored?: true
    description?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Payment_templatesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_templates to aggregate.
     */
    where?: payment_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_templates to fetch.
     */
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: payment_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payment_templates
    **/
    _count?: true | Payment_templatesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Payment_templatesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Payment_templatesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Payment_templatesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Payment_templatesMaxAggregateInputType
  }

  export type GetPayment_templatesAggregateType<T extends Payment_templatesAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment_templates]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment_templates[P]>
      : GetScalarType<T[P], AggregatePayment_templates[P]>
  }




  export type payment_templatesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: payment_templatesWhereInput
    orderBy?: payment_templatesOrderByWithAggregationInput | payment_templatesOrderByWithAggregationInput[]
    by: Payment_templatesScalarFieldEnum[] | Payment_templatesScalarFieldEnum
    having?: payment_templatesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Payment_templatesCountAggregateInputType | true
    _avg?: Payment_templatesAvgAggregateInputType
    _sum?: Payment_templatesSumAggregateInputType
    _min?: Payment_templatesMinAggregateInputType
    _max?: Payment_templatesMaxAggregateInputType
  }

  export type Payment_templatesGroupByOutputType = {
    id: bigint
    name: string
    billing_date: Date
    due_date: Date
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint
    payment_frequency_id: bigint
    payment_category_id: bigint
    monitored: boolean
    description: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: Payment_templatesCountAggregateOutputType | null
    _avg: Payment_templatesAvgAggregateOutputType | null
    _sum: Payment_templatesSumAggregateOutputType | null
    _min: Payment_templatesMinAggregateOutputType | null
    _max: Payment_templatesMaxAggregateOutputType | null
  }

  type GetPayment_templatesGroupByPayload<T extends payment_templatesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Payment_templatesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Payment_templatesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Payment_templatesGroupByOutputType[P]>
            : GetScalarType<T[P], Payment_templatesGroupByOutputType[P]>
        }
      >
    >


  export type payment_templatesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    billing_date?: boolean
    due_date?: boolean
    currency?: boolean
    amount_usd?: boolean
    amount_clp?: boolean
    payment_platform_id?: boolean
    payment_frequency_id?: boolean
    payment_category_id?: boolean
    monitored?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
    payment_categories?: boolean | payment_categoriesDefaultArgs<ExtArgs>
    payment_frequencies?: boolean | payment_frequenciesDefaultArgs<ExtArgs>
    payment_platforms?: boolean | payment_platformsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment_templates"]>

  export type payment_templatesSelectScalar = {
    id?: boolean
    name?: boolean
    billing_date?: boolean
    due_date?: boolean
    currency?: boolean
    amount_usd?: boolean
    amount_clp?: boolean
    payment_platform_id?: boolean
    payment_frequency_id?: boolean
    payment_category_id?: boolean
    monitored?: boolean
    description?: boolean
    created_at?: boolean
    updated_at?: boolean
  }


  export type payment_templatesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payment_categories?: boolean | payment_categoriesDefaultArgs<ExtArgs>
    payment_frequencies?: boolean | payment_frequenciesDefaultArgs<ExtArgs>
    payment_platforms?: boolean | payment_platformsDefaultArgs<ExtArgs>
  }


  export type $payment_templatesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment_templates"
    objects: {
      payment_categories: Prisma.$payment_categoriesPayload<ExtArgs>
      payment_frequencies: Prisma.$payment_frequenciesPayload<ExtArgs>
      payment_platforms: Prisma.$payment_platformsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      billing_date: Date
      due_date: Date
      currency: string
      amount_usd: number
      amount_clp: number
      payment_platform_id: bigint
      payment_frequency_id: bigint
      payment_category_id: bigint
      monitored: boolean
      description: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["payment_templates"]>
    composites: {}
  }


  type payment_templatesGetPayload<S extends boolean | null | undefined | payment_templatesDefaultArgs> = $Result.GetResult<Prisma.$payment_templatesPayload, S>

  type payment_templatesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<payment_templatesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Payment_templatesCountAggregateInputType | true
    }

  export interface payment_templatesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment_templates'], meta: { name: 'payment_templates' } }
    /**
     * Find zero or one Payment_templates that matches the filter.
     * @param {payment_templatesFindUniqueArgs} args - Arguments to find a Payment_templates
     * @example
     * // Get one Payment_templates
     * const payment_templates = await prisma.payment_templates.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends payment_templatesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesFindUniqueArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Payment_templates that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {payment_templatesFindUniqueOrThrowArgs} args - Arguments to find a Payment_templates
     * @example
     * // Get one Payment_templates
     * const payment_templates = await prisma.payment_templates.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends payment_templatesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Payment_templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesFindFirstArgs} args - Arguments to find a Payment_templates
     * @example
     * // Get one Payment_templates
     * const payment_templates = await prisma.payment_templates.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends payment_templatesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesFindFirstArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Payment_templates that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesFindFirstOrThrowArgs} args - Arguments to find a Payment_templates
     * @example
     * // Get one Payment_templates
     * const payment_templates = await prisma.payment_templates.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends payment_templatesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Payment_templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payment_templates
     * const payment_templates = await prisma.payment_templates.findMany()
     * 
     * // Get first 10 Payment_templates
     * const payment_templates = await prisma.payment_templates.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payment_templatesWithIdOnly = await prisma.payment_templates.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends payment_templatesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Payment_templates.
     * @param {payment_templatesCreateArgs} args - Arguments to create a Payment_templates.
     * @example
     * // Create one Payment_templates
     * const Payment_templates = await prisma.payment_templates.create({
     *   data: {
     *     // ... data to create a Payment_templates
     *   }
     * })
     * 
    **/
    create<T extends payment_templatesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesCreateArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Payment_templates.
     *     @param {payment_templatesCreateManyArgs} args - Arguments to create many Payment_templates.
     *     @example
     *     // Create many Payment_templates
     *     const payment_templates = await prisma.payment_templates.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends payment_templatesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment_templates.
     * @param {payment_templatesDeleteArgs} args - Arguments to delete one Payment_templates.
     * @example
     * // Delete one Payment_templates
     * const Payment_templates = await prisma.payment_templates.delete({
     *   where: {
     *     // ... filter to delete one Payment_templates
     *   }
     * })
     * 
    **/
    delete<T extends payment_templatesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesDeleteArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Payment_templates.
     * @param {payment_templatesUpdateArgs} args - Arguments to update one Payment_templates.
     * @example
     * // Update one Payment_templates
     * const payment_templates = await prisma.payment_templates.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends payment_templatesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesUpdateArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Payment_templates.
     * @param {payment_templatesDeleteManyArgs} args - Arguments to filter Payment_templates to delete.
     * @example
     * // Delete a few Payment_templates
     * const { count } = await prisma.payment_templates.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends payment_templatesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, payment_templatesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payment_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payment_templates
     * const payment_templates = await prisma.payment_templates.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends payment_templatesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment_templates.
     * @param {payment_templatesUpsertArgs} args - Arguments to update or create a Payment_templates.
     * @example
     * // Update or create a Payment_templates
     * const payment_templates = await prisma.payment_templates.upsert({
     *   create: {
     *     // ... data to create a Payment_templates
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment_templates we want to update
     *   }
     * })
    **/
    upsert<T extends payment_templatesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, payment_templatesUpsertArgs<ExtArgs>>
    ): Prisma__payment_templatesClient<$Result.GetResult<Prisma.$payment_templatesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Payment_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesCountArgs} args - Arguments to filter Payment_templates to count.
     * @example
     * // Count the number of Payment_templates
     * const count = await prisma.payment_templates.count({
     *   where: {
     *     // ... the filter for the Payment_templates we want to count
     *   }
     * })
    **/
    count<T extends payment_templatesCountArgs>(
      args?: Subset<T, payment_templatesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Payment_templatesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Payment_templatesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Payment_templatesAggregateArgs>(args: Subset<T, Payment_templatesAggregateArgs>): Prisma.PrismaPromise<GetPayment_templatesAggregateType<T>>

    /**
     * Group by Payment_templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {payment_templatesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends payment_templatesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: payment_templatesGroupByArgs['orderBy'] }
        : { orderBy?: payment_templatesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, payment_templatesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayment_templatesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment_templates model
   */
  readonly fields: payment_templatesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment_templates.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__payment_templatesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    payment_categories<T extends payment_categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_categoriesDefaultArgs<ExtArgs>>): Prisma__payment_categoriesClient<$Result.GetResult<Prisma.$payment_categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payment_frequencies<T extends payment_frequenciesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_frequenciesDefaultArgs<ExtArgs>>): Prisma__payment_frequenciesClient<$Result.GetResult<Prisma.$payment_frequenciesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    payment_platforms<T extends payment_platformsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, payment_platformsDefaultArgs<ExtArgs>>): Prisma__payment_platformsClient<$Result.GetResult<Prisma.$payment_platformsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the payment_templates model
   */ 
  interface payment_templatesFieldRefs {
    readonly id: FieldRef<"payment_templates", 'BigInt'>
    readonly name: FieldRef<"payment_templates", 'String'>
    readonly billing_date: FieldRef<"payment_templates", 'DateTime'>
    readonly due_date: FieldRef<"payment_templates", 'DateTime'>
    readonly currency: FieldRef<"payment_templates", 'String'>
    readonly amount_usd: FieldRef<"payment_templates", 'Float'>
    readonly amount_clp: FieldRef<"payment_templates", 'Float'>
    readonly payment_platform_id: FieldRef<"payment_templates", 'BigInt'>
    readonly payment_frequency_id: FieldRef<"payment_templates", 'BigInt'>
    readonly payment_category_id: FieldRef<"payment_templates", 'BigInt'>
    readonly monitored: FieldRef<"payment_templates", 'Boolean'>
    readonly description: FieldRef<"payment_templates", 'String'>
    readonly created_at: FieldRef<"payment_templates", 'DateTime'>
    readonly updated_at: FieldRef<"payment_templates", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment_templates findUnique
   */
  export type payment_templatesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter, which payment_templates to fetch.
     */
    where: payment_templatesWhereUniqueInput
  }

  /**
   * payment_templates findUniqueOrThrow
   */
  export type payment_templatesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter, which payment_templates to fetch.
     */
    where: payment_templatesWhereUniqueInput
  }

  /**
   * payment_templates findFirst
   */
  export type payment_templatesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter, which payment_templates to fetch.
     */
    where?: payment_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_templates to fetch.
     */
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_templates.
     */
    cursor?: payment_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_templates.
     */
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_templates findFirstOrThrow
   */
  export type payment_templatesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter, which payment_templates to fetch.
     */
    where?: payment_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_templates to fetch.
     */
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payment_templates.
     */
    cursor?: payment_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payment_templates.
     */
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_templates findMany
   */
  export type payment_templatesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter, which payment_templates to fetch.
     */
    where?: payment_templatesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payment_templates to fetch.
     */
    orderBy?: payment_templatesOrderByWithRelationInput | payment_templatesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payment_templates.
     */
    cursor?: payment_templatesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payment_templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payment_templates.
     */
    skip?: number
    distinct?: Payment_templatesScalarFieldEnum | Payment_templatesScalarFieldEnum[]
  }

  /**
   * payment_templates create
   */
  export type payment_templatesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * The data needed to create a payment_templates.
     */
    data: XOR<payment_templatesCreateInput, payment_templatesUncheckedCreateInput>
  }

  /**
   * payment_templates createMany
   */
  export type payment_templatesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payment_templates.
     */
    data: payment_templatesCreateManyInput | payment_templatesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment_templates update
   */
  export type payment_templatesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * The data needed to update a payment_templates.
     */
    data: XOR<payment_templatesUpdateInput, payment_templatesUncheckedUpdateInput>
    /**
     * Choose, which payment_templates to update.
     */
    where: payment_templatesWhereUniqueInput
  }

  /**
   * payment_templates updateMany
   */
  export type payment_templatesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payment_templates.
     */
    data: XOR<payment_templatesUpdateManyMutationInput, payment_templatesUncheckedUpdateManyInput>
    /**
     * Filter which payment_templates to update
     */
    where?: payment_templatesWhereInput
  }

  /**
   * payment_templates upsert
   */
  export type payment_templatesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * The filter to search for the payment_templates to update in case it exists.
     */
    where: payment_templatesWhereUniqueInput
    /**
     * In case the payment_templates found by the `where` argument doesn't exist, create a new payment_templates with this data.
     */
    create: XOR<payment_templatesCreateInput, payment_templatesUncheckedCreateInput>
    /**
     * In case the payment_templates was found with the provided `where` argument, update it with this data.
     */
    update: XOR<payment_templatesUpdateInput, payment_templatesUncheckedUpdateInput>
  }

  /**
   * payment_templates delete
   */
  export type payment_templatesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
    /**
     * Filter which payment_templates to delete.
     */
    where: payment_templatesWhereUniqueInput
  }

  /**
   * payment_templates deleteMany
   */
  export type payment_templatesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment_templates to delete
     */
    where?: payment_templatesWhereInput
  }

  /**
   * payment_templates without action
   */
  export type payment_templatesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment_templates
     */
    select?: payment_templatesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: payment_templatesInclude<ExtArgs> | null
  }


  /**
   * Model personal_access_tokens
   */

  export type AggregatePersonal_access_tokens = {
    _count: Personal_access_tokensCountAggregateOutputType | null
    _avg: Personal_access_tokensAvgAggregateOutputType | null
    _sum: Personal_access_tokensSumAggregateOutputType | null
    _min: Personal_access_tokensMinAggregateOutputType | null
    _max: Personal_access_tokensMaxAggregateOutputType | null
  }

  export type Personal_access_tokensAvgAggregateOutputType = {
    id: number | null
    tokenable_id: number | null
  }

  export type Personal_access_tokensSumAggregateOutputType = {
    id: bigint | null
    tokenable_id: bigint | null
  }

  export type Personal_access_tokensMinAggregateOutputType = {
    id: bigint | null
    tokenable_type: string | null
    tokenable_id: bigint | null
    name: string | null
    token: string | null
    abilities: string | null
    last_used_at: Date | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Personal_access_tokensMaxAggregateOutputType = {
    id: bigint | null
    tokenable_type: string | null
    tokenable_id: bigint | null
    name: string | null
    token: string | null
    abilities: string | null
    last_used_at: Date | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Personal_access_tokensCountAggregateOutputType = {
    id: number
    tokenable_type: number
    tokenable_id: number
    name: number
    token: number
    abilities: number
    last_used_at: number
    expires_at: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Personal_access_tokensAvgAggregateInputType = {
    id?: true
    tokenable_id?: true
  }

  export type Personal_access_tokensSumAggregateInputType = {
    id?: true
    tokenable_id?: true
  }

  export type Personal_access_tokensMinAggregateInputType = {
    id?: true
    tokenable_type?: true
    tokenable_id?: true
    name?: true
    token?: true
    abilities?: true
    last_used_at?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
  }

  export type Personal_access_tokensMaxAggregateInputType = {
    id?: true
    tokenable_type?: true
    tokenable_id?: true
    name?: true
    token?: true
    abilities?: true
    last_used_at?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
  }

  export type Personal_access_tokensCountAggregateInputType = {
    id?: true
    tokenable_type?: true
    tokenable_id?: true
    name?: true
    token?: true
    abilities?: true
    last_used_at?: true
    expires_at?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Personal_access_tokensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which personal_access_tokens to aggregate.
     */
    where?: personal_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personal_access_tokens to fetch.
     */
    orderBy?: personal_access_tokensOrderByWithRelationInput | personal_access_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: personal_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personal_access_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personal_access_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned personal_access_tokens
    **/
    _count?: true | Personal_access_tokensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Personal_access_tokensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Personal_access_tokensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Personal_access_tokensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Personal_access_tokensMaxAggregateInputType
  }

  export type GetPersonal_access_tokensAggregateType<T extends Personal_access_tokensAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonal_access_tokens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonal_access_tokens[P]>
      : GetScalarType<T[P], AggregatePersonal_access_tokens[P]>
  }




  export type personal_access_tokensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: personal_access_tokensWhereInput
    orderBy?: personal_access_tokensOrderByWithAggregationInput | personal_access_tokensOrderByWithAggregationInput[]
    by: Personal_access_tokensScalarFieldEnum[] | Personal_access_tokensScalarFieldEnum
    having?: personal_access_tokensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Personal_access_tokensCountAggregateInputType | true
    _avg?: Personal_access_tokensAvgAggregateInputType
    _sum?: Personal_access_tokensSumAggregateInputType
    _min?: Personal_access_tokensMinAggregateInputType
    _max?: Personal_access_tokensMaxAggregateInputType
  }

  export type Personal_access_tokensGroupByOutputType = {
    id: bigint
    tokenable_type: string
    tokenable_id: bigint
    name: string
    token: string
    abilities: string | null
    last_used_at: Date | null
    expires_at: Date | null
    created_at: Date | null
    updated_at: Date | null
    _count: Personal_access_tokensCountAggregateOutputType | null
    _avg: Personal_access_tokensAvgAggregateOutputType | null
    _sum: Personal_access_tokensSumAggregateOutputType | null
    _min: Personal_access_tokensMinAggregateOutputType | null
    _max: Personal_access_tokensMaxAggregateOutputType | null
  }

  type GetPersonal_access_tokensGroupByPayload<T extends personal_access_tokensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Personal_access_tokensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Personal_access_tokensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Personal_access_tokensGroupByOutputType[P]>
            : GetScalarType<T[P], Personal_access_tokensGroupByOutputType[P]>
        }
      >
    >


  export type personal_access_tokensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tokenable_type?: boolean
    tokenable_id?: boolean
    name?: boolean
    token?: boolean
    abilities?: boolean
    last_used_at?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["personal_access_tokens"]>

  export type personal_access_tokensSelectScalar = {
    id?: boolean
    tokenable_type?: boolean
    tokenable_id?: boolean
    name?: boolean
    token?: boolean
    abilities?: boolean
    last_used_at?: boolean
    expires_at?: boolean
    created_at?: boolean
    updated_at?: boolean
  }



  export type $personal_access_tokensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "personal_access_tokens"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      tokenable_type: string
      tokenable_id: bigint
      name: string
      token: string
      abilities: string | null
      last_used_at: Date | null
      expires_at: Date | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["personal_access_tokens"]>
    composites: {}
  }


  type personal_access_tokensGetPayload<S extends boolean | null | undefined | personal_access_tokensDefaultArgs> = $Result.GetResult<Prisma.$personal_access_tokensPayload, S>

  type personal_access_tokensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<personal_access_tokensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Personal_access_tokensCountAggregateInputType | true
    }

  export interface personal_access_tokensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['personal_access_tokens'], meta: { name: 'personal_access_tokens' } }
    /**
     * Find zero or one Personal_access_tokens that matches the filter.
     * @param {personal_access_tokensFindUniqueArgs} args - Arguments to find a Personal_access_tokens
     * @example
     * // Get one Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends personal_access_tokensFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensFindUniqueArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Personal_access_tokens that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {personal_access_tokensFindUniqueOrThrowArgs} args - Arguments to find a Personal_access_tokens
     * @example
     * // Get one Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends personal_access_tokensFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Personal_access_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensFindFirstArgs} args - Arguments to find a Personal_access_tokens
     * @example
     * // Get one Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends personal_access_tokensFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensFindFirstArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Personal_access_tokens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensFindFirstOrThrowArgs} args - Arguments to find a Personal_access_tokens
     * @example
     * // Get one Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends personal_access_tokensFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Personal_access_tokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findMany()
     * 
     * // Get first 10 Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personal_access_tokensWithIdOnly = await prisma.personal_access_tokens.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends personal_access_tokensFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Personal_access_tokens.
     * @param {personal_access_tokensCreateArgs} args - Arguments to create a Personal_access_tokens.
     * @example
     * // Create one Personal_access_tokens
     * const Personal_access_tokens = await prisma.personal_access_tokens.create({
     *   data: {
     *     // ... data to create a Personal_access_tokens
     *   }
     * })
     * 
    **/
    create<T extends personal_access_tokensCreateArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensCreateArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Personal_access_tokens.
     *     @param {personal_access_tokensCreateManyArgs} args - Arguments to create many Personal_access_tokens.
     *     @example
     *     // Create many Personal_access_tokens
     *     const personal_access_tokens = await prisma.personal_access_tokens.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends personal_access_tokensCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Personal_access_tokens.
     * @param {personal_access_tokensDeleteArgs} args - Arguments to delete one Personal_access_tokens.
     * @example
     * // Delete one Personal_access_tokens
     * const Personal_access_tokens = await prisma.personal_access_tokens.delete({
     *   where: {
     *     // ... filter to delete one Personal_access_tokens
     *   }
     * })
     * 
    **/
    delete<T extends personal_access_tokensDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensDeleteArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Personal_access_tokens.
     * @param {personal_access_tokensUpdateArgs} args - Arguments to update one Personal_access_tokens.
     * @example
     * // Update one Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends personal_access_tokensUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensUpdateArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Personal_access_tokens.
     * @param {personal_access_tokensDeleteManyArgs} args - Arguments to filter Personal_access_tokens to delete.
     * @example
     * // Delete a few Personal_access_tokens
     * const { count } = await prisma.personal_access_tokens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends personal_access_tokensDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, personal_access_tokensDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personal_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends personal_access_tokensUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Personal_access_tokens.
     * @param {personal_access_tokensUpsertArgs} args - Arguments to update or create a Personal_access_tokens.
     * @example
     * // Update or create a Personal_access_tokens
     * const personal_access_tokens = await prisma.personal_access_tokens.upsert({
     *   create: {
     *     // ... data to create a Personal_access_tokens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personal_access_tokens we want to update
     *   }
     * })
    **/
    upsert<T extends personal_access_tokensUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, personal_access_tokensUpsertArgs<ExtArgs>>
    ): Prisma__personal_access_tokensClient<$Result.GetResult<Prisma.$personal_access_tokensPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Personal_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensCountArgs} args - Arguments to filter Personal_access_tokens to count.
     * @example
     * // Count the number of Personal_access_tokens
     * const count = await prisma.personal_access_tokens.count({
     *   where: {
     *     // ... the filter for the Personal_access_tokens we want to count
     *   }
     * })
    **/
    count<T extends personal_access_tokensCountArgs>(
      args?: Subset<T, personal_access_tokensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Personal_access_tokensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personal_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Personal_access_tokensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Personal_access_tokensAggregateArgs>(args: Subset<T, Personal_access_tokensAggregateArgs>): Prisma.PrismaPromise<GetPersonal_access_tokensAggregateType<T>>

    /**
     * Group by Personal_access_tokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {personal_access_tokensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends personal_access_tokensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: personal_access_tokensGroupByArgs['orderBy'] }
        : { orderBy?: personal_access_tokensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, personal_access_tokensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonal_access_tokensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the personal_access_tokens model
   */
  readonly fields: personal_access_tokensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for personal_access_tokens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__personal_access_tokensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the personal_access_tokens model
   */ 
  interface personal_access_tokensFieldRefs {
    readonly id: FieldRef<"personal_access_tokens", 'BigInt'>
    readonly tokenable_type: FieldRef<"personal_access_tokens", 'String'>
    readonly tokenable_id: FieldRef<"personal_access_tokens", 'BigInt'>
    readonly name: FieldRef<"personal_access_tokens", 'String'>
    readonly token: FieldRef<"personal_access_tokens", 'String'>
    readonly abilities: FieldRef<"personal_access_tokens", 'String'>
    readonly last_used_at: FieldRef<"personal_access_tokens", 'DateTime'>
    readonly expires_at: FieldRef<"personal_access_tokens", 'DateTime'>
    readonly created_at: FieldRef<"personal_access_tokens", 'DateTime'>
    readonly updated_at: FieldRef<"personal_access_tokens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * personal_access_tokens findUnique
   */
  export type personal_access_tokensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter, which personal_access_tokens to fetch.
     */
    where: personal_access_tokensWhereUniqueInput
  }

  /**
   * personal_access_tokens findUniqueOrThrow
   */
  export type personal_access_tokensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter, which personal_access_tokens to fetch.
     */
    where: personal_access_tokensWhereUniqueInput
  }

  /**
   * personal_access_tokens findFirst
   */
  export type personal_access_tokensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter, which personal_access_tokens to fetch.
     */
    where?: personal_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personal_access_tokens to fetch.
     */
    orderBy?: personal_access_tokensOrderByWithRelationInput | personal_access_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for personal_access_tokens.
     */
    cursor?: personal_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personal_access_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personal_access_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of personal_access_tokens.
     */
    distinct?: Personal_access_tokensScalarFieldEnum | Personal_access_tokensScalarFieldEnum[]
  }

  /**
   * personal_access_tokens findFirstOrThrow
   */
  export type personal_access_tokensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter, which personal_access_tokens to fetch.
     */
    where?: personal_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personal_access_tokens to fetch.
     */
    orderBy?: personal_access_tokensOrderByWithRelationInput | personal_access_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for personal_access_tokens.
     */
    cursor?: personal_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personal_access_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personal_access_tokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of personal_access_tokens.
     */
    distinct?: Personal_access_tokensScalarFieldEnum | Personal_access_tokensScalarFieldEnum[]
  }

  /**
   * personal_access_tokens findMany
   */
  export type personal_access_tokensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter, which personal_access_tokens to fetch.
     */
    where?: personal_access_tokensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of personal_access_tokens to fetch.
     */
    orderBy?: personal_access_tokensOrderByWithRelationInput | personal_access_tokensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing personal_access_tokens.
     */
    cursor?: personal_access_tokensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` personal_access_tokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` personal_access_tokens.
     */
    skip?: number
    distinct?: Personal_access_tokensScalarFieldEnum | Personal_access_tokensScalarFieldEnum[]
  }

  /**
   * personal_access_tokens create
   */
  export type personal_access_tokensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * The data needed to create a personal_access_tokens.
     */
    data: XOR<personal_access_tokensCreateInput, personal_access_tokensUncheckedCreateInput>
  }

  /**
   * personal_access_tokens createMany
   */
  export type personal_access_tokensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many personal_access_tokens.
     */
    data: personal_access_tokensCreateManyInput | personal_access_tokensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * personal_access_tokens update
   */
  export type personal_access_tokensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * The data needed to update a personal_access_tokens.
     */
    data: XOR<personal_access_tokensUpdateInput, personal_access_tokensUncheckedUpdateInput>
    /**
     * Choose, which personal_access_tokens to update.
     */
    where: personal_access_tokensWhereUniqueInput
  }

  /**
   * personal_access_tokens updateMany
   */
  export type personal_access_tokensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update personal_access_tokens.
     */
    data: XOR<personal_access_tokensUpdateManyMutationInput, personal_access_tokensUncheckedUpdateManyInput>
    /**
     * Filter which personal_access_tokens to update
     */
    where?: personal_access_tokensWhereInput
  }

  /**
   * personal_access_tokens upsert
   */
  export type personal_access_tokensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * The filter to search for the personal_access_tokens to update in case it exists.
     */
    where: personal_access_tokensWhereUniqueInput
    /**
     * In case the personal_access_tokens found by the `where` argument doesn't exist, create a new personal_access_tokens with this data.
     */
    create: XOR<personal_access_tokensCreateInput, personal_access_tokensUncheckedCreateInput>
    /**
     * In case the personal_access_tokens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<personal_access_tokensUpdateInput, personal_access_tokensUncheckedUpdateInput>
  }

  /**
   * personal_access_tokens delete
   */
  export type personal_access_tokensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
    /**
     * Filter which personal_access_tokens to delete.
     */
    where: personal_access_tokensWhereUniqueInput
  }

  /**
   * personal_access_tokens deleteMany
   */
  export type personal_access_tokensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which personal_access_tokens to delete
     */
    where?: personal_access_tokensWhereInput
  }

  /**
   * personal_access_tokens without action
   */
  export type personal_access_tokensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the personal_access_tokens
     */
    select?: personal_access_tokensSelect<ExtArgs> | null
  }


  /**
   * Model telescope_entries
   */

  export type AggregateTelescope_entries = {
    _count: Telescope_entriesCountAggregateOutputType | null
    _avg: Telescope_entriesAvgAggregateOutputType | null
    _sum: Telescope_entriesSumAggregateOutputType | null
    _min: Telescope_entriesMinAggregateOutputType | null
    _max: Telescope_entriesMaxAggregateOutputType | null
  }

  export type Telescope_entriesAvgAggregateOutputType = {
    sequence: number | null
  }

  export type Telescope_entriesSumAggregateOutputType = {
    sequence: bigint | null
  }

  export type Telescope_entriesMinAggregateOutputType = {
    sequence: bigint | null
    uuid: string | null
    batch_id: string | null
    family_hash: string | null
    should_display_on_index: boolean | null
    type: string | null
    content: string | null
    created_at: Date | null
  }

  export type Telescope_entriesMaxAggregateOutputType = {
    sequence: bigint | null
    uuid: string | null
    batch_id: string | null
    family_hash: string | null
    should_display_on_index: boolean | null
    type: string | null
    content: string | null
    created_at: Date | null
  }

  export type Telescope_entriesCountAggregateOutputType = {
    sequence: number
    uuid: number
    batch_id: number
    family_hash: number
    should_display_on_index: number
    type: number
    content: number
    created_at: number
    _all: number
  }


  export type Telescope_entriesAvgAggregateInputType = {
    sequence?: true
  }

  export type Telescope_entriesSumAggregateInputType = {
    sequence?: true
  }

  export type Telescope_entriesMinAggregateInputType = {
    sequence?: true
    uuid?: true
    batch_id?: true
    family_hash?: true
    should_display_on_index?: true
    type?: true
    content?: true
    created_at?: true
  }

  export type Telescope_entriesMaxAggregateInputType = {
    sequence?: true
    uuid?: true
    batch_id?: true
    family_hash?: true
    should_display_on_index?: true
    type?: true
    content?: true
    created_at?: true
  }

  export type Telescope_entriesCountAggregateInputType = {
    sequence?: true
    uuid?: true
    batch_id?: true
    family_hash?: true
    should_display_on_index?: true
    type?: true
    content?: true
    created_at?: true
    _all?: true
  }

  export type Telescope_entriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which telescope_entries to aggregate.
     */
    where?: telescope_entriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of telescope_entries to fetch.
     */
    orderBy?: telescope_entriesOrderByWithRelationInput | telescope_entriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: telescope_entriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` telescope_entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` telescope_entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned telescope_entries
    **/
    _count?: true | Telescope_entriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Telescope_entriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Telescope_entriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Telescope_entriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Telescope_entriesMaxAggregateInputType
  }

  export type GetTelescope_entriesAggregateType<T extends Telescope_entriesAggregateArgs> = {
        [P in keyof T & keyof AggregateTelescope_entries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelescope_entries[P]>
      : GetScalarType<T[P], AggregateTelescope_entries[P]>
  }




  export type telescope_entriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: telescope_entriesWhereInput
    orderBy?: telescope_entriesOrderByWithAggregationInput | telescope_entriesOrderByWithAggregationInput[]
    by: Telescope_entriesScalarFieldEnum[] | Telescope_entriesScalarFieldEnum
    having?: telescope_entriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Telescope_entriesCountAggregateInputType | true
    _avg?: Telescope_entriesAvgAggregateInputType
    _sum?: Telescope_entriesSumAggregateInputType
    _min?: Telescope_entriesMinAggregateInputType
    _max?: Telescope_entriesMaxAggregateInputType
  }

  export type Telescope_entriesGroupByOutputType = {
    sequence: bigint
    uuid: string
    batch_id: string
    family_hash: string | null
    should_display_on_index: boolean
    type: string
    content: string
    created_at: Date | null
    _count: Telescope_entriesCountAggregateOutputType | null
    _avg: Telescope_entriesAvgAggregateOutputType | null
    _sum: Telescope_entriesSumAggregateOutputType | null
    _min: Telescope_entriesMinAggregateOutputType | null
    _max: Telescope_entriesMaxAggregateOutputType | null
  }

  type GetTelescope_entriesGroupByPayload<T extends telescope_entriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Telescope_entriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Telescope_entriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Telescope_entriesGroupByOutputType[P]>
            : GetScalarType<T[P], Telescope_entriesGroupByOutputType[P]>
        }
      >
    >


  export type telescope_entriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sequence?: boolean
    uuid?: boolean
    batch_id?: boolean
    family_hash?: boolean
    should_display_on_index?: boolean
    type?: boolean
    content?: boolean
    created_at?: boolean
  }, ExtArgs["result"]["telescope_entries"]>

  export type telescope_entriesSelectScalar = {
    sequence?: boolean
    uuid?: boolean
    batch_id?: boolean
    family_hash?: boolean
    should_display_on_index?: boolean
    type?: boolean
    content?: boolean
    created_at?: boolean
  }



  export type $telescope_entriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "telescope_entries"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      sequence: bigint
      uuid: string
      batch_id: string
      family_hash: string | null
      should_display_on_index: boolean
      type: string
      content: string
      created_at: Date | null
    }, ExtArgs["result"]["telescope_entries"]>
    composites: {}
  }


  type telescope_entriesGetPayload<S extends boolean | null | undefined | telescope_entriesDefaultArgs> = $Result.GetResult<Prisma.$telescope_entriesPayload, S>

  type telescope_entriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<telescope_entriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Telescope_entriesCountAggregateInputType | true
    }

  export interface telescope_entriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['telescope_entries'], meta: { name: 'telescope_entries' } }
    /**
     * Find zero or one Telescope_entries that matches the filter.
     * @param {telescope_entriesFindUniqueArgs} args - Arguments to find a Telescope_entries
     * @example
     * // Get one Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends telescope_entriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesFindUniqueArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Telescope_entries that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {telescope_entriesFindUniqueOrThrowArgs} args - Arguments to find a Telescope_entries
     * @example
     * // Get one Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends telescope_entriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Telescope_entries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesFindFirstArgs} args - Arguments to find a Telescope_entries
     * @example
     * // Get one Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends telescope_entriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesFindFirstArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Telescope_entries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesFindFirstOrThrowArgs} args - Arguments to find a Telescope_entries
     * @example
     * // Get one Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends telescope_entriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Telescope_entries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findMany()
     * 
     * // Get first 10 Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.findMany({ take: 10 })
     * 
     * // Only select the `sequence`
     * const telescope_entriesWithSequenceOnly = await prisma.telescope_entries.findMany({ select: { sequence: true } })
     * 
    **/
    findMany<T extends telescope_entriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Telescope_entries.
     * @param {telescope_entriesCreateArgs} args - Arguments to create a Telescope_entries.
     * @example
     * // Create one Telescope_entries
     * const Telescope_entries = await prisma.telescope_entries.create({
     *   data: {
     *     // ... data to create a Telescope_entries
     *   }
     * })
     * 
    **/
    create<T extends telescope_entriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesCreateArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Telescope_entries.
     *     @param {telescope_entriesCreateManyArgs} args - Arguments to create many Telescope_entries.
     *     @example
     *     // Create many Telescope_entries
     *     const telescope_entries = await prisma.telescope_entries.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends telescope_entriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Telescope_entries.
     * @param {telescope_entriesDeleteArgs} args - Arguments to delete one Telescope_entries.
     * @example
     * // Delete one Telescope_entries
     * const Telescope_entries = await prisma.telescope_entries.delete({
     *   where: {
     *     // ... filter to delete one Telescope_entries
     *   }
     * })
     * 
    **/
    delete<T extends telescope_entriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesDeleteArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Telescope_entries.
     * @param {telescope_entriesUpdateArgs} args - Arguments to update one Telescope_entries.
     * @example
     * // Update one Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends telescope_entriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesUpdateArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Telescope_entries.
     * @param {telescope_entriesDeleteManyArgs} args - Arguments to filter Telescope_entries to delete.
     * @example
     * // Delete a few Telescope_entries
     * const { count } = await prisma.telescope_entries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends telescope_entriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, telescope_entriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Telescope_entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends telescope_entriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Telescope_entries.
     * @param {telescope_entriesUpsertArgs} args - Arguments to update or create a Telescope_entries.
     * @example
     * // Update or create a Telescope_entries
     * const telescope_entries = await prisma.telescope_entries.upsert({
     *   create: {
     *     // ... data to create a Telescope_entries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Telescope_entries we want to update
     *   }
     * })
    **/
    upsert<T extends telescope_entriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, telescope_entriesUpsertArgs<ExtArgs>>
    ): Prisma__telescope_entriesClient<$Result.GetResult<Prisma.$telescope_entriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Telescope_entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesCountArgs} args - Arguments to filter Telescope_entries to count.
     * @example
     * // Count the number of Telescope_entries
     * const count = await prisma.telescope_entries.count({
     *   where: {
     *     // ... the filter for the Telescope_entries we want to count
     *   }
     * })
    **/
    count<T extends telescope_entriesCountArgs>(
      args?: Subset<T, telescope_entriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Telescope_entriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Telescope_entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Telescope_entriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Telescope_entriesAggregateArgs>(args: Subset<T, Telescope_entriesAggregateArgs>): Prisma.PrismaPromise<GetTelescope_entriesAggregateType<T>>

    /**
     * Group by Telescope_entries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {telescope_entriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends telescope_entriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: telescope_entriesGroupByArgs['orderBy'] }
        : { orderBy?: telescope_entriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, telescope_entriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelescope_entriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the telescope_entries model
   */
  readonly fields: telescope_entriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for telescope_entries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__telescope_entriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the telescope_entries model
   */ 
  interface telescope_entriesFieldRefs {
    readonly sequence: FieldRef<"telescope_entries", 'BigInt'>
    readonly uuid: FieldRef<"telescope_entries", 'String'>
    readonly batch_id: FieldRef<"telescope_entries", 'String'>
    readonly family_hash: FieldRef<"telescope_entries", 'String'>
    readonly should_display_on_index: FieldRef<"telescope_entries", 'Boolean'>
    readonly type: FieldRef<"telescope_entries", 'String'>
    readonly content: FieldRef<"telescope_entries", 'String'>
    readonly created_at: FieldRef<"telescope_entries", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * telescope_entries findUnique
   */
  export type telescope_entriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter, which telescope_entries to fetch.
     */
    where: telescope_entriesWhereUniqueInput
  }

  /**
   * telescope_entries findUniqueOrThrow
   */
  export type telescope_entriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter, which telescope_entries to fetch.
     */
    where: telescope_entriesWhereUniqueInput
  }

  /**
   * telescope_entries findFirst
   */
  export type telescope_entriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter, which telescope_entries to fetch.
     */
    where?: telescope_entriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of telescope_entries to fetch.
     */
    orderBy?: telescope_entriesOrderByWithRelationInput | telescope_entriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for telescope_entries.
     */
    cursor?: telescope_entriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` telescope_entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` telescope_entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of telescope_entries.
     */
    distinct?: Telescope_entriesScalarFieldEnum | Telescope_entriesScalarFieldEnum[]
  }

  /**
   * telescope_entries findFirstOrThrow
   */
  export type telescope_entriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter, which telescope_entries to fetch.
     */
    where?: telescope_entriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of telescope_entries to fetch.
     */
    orderBy?: telescope_entriesOrderByWithRelationInput | telescope_entriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for telescope_entries.
     */
    cursor?: telescope_entriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` telescope_entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` telescope_entries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of telescope_entries.
     */
    distinct?: Telescope_entriesScalarFieldEnum | Telescope_entriesScalarFieldEnum[]
  }

  /**
   * telescope_entries findMany
   */
  export type telescope_entriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter, which telescope_entries to fetch.
     */
    where?: telescope_entriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of telescope_entries to fetch.
     */
    orderBy?: telescope_entriesOrderByWithRelationInput | telescope_entriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing telescope_entries.
     */
    cursor?: telescope_entriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` telescope_entries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` telescope_entries.
     */
    skip?: number
    distinct?: Telescope_entriesScalarFieldEnum | Telescope_entriesScalarFieldEnum[]
  }

  /**
   * telescope_entries create
   */
  export type telescope_entriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * The data needed to create a telescope_entries.
     */
    data: XOR<telescope_entriesCreateInput, telescope_entriesUncheckedCreateInput>
  }

  /**
   * telescope_entries createMany
   */
  export type telescope_entriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many telescope_entries.
     */
    data: telescope_entriesCreateManyInput | telescope_entriesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * telescope_entries update
   */
  export type telescope_entriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * The data needed to update a telescope_entries.
     */
    data: XOR<telescope_entriesUpdateInput, telescope_entriesUncheckedUpdateInput>
    /**
     * Choose, which telescope_entries to update.
     */
    where: telescope_entriesWhereUniqueInput
  }

  /**
   * telescope_entries updateMany
   */
  export type telescope_entriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update telescope_entries.
     */
    data: XOR<telescope_entriesUpdateManyMutationInput, telescope_entriesUncheckedUpdateManyInput>
    /**
     * Filter which telescope_entries to update
     */
    where?: telescope_entriesWhereInput
  }

  /**
   * telescope_entries upsert
   */
  export type telescope_entriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * The filter to search for the telescope_entries to update in case it exists.
     */
    where: telescope_entriesWhereUniqueInput
    /**
     * In case the telescope_entries found by the `where` argument doesn't exist, create a new telescope_entries with this data.
     */
    create: XOR<telescope_entriesCreateInput, telescope_entriesUncheckedCreateInput>
    /**
     * In case the telescope_entries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<telescope_entriesUpdateInput, telescope_entriesUncheckedUpdateInput>
  }

  /**
   * telescope_entries delete
   */
  export type telescope_entriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
    /**
     * Filter which telescope_entries to delete.
     */
    where: telescope_entriesWhereUniqueInput
  }

  /**
   * telescope_entries deleteMany
   */
  export type telescope_entriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which telescope_entries to delete
     */
    where?: telescope_entriesWhereInput
  }

  /**
   * telescope_entries without action
   */
  export type telescope_entriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the telescope_entries
     */
    select?: telescope_entriesSelect<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: bigint | null
  }

  export type UsersMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    email: string | null
    email_verified_at: Date | null
    password: string | null
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    email: string | null
    email_verified_at: Date | null
    password: string | null
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    email_verified_at: number
    password: number
    remember_token: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    remember_token?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: bigint
    name: string
    email: string
    email_verified_at: Date | null
    password: string
    remember_token: string | null
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    email_verified_at?: boolean
    password?: boolean
    remember_token?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    email_verified_at?: boolean
    password?: boolean
    remember_token?: boolean
    created_at?: boolean
    updated_at?: boolean
  }



  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      name: string
      email: string
      email_verified_at: Date | null
      password: string
      remember_token: string | null
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'BigInt'>
    readonly name: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly email_verified_at: FieldRef<"users", 'DateTime'>
    readonly password: FieldRef<"users", 'String'>
    readonly remember_token: FieldRef<"users", 'String'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CacheScalarFieldEnum: {
    key: 'key',
    value: 'value',
    expiration: 'expiration'
  };

  export type CacheScalarFieldEnum = (typeof CacheScalarFieldEnum)[keyof typeof CacheScalarFieldEnum]


  export const Cache_locksScalarFieldEnum: {
    key: 'key',
    owner: 'owner',
    expiration: 'expiration'
  };

  export type Cache_locksScalarFieldEnum = (typeof Cache_locksScalarFieldEnum)[keyof typeof Cache_locksScalarFieldEnum]


  export const Failed_jobsScalarFieldEnum: {
    id: 'id',
    uuid: 'uuid',
    connection: 'connection',
    queue: 'queue',
    payload: 'payload',
    exception: 'exception',
    failed_at: 'failed_at'
  };

  export type Failed_jobsScalarFieldEnum = (typeof Failed_jobsScalarFieldEnum)[keyof typeof Failed_jobsScalarFieldEnum]


  export const MigrationsScalarFieldEnum: {
    id: 'id',
    migration: 'migration',
    batch: 'batch'
  };

  export type MigrationsScalarFieldEnum = (typeof MigrationsScalarFieldEnum)[keyof typeof MigrationsScalarFieldEnum]


  export const Password_reset_tokensScalarFieldEnum: {
    email: 'email',
    token: 'token',
    created_at: 'created_at'
  };

  export type Password_reset_tokensScalarFieldEnum = (typeof Password_reset_tokensScalarFieldEnum)[keyof typeof Password_reset_tokensScalarFieldEnum]


  export const Payment_categoriesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Payment_categoriesScalarFieldEnum = (typeof Payment_categoriesScalarFieldEnum)[keyof typeof Payment_categoriesScalarFieldEnum]


  export const Payment_frequenciesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    color: 'color',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Payment_frequenciesScalarFieldEnum = (typeof Payment_frequenciesScalarFieldEnum)[keyof typeof Payment_frequenciesScalarFieldEnum]


  export const Payment_periodsScalarFieldEnum: {
    id: 'id',
    start_date: 'start_date',
    end_date: 'end_date',
    month: 'month',
    year: 'year',
    active: 'active',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Payment_periodsScalarFieldEnum = (typeof Payment_periodsScalarFieldEnum)[keyof typeof Payment_periodsScalarFieldEnum]


  export const Payment_platformsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    image_url: 'image_url',
    color: 'color',
    abbreviation: 'abbreviation',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Payment_platformsScalarFieldEnum = (typeof Payment_platformsScalarFieldEnum)[keyof typeof Payment_platformsScalarFieldEnum]


  export const Payment_recordsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    billing_date: 'billing_date',
    payment_date: 'payment_date',
    due_date: 'due_date',
    currency: 'currency',
    amount_usd: 'amount_usd',
    amount_clp: 'amount_clp',
    payment_period_id: 'payment_period_id',
    payment_platform_id: 'payment_platform_id',
    payment_frequency_id: 'payment_frequency_id',
    payment_category_id: 'payment_category_id',
    image_url: 'image_url',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at',
    monitored: 'monitored'
  };

  export type Payment_recordsScalarFieldEnum = (typeof Payment_recordsScalarFieldEnum)[keyof typeof Payment_recordsScalarFieldEnum]


  export const Payment_templatesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    billing_date: 'billing_date',
    due_date: 'due_date',
    currency: 'currency',
    amount_usd: 'amount_usd',
    amount_clp: 'amount_clp',
    payment_platform_id: 'payment_platform_id',
    payment_frequency_id: 'payment_frequency_id',
    payment_category_id: 'payment_category_id',
    monitored: 'monitored',
    description: 'description',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Payment_templatesScalarFieldEnum = (typeof Payment_templatesScalarFieldEnum)[keyof typeof Payment_templatesScalarFieldEnum]


  export const Personal_access_tokensScalarFieldEnum: {
    id: 'id',
    tokenable_type: 'tokenable_type',
    tokenable_id: 'tokenable_id',
    name: 'name',
    token: 'token',
    abilities: 'abilities',
    last_used_at: 'last_used_at',
    expires_at: 'expires_at',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Personal_access_tokensScalarFieldEnum = (typeof Personal_access_tokensScalarFieldEnum)[keyof typeof Personal_access_tokensScalarFieldEnum]


  export const Telescope_entriesScalarFieldEnum: {
    sequence: 'sequence',
    uuid: 'uuid',
    batch_id: 'batch_id',
    family_hash: 'family_hash',
    should_display_on_index: 'should_display_on_index',
    type: 'type',
    content: 'content',
    created_at: 'created_at'
  };

  export type Telescope_entriesScalarFieldEnum = (typeof Telescope_entriesScalarFieldEnum)[keyof typeof Telescope_entriesScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    email_verified_at: 'email_verified_at',
    password: 'password',
    remember_token: 'remember_token',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type cacheWhereInput = {
    AND?: cacheWhereInput | cacheWhereInput[]
    OR?: cacheWhereInput[]
    NOT?: cacheWhereInput | cacheWhereInput[]
    key?: StringFilter<"cache"> | string
    value?: StringFilter<"cache"> | string
    expiration?: IntFilter<"cache"> | number
  }

  export type cacheOrderByWithRelationInput = {
    key?: SortOrder
    value?: SortOrder
    expiration?: SortOrder
  }

  export type cacheWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: cacheWhereInput | cacheWhereInput[]
    OR?: cacheWhereInput[]
    NOT?: cacheWhereInput | cacheWhereInput[]
    value?: StringFilter<"cache"> | string
    expiration?: IntFilter<"cache"> | number
  }, "key">

  export type cacheOrderByWithAggregationInput = {
    key?: SortOrder
    value?: SortOrder
    expiration?: SortOrder
    _count?: cacheCountOrderByAggregateInput
    _avg?: cacheAvgOrderByAggregateInput
    _max?: cacheMaxOrderByAggregateInput
    _min?: cacheMinOrderByAggregateInput
    _sum?: cacheSumOrderByAggregateInput
  }

  export type cacheScalarWhereWithAggregatesInput = {
    AND?: cacheScalarWhereWithAggregatesInput | cacheScalarWhereWithAggregatesInput[]
    OR?: cacheScalarWhereWithAggregatesInput[]
    NOT?: cacheScalarWhereWithAggregatesInput | cacheScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"cache"> | string
    value?: StringWithAggregatesFilter<"cache"> | string
    expiration?: IntWithAggregatesFilter<"cache"> | number
  }

  export type cache_locksWhereInput = {
    AND?: cache_locksWhereInput | cache_locksWhereInput[]
    OR?: cache_locksWhereInput[]
    NOT?: cache_locksWhereInput | cache_locksWhereInput[]
    key?: StringFilter<"cache_locks"> | string
    owner?: StringFilter<"cache_locks"> | string
    expiration?: IntFilter<"cache_locks"> | number
  }

  export type cache_locksOrderByWithRelationInput = {
    key?: SortOrder
    owner?: SortOrder
    expiration?: SortOrder
  }

  export type cache_locksWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: cache_locksWhereInput | cache_locksWhereInput[]
    OR?: cache_locksWhereInput[]
    NOT?: cache_locksWhereInput | cache_locksWhereInput[]
    owner?: StringFilter<"cache_locks"> | string
    expiration?: IntFilter<"cache_locks"> | number
  }, "key">

  export type cache_locksOrderByWithAggregationInput = {
    key?: SortOrder
    owner?: SortOrder
    expiration?: SortOrder
    _count?: cache_locksCountOrderByAggregateInput
    _avg?: cache_locksAvgOrderByAggregateInput
    _max?: cache_locksMaxOrderByAggregateInput
    _min?: cache_locksMinOrderByAggregateInput
    _sum?: cache_locksSumOrderByAggregateInput
  }

  export type cache_locksScalarWhereWithAggregatesInput = {
    AND?: cache_locksScalarWhereWithAggregatesInput | cache_locksScalarWhereWithAggregatesInput[]
    OR?: cache_locksScalarWhereWithAggregatesInput[]
    NOT?: cache_locksScalarWhereWithAggregatesInput | cache_locksScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"cache_locks"> | string
    owner?: StringWithAggregatesFilter<"cache_locks"> | string
    expiration?: IntWithAggregatesFilter<"cache_locks"> | number
  }

  export type failed_jobsWhereInput = {
    AND?: failed_jobsWhereInput | failed_jobsWhereInput[]
    OR?: failed_jobsWhereInput[]
    NOT?: failed_jobsWhereInput | failed_jobsWhereInput[]
    id?: BigIntFilter<"failed_jobs"> | bigint | number
    uuid?: StringFilter<"failed_jobs"> | string
    connection?: StringFilter<"failed_jobs"> | string
    queue?: StringFilter<"failed_jobs"> | string
    payload?: StringFilter<"failed_jobs"> | string
    exception?: StringFilter<"failed_jobs"> | string
    failed_at?: DateTimeFilter<"failed_jobs"> | Date | string
  }

  export type failed_jobsOrderByWithRelationInput = {
    id?: SortOrder
    uuid?: SortOrder
    connection?: SortOrder
    queue?: SortOrder
    payload?: SortOrder
    exception?: SortOrder
    failed_at?: SortOrder
  }

  export type failed_jobsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    uuid?: string
    AND?: failed_jobsWhereInput | failed_jobsWhereInput[]
    OR?: failed_jobsWhereInput[]
    NOT?: failed_jobsWhereInput | failed_jobsWhereInput[]
    connection?: StringFilter<"failed_jobs"> | string
    queue?: StringFilter<"failed_jobs"> | string
    payload?: StringFilter<"failed_jobs"> | string
    exception?: StringFilter<"failed_jobs"> | string
    failed_at?: DateTimeFilter<"failed_jobs"> | Date | string
  }, "id" | "uuid">

  export type failed_jobsOrderByWithAggregationInput = {
    id?: SortOrder
    uuid?: SortOrder
    connection?: SortOrder
    queue?: SortOrder
    payload?: SortOrder
    exception?: SortOrder
    failed_at?: SortOrder
    _count?: failed_jobsCountOrderByAggregateInput
    _avg?: failed_jobsAvgOrderByAggregateInput
    _max?: failed_jobsMaxOrderByAggregateInput
    _min?: failed_jobsMinOrderByAggregateInput
    _sum?: failed_jobsSumOrderByAggregateInput
  }

  export type failed_jobsScalarWhereWithAggregatesInput = {
    AND?: failed_jobsScalarWhereWithAggregatesInput | failed_jobsScalarWhereWithAggregatesInput[]
    OR?: failed_jobsScalarWhereWithAggregatesInput[]
    NOT?: failed_jobsScalarWhereWithAggregatesInput | failed_jobsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"failed_jobs"> | bigint | number
    uuid?: StringWithAggregatesFilter<"failed_jobs"> | string
    connection?: StringWithAggregatesFilter<"failed_jobs"> | string
    queue?: StringWithAggregatesFilter<"failed_jobs"> | string
    payload?: StringWithAggregatesFilter<"failed_jobs"> | string
    exception?: StringWithAggregatesFilter<"failed_jobs"> | string
    failed_at?: DateTimeWithAggregatesFilter<"failed_jobs"> | Date | string
  }

  export type migrationsWhereInput = {
    AND?: migrationsWhereInput | migrationsWhereInput[]
    OR?: migrationsWhereInput[]
    NOT?: migrationsWhereInput | migrationsWhereInput[]
    id?: IntFilter<"migrations"> | number
    migration?: StringFilter<"migrations"> | string
    batch?: IntFilter<"migrations"> | number
  }

  export type migrationsOrderByWithRelationInput = {
    id?: SortOrder
    migration?: SortOrder
    batch?: SortOrder
  }

  export type migrationsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: migrationsWhereInput | migrationsWhereInput[]
    OR?: migrationsWhereInput[]
    NOT?: migrationsWhereInput | migrationsWhereInput[]
    migration?: StringFilter<"migrations"> | string
    batch?: IntFilter<"migrations"> | number
  }, "id">

  export type migrationsOrderByWithAggregationInput = {
    id?: SortOrder
    migration?: SortOrder
    batch?: SortOrder
    _count?: migrationsCountOrderByAggregateInput
    _avg?: migrationsAvgOrderByAggregateInput
    _max?: migrationsMaxOrderByAggregateInput
    _min?: migrationsMinOrderByAggregateInput
    _sum?: migrationsSumOrderByAggregateInput
  }

  export type migrationsScalarWhereWithAggregatesInput = {
    AND?: migrationsScalarWhereWithAggregatesInput | migrationsScalarWhereWithAggregatesInput[]
    OR?: migrationsScalarWhereWithAggregatesInput[]
    NOT?: migrationsScalarWhereWithAggregatesInput | migrationsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"migrations"> | number
    migration?: StringWithAggregatesFilter<"migrations"> | string
    batch?: IntWithAggregatesFilter<"migrations"> | number
  }

  export type password_reset_tokensWhereInput = {
    AND?: password_reset_tokensWhereInput | password_reset_tokensWhereInput[]
    OR?: password_reset_tokensWhereInput[]
    NOT?: password_reset_tokensWhereInput | password_reset_tokensWhereInput[]
    email?: StringFilter<"password_reset_tokens"> | string
    token?: StringFilter<"password_reset_tokens"> | string
    created_at?: DateTimeNullableFilter<"password_reset_tokens"> | Date | string | null
  }

  export type password_reset_tokensOrderByWithRelationInput = {
    email?: SortOrder
    token?: SortOrder
    created_at?: SortOrderInput | SortOrder
  }

  export type password_reset_tokensWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    AND?: password_reset_tokensWhereInput | password_reset_tokensWhereInput[]
    OR?: password_reset_tokensWhereInput[]
    NOT?: password_reset_tokensWhereInput | password_reset_tokensWhereInput[]
    token?: StringFilter<"password_reset_tokens"> | string
    created_at?: DateTimeNullableFilter<"password_reset_tokens"> | Date | string | null
  }, "email">

  export type password_reset_tokensOrderByWithAggregationInput = {
    email?: SortOrder
    token?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: password_reset_tokensCountOrderByAggregateInput
    _max?: password_reset_tokensMaxOrderByAggregateInput
    _min?: password_reset_tokensMinOrderByAggregateInput
  }

  export type password_reset_tokensScalarWhereWithAggregatesInput = {
    AND?: password_reset_tokensScalarWhereWithAggregatesInput | password_reset_tokensScalarWhereWithAggregatesInput[]
    OR?: password_reset_tokensScalarWhereWithAggregatesInput[]
    NOT?: password_reset_tokensScalarWhereWithAggregatesInput | password_reset_tokensScalarWhereWithAggregatesInput[]
    email?: StringWithAggregatesFilter<"password_reset_tokens"> | string
    token?: StringWithAggregatesFilter<"password_reset_tokens"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"password_reset_tokens"> | Date | string | null
  }

  export type payment_categoriesWhereInput = {
    AND?: payment_categoriesWhereInput | payment_categoriesWhereInput[]
    OR?: payment_categoriesWhereInput[]
    NOT?: payment_categoriesWhereInput | payment_categoriesWhereInput[]
    id?: BigIntFilter<"payment_categories"> | bigint | number
    name?: StringFilter<"payment_categories"> | string
    color?: StringFilter<"payment_categories"> | string
    description?: StringNullableFilter<"payment_categories"> | string | null
    created_at?: DateTimeNullableFilter<"payment_categories"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_categories"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }

  export type payment_categoriesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    payment_records?: payment_recordsOrderByRelationAggregateInput
    payment_templates?: payment_templatesOrderByRelationAggregateInput
  }

  export type payment_categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    name?: string
    AND?: payment_categoriesWhereInput | payment_categoriesWhereInput[]
    OR?: payment_categoriesWhereInput[]
    NOT?: payment_categoriesWhereInput | payment_categoriesWhereInput[]
    color?: StringFilter<"payment_categories"> | string
    description?: StringNullableFilter<"payment_categories"> | string | null
    created_at?: DateTimeNullableFilter<"payment_categories"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_categories"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }, "id" | "name">

  export type payment_categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: payment_categoriesCountOrderByAggregateInput
    _avg?: payment_categoriesAvgOrderByAggregateInput
    _max?: payment_categoriesMaxOrderByAggregateInput
    _min?: payment_categoriesMinOrderByAggregateInput
    _sum?: payment_categoriesSumOrderByAggregateInput
  }

  export type payment_categoriesScalarWhereWithAggregatesInput = {
    AND?: payment_categoriesScalarWhereWithAggregatesInput | payment_categoriesScalarWhereWithAggregatesInput[]
    OR?: payment_categoriesScalarWhereWithAggregatesInput[]
    NOT?: payment_categoriesScalarWhereWithAggregatesInput | payment_categoriesScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_categories"> | bigint | number
    name?: StringWithAggregatesFilter<"payment_categories"> | string
    color?: StringWithAggregatesFilter<"payment_categories"> | string
    description?: StringNullableWithAggregatesFilter<"payment_categories"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_categories"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_categories"> | Date | string | null
  }

  export type payment_frequenciesWhereInput = {
    AND?: payment_frequenciesWhereInput | payment_frequenciesWhereInput[]
    OR?: payment_frequenciesWhereInput[]
    NOT?: payment_frequenciesWhereInput | payment_frequenciesWhereInput[]
    id?: BigIntFilter<"payment_frequencies"> | bigint | number
    name?: StringFilter<"payment_frequencies"> | string
    color?: StringFilter<"payment_frequencies"> | string
    description?: StringNullableFilter<"payment_frequencies"> | string | null
    created_at?: DateTimeNullableFilter<"payment_frequencies"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_frequencies"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }

  export type payment_frequenciesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    payment_records?: payment_recordsOrderByRelationAggregateInput
    payment_templates?: payment_templatesOrderByRelationAggregateInput
  }

  export type payment_frequenciesWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    name?: string
    AND?: payment_frequenciesWhereInput | payment_frequenciesWhereInput[]
    OR?: payment_frequenciesWhereInput[]
    NOT?: payment_frequenciesWhereInput | payment_frequenciesWhereInput[]
    color?: StringFilter<"payment_frequencies"> | string
    description?: StringNullableFilter<"payment_frequencies"> | string | null
    created_at?: DateTimeNullableFilter<"payment_frequencies"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_frequencies"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }, "id" | "name">

  export type payment_frequenciesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: payment_frequenciesCountOrderByAggregateInput
    _avg?: payment_frequenciesAvgOrderByAggregateInput
    _max?: payment_frequenciesMaxOrderByAggregateInput
    _min?: payment_frequenciesMinOrderByAggregateInput
    _sum?: payment_frequenciesSumOrderByAggregateInput
  }

  export type payment_frequenciesScalarWhereWithAggregatesInput = {
    AND?: payment_frequenciesScalarWhereWithAggregatesInput | payment_frequenciesScalarWhereWithAggregatesInput[]
    OR?: payment_frequenciesScalarWhereWithAggregatesInput[]
    NOT?: payment_frequenciesScalarWhereWithAggregatesInput | payment_frequenciesScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_frequencies"> | bigint | number
    name?: StringWithAggregatesFilter<"payment_frequencies"> | string
    color?: StringWithAggregatesFilter<"payment_frequencies"> | string
    description?: StringNullableWithAggregatesFilter<"payment_frequencies"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_frequencies"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_frequencies"> | Date | string | null
  }

  export type payment_periodsWhereInput = {
    AND?: payment_periodsWhereInput | payment_periodsWhereInput[]
    OR?: payment_periodsWhereInput[]
    NOT?: payment_periodsWhereInput | payment_periodsWhereInput[]
    id?: BigIntFilter<"payment_periods"> | bigint | number
    start_date?: DateTimeFilter<"payment_periods"> | Date | string
    end_date?: DateTimeFilter<"payment_periods"> | Date | string
    month?: StringFilter<"payment_periods"> | string
    year?: IntFilter<"payment_periods"> | number
    active?: BoolFilter<"payment_periods"> | boolean
    description?: StringNullableFilter<"payment_periods"> | string | null
    created_at?: DateTimeNullableFilter<"payment_periods"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_periods"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
  }

  export type payment_periodsOrderByWithRelationInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    month?: SortOrder
    year?: SortOrder
    active?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    payment_records?: payment_recordsOrderByRelationAggregateInput
  }

  export type payment_periodsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: payment_periodsWhereInput | payment_periodsWhereInput[]
    OR?: payment_periodsWhereInput[]
    NOT?: payment_periodsWhereInput | payment_periodsWhereInput[]
    start_date?: DateTimeFilter<"payment_periods"> | Date | string
    end_date?: DateTimeFilter<"payment_periods"> | Date | string
    month?: StringFilter<"payment_periods"> | string
    year?: IntFilter<"payment_periods"> | number
    active?: BoolFilter<"payment_periods"> | boolean
    description?: StringNullableFilter<"payment_periods"> | string | null
    created_at?: DateTimeNullableFilter<"payment_periods"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_periods"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
  }, "id">

  export type payment_periodsOrderByWithAggregationInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    month?: SortOrder
    year?: SortOrder
    active?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: payment_periodsCountOrderByAggregateInput
    _avg?: payment_periodsAvgOrderByAggregateInput
    _max?: payment_periodsMaxOrderByAggregateInput
    _min?: payment_periodsMinOrderByAggregateInput
    _sum?: payment_periodsSumOrderByAggregateInput
  }

  export type payment_periodsScalarWhereWithAggregatesInput = {
    AND?: payment_periodsScalarWhereWithAggregatesInput | payment_periodsScalarWhereWithAggregatesInput[]
    OR?: payment_periodsScalarWhereWithAggregatesInput[]
    NOT?: payment_periodsScalarWhereWithAggregatesInput | payment_periodsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_periods"> | bigint | number
    start_date?: DateTimeWithAggregatesFilter<"payment_periods"> | Date | string
    end_date?: DateTimeWithAggregatesFilter<"payment_periods"> | Date | string
    month?: StringWithAggregatesFilter<"payment_periods"> | string
    year?: IntWithAggregatesFilter<"payment_periods"> | number
    active?: BoolWithAggregatesFilter<"payment_periods"> | boolean
    description?: StringNullableWithAggregatesFilter<"payment_periods"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_periods"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_periods"> | Date | string | null
  }

  export type payment_platformsWhereInput = {
    AND?: payment_platformsWhereInput | payment_platformsWhereInput[]
    OR?: payment_platformsWhereInput[]
    NOT?: payment_platformsWhereInput | payment_platformsWhereInput[]
    id?: BigIntFilter<"payment_platforms"> | bigint | number
    name?: StringFilter<"payment_platforms"> | string
    description?: StringNullableFilter<"payment_platforms"> | string | null
    image_url?: StringNullableFilter<"payment_platforms"> | string | null
    color?: StringFilter<"payment_platforms"> | string
    abbreviation?: StringFilter<"payment_platforms"> | string
    created_at?: DateTimeNullableFilter<"payment_platforms"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_platforms"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }

  export type payment_platformsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    color?: SortOrder
    abbreviation?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    payment_records?: payment_recordsOrderByRelationAggregateInput
    payment_templates?: payment_templatesOrderByRelationAggregateInput
  }

  export type payment_platformsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    name?: string
    AND?: payment_platformsWhereInput | payment_platformsWhereInput[]
    OR?: payment_platformsWhereInput[]
    NOT?: payment_platformsWhereInput | payment_platformsWhereInput[]
    description?: StringNullableFilter<"payment_platforms"> | string | null
    image_url?: StringNullableFilter<"payment_platforms"> | string | null
    color?: StringFilter<"payment_platforms"> | string
    abbreviation?: StringFilter<"payment_platforms"> | string
    created_at?: DateTimeNullableFilter<"payment_platforms"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_platforms"> | Date | string | null
    payment_records?: Payment_recordsListRelationFilter
    payment_templates?: Payment_templatesListRelationFilter
  }, "id" | "name">

  export type payment_platformsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    image_url?: SortOrderInput | SortOrder
    color?: SortOrder
    abbreviation?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: payment_platformsCountOrderByAggregateInput
    _avg?: payment_platformsAvgOrderByAggregateInput
    _max?: payment_platformsMaxOrderByAggregateInput
    _min?: payment_platformsMinOrderByAggregateInput
    _sum?: payment_platformsSumOrderByAggregateInput
  }

  export type payment_platformsScalarWhereWithAggregatesInput = {
    AND?: payment_platformsScalarWhereWithAggregatesInput | payment_platformsScalarWhereWithAggregatesInput[]
    OR?: payment_platformsScalarWhereWithAggregatesInput[]
    NOT?: payment_platformsScalarWhereWithAggregatesInput | payment_platformsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_platforms"> | bigint | number
    name?: StringWithAggregatesFilter<"payment_platforms"> | string
    description?: StringNullableWithAggregatesFilter<"payment_platforms"> | string | null
    image_url?: StringNullableWithAggregatesFilter<"payment_platforms"> | string | null
    color?: StringWithAggregatesFilter<"payment_platforms"> | string
    abbreviation?: StringWithAggregatesFilter<"payment_platforms"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_platforms"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_platforms"> | Date | string | null
  }

  export type payment_recordsWhereInput = {
    AND?: payment_recordsWhereInput | payment_recordsWhereInput[]
    OR?: payment_recordsWhereInput[]
    NOT?: payment_recordsWhereInput | payment_recordsWhereInput[]
    id?: BigIntFilter<"payment_records"> | bigint | number
    name?: StringFilter<"payment_records"> | string
    billing_date?: DateTimeFilter<"payment_records"> | Date | string
    payment_date?: DateTimeFilter<"payment_records"> | Date | string
    due_date?: DateTimeFilter<"payment_records"> | Date | string
    currency?: StringFilter<"payment_records"> | string
    amount_usd?: FloatFilter<"payment_records"> | number
    amount_clp?: FloatFilter<"payment_records"> | number
    payment_period_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_platform_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_records"> | bigint | number
    image_url?: StringNullableFilter<"payment_records"> | string | null
    description?: StringNullableFilter<"payment_records"> | string | null
    created_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    monitored?: BoolFilter<"payment_records"> | boolean
    payment_categories?: XOR<Payment_categoriesRelationFilter, payment_categoriesWhereInput>
    payment_frequencies?: XOR<Payment_frequenciesRelationFilter, payment_frequenciesWhereInput>
    payment_periods?: XOR<Payment_periodsRelationFilter, payment_periodsWhereInput>
    payment_platforms?: XOR<Payment_platformsRelationFilter, payment_platformsWhereInput>
  }

  export type payment_recordsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    payment_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    image_url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    monitored?: SortOrder
    payment_categories?: payment_categoriesOrderByWithRelationInput
    payment_frequencies?: payment_frequenciesOrderByWithRelationInput
    payment_periods?: payment_periodsOrderByWithRelationInput
    payment_platforms?: payment_platformsOrderByWithRelationInput
  }

  export type payment_recordsWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: payment_recordsWhereInput | payment_recordsWhereInput[]
    OR?: payment_recordsWhereInput[]
    NOT?: payment_recordsWhereInput | payment_recordsWhereInput[]
    name?: StringFilter<"payment_records"> | string
    billing_date?: DateTimeFilter<"payment_records"> | Date | string
    payment_date?: DateTimeFilter<"payment_records"> | Date | string
    due_date?: DateTimeFilter<"payment_records"> | Date | string
    currency?: StringFilter<"payment_records"> | string
    amount_usd?: FloatFilter<"payment_records"> | number
    amount_clp?: FloatFilter<"payment_records"> | number
    payment_period_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_platform_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_records"> | bigint | number
    image_url?: StringNullableFilter<"payment_records"> | string | null
    description?: StringNullableFilter<"payment_records"> | string | null
    created_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    monitored?: BoolFilter<"payment_records"> | boolean
    payment_categories?: XOR<Payment_categoriesRelationFilter, payment_categoriesWhereInput>
    payment_frequencies?: XOR<Payment_frequenciesRelationFilter, payment_frequenciesWhereInput>
    payment_periods?: XOR<Payment_periodsRelationFilter, payment_periodsWhereInput>
    payment_platforms?: XOR<Payment_platformsRelationFilter, payment_platformsWhereInput>
  }, "id">

  export type payment_recordsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    payment_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    image_url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    monitored?: SortOrder
    _count?: payment_recordsCountOrderByAggregateInput
    _avg?: payment_recordsAvgOrderByAggregateInput
    _max?: payment_recordsMaxOrderByAggregateInput
    _min?: payment_recordsMinOrderByAggregateInput
    _sum?: payment_recordsSumOrderByAggregateInput
  }

  export type payment_recordsScalarWhereWithAggregatesInput = {
    AND?: payment_recordsScalarWhereWithAggregatesInput | payment_recordsScalarWhereWithAggregatesInput[]
    OR?: payment_recordsScalarWhereWithAggregatesInput[]
    NOT?: payment_recordsScalarWhereWithAggregatesInput | payment_recordsScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_records"> | bigint | number
    name?: StringWithAggregatesFilter<"payment_records"> | string
    billing_date?: DateTimeWithAggregatesFilter<"payment_records"> | Date | string
    payment_date?: DateTimeWithAggregatesFilter<"payment_records"> | Date | string
    due_date?: DateTimeWithAggregatesFilter<"payment_records"> | Date | string
    currency?: StringWithAggregatesFilter<"payment_records"> | string
    amount_usd?: FloatWithAggregatesFilter<"payment_records"> | number
    amount_clp?: FloatWithAggregatesFilter<"payment_records"> | number
    payment_period_id?: BigIntWithAggregatesFilter<"payment_records"> | bigint | number
    payment_platform_id?: BigIntWithAggregatesFilter<"payment_records"> | bigint | number
    payment_frequency_id?: BigIntWithAggregatesFilter<"payment_records"> | bigint | number
    payment_category_id?: BigIntWithAggregatesFilter<"payment_records"> | bigint | number
    image_url?: StringNullableWithAggregatesFilter<"payment_records"> | string | null
    description?: StringNullableWithAggregatesFilter<"payment_records"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_records"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_records"> | Date | string | null
    monitored?: BoolWithAggregatesFilter<"payment_records"> | boolean
  }

  export type payment_templatesWhereInput = {
    AND?: payment_templatesWhereInput | payment_templatesWhereInput[]
    OR?: payment_templatesWhereInput[]
    NOT?: payment_templatesWhereInput | payment_templatesWhereInput[]
    id?: BigIntFilter<"payment_templates"> | bigint | number
    name?: StringFilter<"payment_templates"> | string
    billing_date?: DateTimeFilter<"payment_templates"> | Date | string
    due_date?: DateTimeFilter<"payment_templates"> | Date | string
    currency?: StringFilter<"payment_templates"> | string
    amount_usd?: FloatFilter<"payment_templates"> | number
    amount_clp?: FloatFilter<"payment_templates"> | number
    payment_platform_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_templates"> | bigint | number
    monitored?: BoolFilter<"payment_templates"> | boolean
    description?: StringNullableFilter<"payment_templates"> | string | null
    created_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
    payment_categories?: XOR<Payment_categoriesRelationFilter, payment_categoriesWhereInput>
    payment_frequencies?: XOR<Payment_frequenciesRelationFilter, payment_frequenciesWhereInput>
    payment_platforms?: XOR<Payment_platformsRelationFilter, payment_platformsWhereInput>
  }

  export type payment_templatesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    monitored?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    payment_categories?: payment_categoriesOrderByWithRelationInput
    payment_frequencies?: payment_frequenciesOrderByWithRelationInput
    payment_platforms?: payment_platformsOrderByWithRelationInput
  }

  export type payment_templatesWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: payment_templatesWhereInput | payment_templatesWhereInput[]
    OR?: payment_templatesWhereInput[]
    NOT?: payment_templatesWhereInput | payment_templatesWhereInput[]
    name?: StringFilter<"payment_templates"> | string
    billing_date?: DateTimeFilter<"payment_templates"> | Date | string
    due_date?: DateTimeFilter<"payment_templates"> | Date | string
    currency?: StringFilter<"payment_templates"> | string
    amount_usd?: FloatFilter<"payment_templates"> | number
    amount_clp?: FloatFilter<"payment_templates"> | number
    payment_platform_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_templates"> | bigint | number
    monitored?: BoolFilter<"payment_templates"> | boolean
    description?: StringNullableFilter<"payment_templates"> | string | null
    created_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
    payment_categories?: XOR<Payment_categoriesRelationFilter, payment_categoriesWhereInput>
    payment_frequencies?: XOR<Payment_frequenciesRelationFilter, payment_frequenciesWhereInput>
    payment_platforms?: XOR<Payment_platformsRelationFilter, payment_platformsWhereInput>
  }, "id">

  export type payment_templatesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    monitored?: SortOrder
    description?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: payment_templatesCountOrderByAggregateInput
    _avg?: payment_templatesAvgOrderByAggregateInput
    _max?: payment_templatesMaxOrderByAggregateInput
    _min?: payment_templatesMinOrderByAggregateInput
    _sum?: payment_templatesSumOrderByAggregateInput
  }

  export type payment_templatesScalarWhereWithAggregatesInput = {
    AND?: payment_templatesScalarWhereWithAggregatesInput | payment_templatesScalarWhereWithAggregatesInput[]
    OR?: payment_templatesScalarWhereWithAggregatesInput[]
    NOT?: payment_templatesScalarWhereWithAggregatesInput | payment_templatesScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"payment_templates"> | bigint | number
    name?: StringWithAggregatesFilter<"payment_templates"> | string
    billing_date?: DateTimeWithAggregatesFilter<"payment_templates"> | Date | string
    due_date?: DateTimeWithAggregatesFilter<"payment_templates"> | Date | string
    currency?: StringWithAggregatesFilter<"payment_templates"> | string
    amount_usd?: FloatWithAggregatesFilter<"payment_templates"> | number
    amount_clp?: FloatWithAggregatesFilter<"payment_templates"> | number
    payment_platform_id?: BigIntWithAggregatesFilter<"payment_templates"> | bigint | number
    payment_frequency_id?: BigIntWithAggregatesFilter<"payment_templates"> | bigint | number
    payment_category_id?: BigIntWithAggregatesFilter<"payment_templates"> | bigint | number
    monitored?: BoolWithAggregatesFilter<"payment_templates"> | boolean
    description?: StringNullableWithAggregatesFilter<"payment_templates"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"payment_templates"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"payment_templates"> | Date | string | null
  }

  export type personal_access_tokensWhereInput = {
    AND?: personal_access_tokensWhereInput | personal_access_tokensWhereInput[]
    OR?: personal_access_tokensWhereInput[]
    NOT?: personal_access_tokensWhereInput | personal_access_tokensWhereInput[]
    id?: BigIntFilter<"personal_access_tokens"> | bigint | number
    tokenable_type?: StringFilter<"personal_access_tokens"> | string
    tokenable_id?: BigIntFilter<"personal_access_tokens"> | bigint | number
    name?: StringFilter<"personal_access_tokens"> | string
    token?: StringFilter<"personal_access_tokens"> | string
    abilities?: StringNullableFilter<"personal_access_tokens"> | string | null
    last_used_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    created_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
  }

  export type personal_access_tokensOrderByWithRelationInput = {
    id?: SortOrder
    tokenable_type?: SortOrder
    tokenable_id?: SortOrder
    name?: SortOrder
    token?: SortOrder
    abilities?: SortOrderInput | SortOrder
    last_used_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
  }

  export type personal_access_tokensWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    token?: string
    AND?: personal_access_tokensWhereInput | personal_access_tokensWhereInput[]
    OR?: personal_access_tokensWhereInput[]
    NOT?: personal_access_tokensWhereInput | personal_access_tokensWhereInput[]
    tokenable_type?: StringFilter<"personal_access_tokens"> | string
    tokenable_id?: BigIntFilter<"personal_access_tokens"> | bigint | number
    name?: StringFilter<"personal_access_tokens"> | string
    abilities?: StringNullableFilter<"personal_access_tokens"> | string | null
    last_used_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    expires_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    created_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"personal_access_tokens"> | Date | string | null
  }, "id" | "token">

  export type personal_access_tokensOrderByWithAggregationInput = {
    id?: SortOrder
    tokenable_type?: SortOrder
    tokenable_id?: SortOrder
    name?: SortOrder
    token?: SortOrder
    abilities?: SortOrderInput | SortOrder
    last_used_at?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: personal_access_tokensCountOrderByAggregateInput
    _avg?: personal_access_tokensAvgOrderByAggregateInput
    _max?: personal_access_tokensMaxOrderByAggregateInput
    _min?: personal_access_tokensMinOrderByAggregateInput
    _sum?: personal_access_tokensSumOrderByAggregateInput
  }

  export type personal_access_tokensScalarWhereWithAggregatesInput = {
    AND?: personal_access_tokensScalarWhereWithAggregatesInput | personal_access_tokensScalarWhereWithAggregatesInput[]
    OR?: personal_access_tokensScalarWhereWithAggregatesInput[]
    NOT?: personal_access_tokensScalarWhereWithAggregatesInput | personal_access_tokensScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"personal_access_tokens"> | bigint | number
    tokenable_type?: StringWithAggregatesFilter<"personal_access_tokens"> | string
    tokenable_id?: BigIntWithAggregatesFilter<"personal_access_tokens"> | bigint | number
    name?: StringWithAggregatesFilter<"personal_access_tokens"> | string
    token?: StringWithAggregatesFilter<"personal_access_tokens"> | string
    abilities?: StringNullableWithAggregatesFilter<"personal_access_tokens"> | string | null
    last_used_at?: DateTimeNullableWithAggregatesFilter<"personal_access_tokens"> | Date | string | null
    expires_at?: DateTimeNullableWithAggregatesFilter<"personal_access_tokens"> | Date | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"personal_access_tokens"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"personal_access_tokens"> | Date | string | null
  }

  export type telescope_entriesWhereInput = {
    AND?: telescope_entriesWhereInput | telescope_entriesWhereInput[]
    OR?: telescope_entriesWhereInput[]
    NOT?: telescope_entriesWhereInput | telescope_entriesWhereInput[]
    sequence?: BigIntFilter<"telescope_entries"> | bigint | number
    uuid?: StringFilter<"telescope_entries"> | string
    batch_id?: StringFilter<"telescope_entries"> | string
    family_hash?: StringNullableFilter<"telescope_entries"> | string | null
    should_display_on_index?: BoolFilter<"telescope_entries"> | boolean
    type?: StringFilter<"telescope_entries"> | string
    content?: StringFilter<"telescope_entries"> | string
    created_at?: DateTimeNullableFilter<"telescope_entries"> | Date | string | null
  }

  export type telescope_entriesOrderByWithRelationInput = {
    sequence?: SortOrder
    uuid?: SortOrder
    batch_id?: SortOrder
    family_hash?: SortOrderInput | SortOrder
    should_display_on_index?: SortOrder
    type?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
  }

  export type telescope_entriesWhereUniqueInput = Prisma.AtLeast<{
    sequence?: bigint | number
    uuid?: string
    AND?: telescope_entriesWhereInput | telescope_entriesWhereInput[]
    OR?: telescope_entriesWhereInput[]
    NOT?: telescope_entriesWhereInput | telescope_entriesWhereInput[]
    batch_id?: StringFilter<"telescope_entries"> | string
    family_hash?: StringNullableFilter<"telescope_entries"> | string | null
    should_display_on_index?: BoolFilter<"telescope_entries"> | boolean
    type?: StringFilter<"telescope_entries"> | string
    content?: StringFilter<"telescope_entries"> | string
    created_at?: DateTimeNullableFilter<"telescope_entries"> | Date | string | null
  }, "sequence" | "uuid">

  export type telescope_entriesOrderByWithAggregationInput = {
    sequence?: SortOrder
    uuid?: SortOrder
    batch_id?: SortOrder
    family_hash?: SortOrderInput | SortOrder
    should_display_on_index?: SortOrder
    type?: SortOrder
    content?: SortOrder
    created_at?: SortOrderInput | SortOrder
    _count?: telescope_entriesCountOrderByAggregateInput
    _avg?: telescope_entriesAvgOrderByAggregateInput
    _max?: telescope_entriesMaxOrderByAggregateInput
    _min?: telescope_entriesMinOrderByAggregateInput
    _sum?: telescope_entriesSumOrderByAggregateInput
  }

  export type telescope_entriesScalarWhereWithAggregatesInput = {
    AND?: telescope_entriesScalarWhereWithAggregatesInput | telescope_entriesScalarWhereWithAggregatesInput[]
    OR?: telescope_entriesScalarWhereWithAggregatesInput[]
    NOT?: telescope_entriesScalarWhereWithAggregatesInput | telescope_entriesScalarWhereWithAggregatesInput[]
    sequence?: BigIntWithAggregatesFilter<"telescope_entries"> | bigint | number
    uuid?: StringWithAggregatesFilter<"telescope_entries"> | string
    batch_id?: StringWithAggregatesFilter<"telescope_entries"> | string
    family_hash?: StringNullableWithAggregatesFilter<"telescope_entries"> | string | null
    should_display_on_index?: BoolWithAggregatesFilter<"telescope_entries"> | boolean
    type?: StringWithAggregatesFilter<"telescope_entries"> | string
    content?: StringWithAggregatesFilter<"telescope_entries"> | string
    created_at?: DateTimeNullableWithAggregatesFilter<"telescope_entries"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: BigIntFilter<"users"> | bigint | number
    name?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    email_verified_at?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    remember_token?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    password?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    email?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    name?: StringFilter<"users"> | string
    email_verified_at?: DateTimeNullableFilter<"users"> | Date | string | null
    password?: StringFilter<"users"> | string
    remember_token?: StringNullableFilter<"users"> | string | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
  }, "id" | "email">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrderInput | SortOrder
    password?: SortOrder
    remember_token?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"users"> | bigint | number
    name?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    email_verified_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    password?: StringWithAggregatesFilter<"users"> | string
    remember_token?: StringNullableWithAggregatesFilter<"users"> | string | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
  }

  export type cacheCreateInput = {
    key: string
    value: string
    expiration: number
  }

  export type cacheUncheckedCreateInput = {
    key: string
    value: string
    expiration: number
  }

  export type cacheUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cacheUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cacheCreateManyInput = {
    key: string
    value: string
    expiration: number
  }

  export type cacheUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cacheUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cache_locksCreateInput = {
    key: string
    owner: string
    expiration: number
  }

  export type cache_locksUncheckedCreateInput = {
    key: string
    owner: string
    expiration: number
  }

  export type cache_locksUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cache_locksUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cache_locksCreateManyInput = {
    key: string
    owner: string
    expiration: number
  }

  export type cache_locksUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type cache_locksUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    owner?: StringFieldUpdateOperationsInput | string
    expiration?: IntFieldUpdateOperationsInput | number
  }

  export type failed_jobsCreateInput = {
    id?: bigint | number
    uuid: string
    connection: string
    queue: string
    payload: string
    exception: string
    failed_at?: Date | string
  }

  export type failed_jobsUncheckedCreateInput = {
    id?: bigint | number
    uuid: string
    connection: string
    queue: string
    payload: string
    exception: string
    failed_at?: Date | string
  }

  export type failed_jobsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    connection?: StringFieldUpdateOperationsInput | string
    queue?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    exception?: StringFieldUpdateOperationsInput | string
    failed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type failed_jobsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    connection?: StringFieldUpdateOperationsInput | string
    queue?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    exception?: StringFieldUpdateOperationsInput | string
    failed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type failed_jobsCreateManyInput = {
    id?: bigint | number
    uuid: string
    connection: string
    queue: string
    payload: string
    exception: string
    failed_at?: Date | string
  }

  export type failed_jobsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    connection?: StringFieldUpdateOperationsInput | string
    queue?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    exception?: StringFieldUpdateOperationsInput | string
    failed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type failed_jobsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    connection?: StringFieldUpdateOperationsInput | string
    queue?: StringFieldUpdateOperationsInput | string
    payload?: StringFieldUpdateOperationsInput | string
    exception?: StringFieldUpdateOperationsInput | string
    failed_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type migrationsCreateInput = {
    migration: string
    batch: number
  }

  export type migrationsUncheckedCreateInput = {
    id?: number
    migration: string
    batch: number
  }

  export type migrationsUpdateInput = {
    migration?: StringFieldUpdateOperationsInput | string
    batch?: IntFieldUpdateOperationsInput | number
  }

  export type migrationsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    migration?: StringFieldUpdateOperationsInput | string
    batch?: IntFieldUpdateOperationsInput | number
  }

  export type migrationsCreateManyInput = {
    id?: number
    migration: string
    batch: number
  }

  export type migrationsUpdateManyMutationInput = {
    migration?: StringFieldUpdateOperationsInput | string
    batch?: IntFieldUpdateOperationsInput | number
  }

  export type migrationsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    migration?: StringFieldUpdateOperationsInput | string
    batch?: IntFieldUpdateOperationsInput | number
  }

  export type password_reset_tokensCreateInput = {
    email: string
    token: string
    created_at?: Date | string | null
  }

  export type password_reset_tokensUncheckedCreateInput = {
    email: string
    token: string
    created_at?: Date | string | null
  }

  export type password_reset_tokensUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type password_reset_tokensUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type password_reset_tokensCreateManyInput = {
    email: string
    token: string
    created_at?: Date | string | null
  }

  export type password_reset_tokensUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type password_reset_tokensUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_categoriesCreateInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_categoriesInput
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesUncheckedCreateInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_categoriesInput
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_categoriesNestedInput
    payment_templates?: payment_templatesUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_categoriesUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_categoriesNestedInput
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_categoriesCreateManyInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_categoriesUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_categoriesUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_frequenciesCreateInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_frequenciesInput
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesUncheckedCreateInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_frequenciesInput
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_frequenciesNestedInput
    payment_templates?: payment_templatesUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_frequenciesUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_frequenciesNestedInput
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_frequenciesCreateManyInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_frequenciesUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_frequenciesUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_periodsCreateInput = {
    id?: bigint | number
    start_date: Date | string
    end_date: Date | string
    month: string
    year: number
    active: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_periodsInput
  }

  export type payment_periodsUncheckedCreateInput = {
    id?: bigint | number
    start_date: Date | string
    end_date: Date | string
    month: string
    year: number
    active: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_periodsInput
  }

  export type payment_periodsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_periodsNestedInput
  }

  export type payment_periodsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_periodsNestedInput
  }

  export type payment_periodsCreateManyInput = {
    id?: bigint | number
    start_date: Date | string
    end_date: Date | string
    month: string
    year: number
    active: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_periodsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_periodsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_platformsCreateInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_platformsInput
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsUncheckedCreateInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_platformsInput
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_platformsNestedInput
    payment_templates?: payment_templatesUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_platformsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_platformsNestedInput
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_platformsCreateManyInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_platformsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_platformsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_recordsCreateInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_recordsInput
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_recordsInput
    payment_periods: payment_periodsCreateNestedOneWithoutPayment_recordsInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordsUncheckedCreateInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_periods?: payment_periodsUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsCreateManyInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_templatesCreateInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_templatesInput
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_templatesInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_templatesInput
  }

  export type payment_templatesUncheckedCreateInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_templatesUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_templatesNestedInput
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_templatesNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_templatesNestedInput
  }

  export type payment_templatesUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_templatesCreateManyInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_templatesUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_templatesUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type personal_access_tokensCreateInput = {
    id?: bigint | number
    tokenable_type: string
    tokenable_id: bigint | number
    name: string
    token: string
    abilities?: string | null
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type personal_access_tokensUncheckedCreateInput = {
    id?: bigint | number
    tokenable_type: string
    tokenable_id: bigint | number
    name: string
    token: string
    abilities?: string | null
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type personal_access_tokensUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    tokenable_type?: StringFieldUpdateOperationsInput | string
    tokenable_id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    abilities?: NullableStringFieldUpdateOperationsInput | string | null
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type personal_access_tokensUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    tokenable_type?: StringFieldUpdateOperationsInput | string
    tokenable_id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    abilities?: NullableStringFieldUpdateOperationsInput | string | null
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type personal_access_tokensCreateManyInput = {
    id?: bigint | number
    tokenable_type: string
    tokenable_id: bigint | number
    name: string
    token: string
    abilities?: string | null
    last_used_at?: Date | string | null
    expires_at?: Date | string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type personal_access_tokensUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    tokenable_type?: StringFieldUpdateOperationsInput | string
    tokenable_id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    abilities?: NullableStringFieldUpdateOperationsInput | string | null
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type personal_access_tokensUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    tokenable_type?: StringFieldUpdateOperationsInput | string
    tokenable_id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    abilities?: NullableStringFieldUpdateOperationsInput | string | null
    last_used_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expires_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type telescope_entriesCreateInput = {
    sequence?: bigint | number
    uuid: string
    batch_id: string
    family_hash?: string | null
    should_display_on_index?: boolean
    type: string
    content: string
    created_at?: Date | string | null
  }

  export type telescope_entriesUncheckedCreateInput = {
    sequence?: bigint | number
    uuid: string
    batch_id: string
    family_hash?: string | null
    should_display_on_index?: boolean
    type: string
    content: string
    created_at?: Date | string | null
  }

  export type telescope_entriesUpdateInput = {
    sequence?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    batch_id?: StringFieldUpdateOperationsInput | string
    family_hash?: NullableStringFieldUpdateOperationsInput | string | null
    should_display_on_index?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type telescope_entriesUncheckedUpdateInput = {
    sequence?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    batch_id?: StringFieldUpdateOperationsInput | string
    family_hash?: NullableStringFieldUpdateOperationsInput | string | null
    should_display_on_index?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type telescope_entriesCreateManyInput = {
    sequence?: bigint | number
    uuid: string
    batch_id: string
    family_hash?: string | null
    should_display_on_index?: boolean
    type: string
    content: string
    created_at?: Date | string | null
  }

  export type telescope_entriesUpdateManyMutationInput = {
    sequence?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    batch_id?: StringFieldUpdateOperationsInput | string
    family_hash?: NullableStringFieldUpdateOperationsInput | string | null
    should_display_on_index?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type telescope_entriesUncheckedUpdateManyInput = {
    sequence?: BigIntFieldUpdateOperationsInput | bigint | number
    uuid?: StringFieldUpdateOperationsInput | string
    batch_id?: StringFieldUpdateOperationsInput | string
    family_hash?: NullableStringFieldUpdateOperationsInput | string | null
    should_display_on_index?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUncheckedCreateInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateManyInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    remember_token?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    remember_token?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type cacheCountOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    expiration?: SortOrder
  }

  export type cacheAvgOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type cacheMaxOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    expiration?: SortOrder
  }

  export type cacheMinOrderByAggregateInput = {
    key?: SortOrder
    value?: SortOrder
    expiration?: SortOrder
  }

  export type cacheSumOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type cache_locksCountOrderByAggregateInput = {
    key?: SortOrder
    owner?: SortOrder
    expiration?: SortOrder
  }

  export type cache_locksAvgOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type cache_locksMaxOrderByAggregateInput = {
    key?: SortOrder
    owner?: SortOrder
    expiration?: SortOrder
  }

  export type cache_locksMinOrderByAggregateInput = {
    key?: SortOrder
    owner?: SortOrder
    expiration?: SortOrder
  }

  export type cache_locksSumOrderByAggregateInput = {
    expiration?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type failed_jobsCountOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    connection?: SortOrder
    queue?: SortOrder
    payload?: SortOrder
    exception?: SortOrder
    failed_at?: SortOrder
  }

  export type failed_jobsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type failed_jobsMaxOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    connection?: SortOrder
    queue?: SortOrder
    payload?: SortOrder
    exception?: SortOrder
    failed_at?: SortOrder
  }

  export type failed_jobsMinOrderByAggregateInput = {
    id?: SortOrder
    uuid?: SortOrder
    connection?: SortOrder
    queue?: SortOrder
    payload?: SortOrder
    exception?: SortOrder
    failed_at?: SortOrder
  }

  export type failed_jobsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type migrationsCountOrderByAggregateInput = {
    id?: SortOrder
    migration?: SortOrder
    batch?: SortOrder
  }

  export type migrationsAvgOrderByAggregateInput = {
    id?: SortOrder
    batch?: SortOrder
  }

  export type migrationsMaxOrderByAggregateInput = {
    id?: SortOrder
    migration?: SortOrder
    batch?: SortOrder
  }

  export type migrationsMinOrderByAggregateInput = {
    id?: SortOrder
    migration?: SortOrder
    batch?: SortOrder
  }

  export type migrationsSumOrderByAggregateInput = {
    id?: SortOrder
    batch?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type password_reset_tokensCountOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type password_reset_tokensMaxOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type password_reset_tokensMinOrderByAggregateInput = {
    email?: SortOrder
    token?: SortOrder
    created_at?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type Payment_recordsListRelationFilter = {
    every?: payment_recordsWhereInput
    some?: payment_recordsWhereInput
    none?: payment_recordsWhereInput
  }

  export type Payment_templatesListRelationFilter = {
    every?: payment_templatesWhereInput
    some?: payment_templatesWhereInput
    none?: payment_templatesWhereInput
  }

  export type payment_recordsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payment_templatesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type payment_categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_categoriesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type payment_categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_categoriesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type payment_frequenciesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_frequenciesAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type payment_frequenciesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_frequenciesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    color?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_frequenciesSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type payment_periodsCountOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    month?: SortOrder
    year?: SortOrder
    active?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_periodsAvgOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type payment_periodsMaxOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    month?: SortOrder
    year?: SortOrder
    active?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_periodsMinOrderByAggregateInput = {
    id?: SortOrder
    start_date?: SortOrder
    end_date?: SortOrder
    month?: SortOrder
    year?: SortOrder
    active?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_periodsSumOrderByAggregateInput = {
    id?: SortOrder
    year?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type payment_platformsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    color?: SortOrder
    abbreviation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_platformsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type payment_platformsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    color?: SortOrder
    abbreviation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_platformsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    image_url?: SortOrder
    color?: SortOrder
    abbreviation?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_platformsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type Payment_categoriesRelationFilter = {
    is?: payment_categoriesWhereInput
    isNot?: payment_categoriesWhereInput
  }

  export type Payment_frequenciesRelationFilter = {
    is?: payment_frequenciesWhereInput
    isNot?: payment_frequenciesWhereInput
  }

  export type Payment_periodsRelationFilter = {
    is?: payment_periodsWhereInput
    isNot?: payment_periodsWhereInput
  }

  export type Payment_platformsRelationFilter = {
    is?: payment_platformsWhereInput
    isNot?: payment_platformsWhereInput
  }

  export type payment_recordsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    payment_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    image_url?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    monitored?: SortOrder
  }

  export type payment_recordsAvgOrderByAggregateInput = {
    id?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
  }

  export type payment_recordsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    payment_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    image_url?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    monitored?: SortOrder
  }

  export type payment_recordsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    payment_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    image_url?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    monitored?: SortOrder
  }

  export type payment_recordsSumOrderByAggregateInput = {
    id?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_period_id?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type payment_templatesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    monitored?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_templatesAvgOrderByAggregateInput = {
    id?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
  }

  export type payment_templatesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    monitored?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_templatesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    billing_date?: SortOrder
    due_date?: SortOrder
    currency?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
    monitored?: SortOrder
    description?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type payment_templatesSumOrderByAggregateInput = {
    id?: SortOrder
    amount_usd?: SortOrder
    amount_clp?: SortOrder
    payment_platform_id?: SortOrder
    payment_frequency_id?: SortOrder
    payment_category_id?: SortOrder
  }

  export type personal_access_tokensCountOrderByAggregateInput = {
    id?: SortOrder
    tokenable_type?: SortOrder
    tokenable_id?: SortOrder
    name?: SortOrder
    token?: SortOrder
    abilities?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type personal_access_tokensAvgOrderByAggregateInput = {
    id?: SortOrder
    tokenable_id?: SortOrder
  }

  export type personal_access_tokensMaxOrderByAggregateInput = {
    id?: SortOrder
    tokenable_type?: SortOrder
    tokenable_id?: SortOrder
    name?: SortOrder
    token?: SortOrder
    abilities?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type personal_access_tokensMinOrderByAggregateInput = {
    id?: SortOrder
    tokenable_type?: SortOrder
    tokenable_id?: SortOrder
    name?: SortOrder
    token?: SortOrder
    abilities?: SortOrder
    last_used_at?: SortOrder
    expires_at?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type personal_access_tokensSumOrderByAggregateInput = {
    id?: SortOrder
    tokenable_id?: SortOrder
  }

  export type telescope_entriesCountOrderByAggregateInput = {
    sequence?: SortOrder
    uuid?: SortOrder
    batch_id?: SortOrder
    family_hash?: SortOrder
    should_display_on_index?: SortOrder
    type?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type telescope_entriesAvgOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type telescope_entriesMaxOrderByAggregateInput = {
    sequence?: SortOrder
    uuid?: SortOrder
    batch_id?: SortOrder
    family_hash?: SortOrder
    should_display_on_index?: SortOrder
    type?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type telescope_entriesMinOrderByAggregateInput = {
    sequence?: SortOrder
    uuid?: SortOrder
    batch_id?: SortOrder
    family_hash?: SortOrder
    should_display_on_index?: SortOrder
    type?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
  }

  export type telescope_entriesSumOrderByAggregateInput = {
    sequence?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    remember_token?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type payment_recordsCreateNestedManyWithoutPayment_categoriesInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput> | payment_recordsCreateWithoutPayment_categoriesInput[] | payment_recordsUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_categoriesInput | payment_recordsCreateOrConnectWithoutPayment_categoriesInput[]
    createMany?: payment_recordsCreateManyPayment_categoriesInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesCreateNestedManyWithoutPayment_categoriesInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput> | payment_templatesCreateWithoutPayment_categoriesInput[] | payment_templatesUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_categoriesInput | payment_templatesCreateOrConnectWithoutPayment_categoriesInput[]
    createMany?: payment_templatesCreateManyPayment_categoriesInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type payment_recordsUncheckedCreateNestedManyWithoutPayment_categoriesInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput> | payment_recordsCreateWithoutPayment_categoriesInput[] | payment_recordsUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_categoriesInput | payment_recordsCreateOrConnectWithoutPayment_categoriesInput[]
    createMany?: payment_recordsCreateManyPayment_categoriesInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesUncheckedCreateNestedManyWithoutPayment_categoriesInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput> | payment_templatesCreateWithoutPayment_categoriesInput[] | payment_templatesUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_categoriesInput | payment_templatesCreateOrConnectWithoutPayment_categoriesInput[]
    createMany?: payment_templatesCreateManyPayment_categoriesInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type payment_recordsUpdateManyWithoutPayment_categoriesNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput> | payment_recordsCreateWithoutPayment_categoriesInput[] | payment_recordsUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_categoriesInput | payment_recordsCreateOrConnectWithoutPayment_categoriesInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_categoriesInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_categoriesInput[]
    createMany?: payment_recordsCreateManyPayment_categoriesInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_categoriesInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_categoriesInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_categoriesInput | payment_recordsUpdateManyWithWhereWithoutPayment_categoriesInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUpdateManyWithoutPayment_categoriesNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput> | payment_templatesCreateWithoutPayment_categoriesInput[] | payment_templatesUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_categoriesInput | payment_templatesCreateOrConnectWithoutPayment_categoriesInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_categoriesInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_categoriesInput[]
    createMany?: payment_templatesCreateManyPayment_categoriesInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_categoriesInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_categoriesInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_categoriesInput | payment_templatesUpdateManyWithWhereWithoutPayment_categoriesInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_categoriesNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput> | payment_recordsCreateWithoutPayment_categoriesInput[] | payment_recordsUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_categoriesInput | payment_recordsCreateOrConnectWithoutPayment_categoriesInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_categoriesInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_categoriesInput[]
    createMany?: payment_recordsCreateManyPayment_categoriesInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_categoriesInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_categoriesInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_categoriesInput | payment_recordsUpdateManyWithWhereWithoutPayment_categoriesInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_categoriesNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput> | payment_templatesCreateWithoutPayment_categoriesInput[] | payment_templatesUncheckedCreateWithoutPayment_categoriesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_categoriesInput | payment_templatesCreateOrConnectWithoutPayment_categoriesInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_categoriesInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_categoriesInput[]
    createMany?: payment_templatesCreateManyPayment_categoriesInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_categoriesInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_categoriesInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_categoriesInput | payment_templatesUpdateManyWithWhereWithoutPayment_categoriesInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_recordsCreateNestedManyWithoutPayment_frequenciesInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput> | payment_recordsCreateWithoutPayment_frequenciesInput[] | payment_recordsUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_frequenciesInput | payment_recordsCreateOrConnectWithoutPayment_frequenciesInput[]
    createMany?: payment_recordsCreateManyPayment_frequenciesInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesCreateNestedManyWithoutPayment_frequenciesInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput> | payment_templatesCreateWithoutPayment_frequenciesInput[] | payment_templatesUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_frequenciesInput | payment_templatesCreateOrConnectWithoutPayment_frequenciesInput[]
    createMany?: payment_templatesCreateManyPayment_frequenciesInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type payment_recordsUncheckedCreateNestedManyWithoutPayment_frequenciesInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput> | payment_recordsCreateWithoutPayment_frequenciesInput[] | payment_recordsUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_frequenciesInput | payment_recordsCreateOrConnectWithoutPayment_frequenciesInput[]
    createMany?: payment_recordsCreateManyPayment_frequenciesInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesUncheckedCreateNestedManyWithoutPayment_frequenciesInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput> | payment_templatesCreateWithoutPayment_frequenciesInput[] | payment_templatesUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_frequenciesInput | payment_templatesCreateOrConnectWithoutPayment_frequenciesInput[]
    createMany?: payment_templatesCreateManyPayment_frequenciesInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type payment_recordsUpdateManyWithoutPayment_frequenciesNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput> | payment_recordsCreateWithoutPayment_frequenciesInput[] | payment_recordsUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_frequenciesInput | payment_recordsCreateOrConnectWithoutPayment_frequenciesInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_frequenciesInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_frequenciesInput[]
    createMany?: payment_recordsCreateManyPayment_frequenciesInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_frequenciesInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_frequenciesInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_frequenciesInput | payment_recordsUpdateManyWithWhereWithoutPayment_frequenciesInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUpdateManyWithoutPayment_frequenciesNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput> | payment_templatesCreateWithoutPayment_frequenciesInput[] | payment_templatesUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_frequenciesInput | payment_templatesCreateOrConnectWithoutPayment_frequenciesInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_frequenciesInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_frequenciesInput[]
    createMany?: payment_templatesCreateManyPayment_frequenciesInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_frequenciesInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_frequenciesInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_frequenciesInput | payment_templatesUpdateManyWithWhereWithoutPayment_frequenciesInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_frequenciesNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput> | payment_recordsCreateWithoutPayment_frequenciesInput[] | payment_recordsUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_frequenciesInput | payment_recordsCreateOrConnectWithoutPayment_frequenciesInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_frequenciesInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_frequenciesInput[]
    createMany?: payment_recordsCreateManyPayment_frequenciesInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_frequenciesInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_frequenciesInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_frequenciesInput | payment_recordsUpdateManyWithWhereWithoutPayment_frequenciesInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_frequenciesNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput> | payment_templatesCreateWithoutPayment_frequenciesInput[] | payment_templatesUncheckedCreateWithoutPayment_frequenciesInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_frequenciesInput | payment_templatesCreateOrConnectWithoutPayment_frequenciesInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_frequenciesInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_frequenciesInput[]
    createMany?: payment_templatesCreateManyPayment_frequenciesInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_frequenciesInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_frequenciesInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_frequenciesInput | payment_templatesUpdateManyWithWhereWithoutPayment_frequenciesInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_recordsCreateNestedManyWithoutPayment_periodsInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput> | payment_recordsCreateWithoutPayment_periodsInput[] | payment_recordsUncheckedCreateWithoutPayment_periodsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_periodsInput | payment_recordsCreateOrConnectWithoutPayment_periodsInput[]
    createMany?: payment_recordsCreateManyPayment_periodsInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_recordsUncheckedCreateNestedManyWithoutPayment_periodsInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput> | payment_recordsCreateWithoutPayment_periodsInput[] | payment_recordsUncheckedCreateWithoutPayment_periodsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_periodsInput | payment_recordsCreateOrConnectWithoutPayment_periodsInput[]
    createMany?: payment_recordsCreateManyPayment_periodsInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type payment_recordsUpdateManyWithoutPayment_periodsNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput> | payment_recordsCreateWithoutPayment_periodsInput[] | payment_recordsUncheckedCreateWithoutPayment_periodsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_periodsInput | payment_recordsCreateOrConnectWithoutPayment_periodsInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_periodsInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_periodsInput[]
    createMany?: payment_recordsCreateManyPayment_periodsInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_periodsInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_periodsInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_periodsInput | payment_recordsUpdateManyWithWhereWithoutPayment_periodsInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_periodsNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput> | payment_recordsCreateWithoutPayment_periodsInput[] | payment_recordsUncheckedCreateWithoutPayment_periodsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_periodsInput | payment_recordsCreateOrConnectWithoutPayment_periodsInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_periodsInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_periodsInput[]
    createMany?: payment_recordsCreateManyPayment_periodsInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_periodsInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_periodsInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_periodsInput | payment_recordsUpdateManyWithWhereWithoutPayment_periodsInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_recordsCreateNestedManyWithoutPayment_platformsInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput> | payment_recordsCreateWithoutPayment_platformsInput[] | payment_recordsUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_platformsInput | payment_recordsCreateOrConnectWithoutPayment_platformsInput[]
    createMany?: payment_recordsCreateManyPayment_platformsInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesCreateNestedManyWithoutPayment_platformsInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput> | payment_templatesCreateWithoutPayment_platformsInput[] | payment_templatesUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_platformsInput | payment_templatesCreateOrConnectWithoutPayment_platformsInput[]
    createMany?: payment_templatesCreateManyPayment_platformsInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type payment_recordsUncheckedCreateNestedManyWithoutPayment_platformsInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput> | payment_recordsCreateWithoutPayment_platformsInput[] | payment_recordsUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_platformsInput | payment_recordsCreateOrConnectWithoutPayment_platformsInput[]
    createMany?: payment_recordsCreateManyPayment_platformsInputEnvelope
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
  }

  export type payment_templatesUncheckedCreateNestedManyWithoutPayment_platformsInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput> | payment_templatesCreateWithoutPayment_platformsInput[] | payment_templatesUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_platformsInput | payment_templatesCreateOrConnectWithoutPayment_platformsInput[]
    createMany?: payment_templatesCreateManyPayment_platformsInputEnvelope
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
  }

  export type payment_recordsUpdateManyWithoutPayment_platformsNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput> | payment_recordsCreateWithoutPayment_platformsInput[] | payment_recordsUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_platformsInput | payment_recordsCreateOrConnectWithoutPayment_platformsInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_platformsInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_platformsInput[]
    createMany?: payment_recordsCreateManyPayment_platformsInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_platformsInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_platformsInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_platformsInput | payment_recordsUpdateManyWithWhereWithoutPayment_platformsInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUpdateManyWithoutPayment_platformsNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput> | payment_templatesCreateWithoutPayment_platformsInput[] | payment_templatesUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_platformsInput | payment_templatesCreateOrConnectWithoutPayment_platformsInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_platformsInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_platformsInput[]
    createMany?: payment_templatesCreateManyPayment_platformsInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_platformsInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_platformsInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_platformsInput | payment_templatesUpdateManyWithWhereWithoutPayment_platformsInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_platformsNestedInput = {
    create?: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput> | payment_recordsCreateWithoutPayment_platformsInput[] | payment_recordsUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_recordsCreateOrConnectWithoutPayment_platformsInput | payment_recordsCreateOrConnectWithoutPayment_platformsInput[]
    upsert?: payment_recordsUpsertWithWhereUniqueWithoutPayment_platformsInput | payment_recordsUpsertWithWhereUniqueWithoutPayment_platformsInput[]
    createMany?: payment_recordsCreateManyPayment_platformsInputEnvelope
    set?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    disconnect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    delete?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    connect?: payment_recordsWhereUniqueInput | payment_recordsWhereUniqueInput[]
    update?: payment_recordsUpdateWithWhereUniqueWithoutPayment_platformsInput | payment_recordsUpdateWithWhereUniqueWithoutPayment_platformsInput[]
    updateMany?: payment_recordsUpdateManyWithWhereWithoutPayment_platformsInput | payment_recordsUpdateManyWithWhereWithoutPayment_platformsInput[]
    deleteMany?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_platformsNestedInput = {
    create?: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput> | payment_templatesCreateWithoutPayment_platformsInput[] | payment_templatesUncheckedCreateWithoutPayment_platformsInput[]
    connectOrCreate?: payment_templatesCreateOrConnectWithoutPayment_platformsInput | payment_templatesCreateOrConnectWithoutPayment_platformsInput[]
    upsert?: payment_templatesUpsertWithWhereUniqueWithoutPayment_platformsInput | payment_templatesUpsertWithWhereUniqueWithoutPayment_platformsInput[]
    createMany?: payment_templatesCreateManyPayment_platformsInputEnvelope
    set?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    disconnect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    delete?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    connect?: payment_templatesWhereUniqueInput | payment_templatesWhereUniqueInput[]
    update?: payment_templatesUpdateWithWhereUniqueWithoutPayment_platformsInput | payment_templatesUpdateWithWhereUniqueWithoutPayment_platformsInput[]
    updateMany?: payment_templatesUpdateManyWithWhereWithoutPayment_platformsInput | payment_templatesUpdateManyWithWhereWithoutPayment_platformsInput[]
    deleteMany?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
  }

  export type payment_categoriesCreateNestedOneWithoutPayment_recordsInput = {
    create?: XOR<payment_categoriesCreateWithoutPayment_recordsInput, payment_categoriesUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_categoriesCreateOrConnectWithoutPayment_recordsInput
    connect?: payment_categoriesWhereUniqueInput
  }

  export type payment_frequenciesCreateNestedOneWithoutPayment_recordsInput = {
    create?: XOR<payment_frequenciesCreateWithoutPayment_recordsInput, payment_frequenciesUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_frequenciesCreateOrConnectWithoutPayment_recordsInput
    connect?: payment_frequenciesWhereUniqueInput
  }

  export type payment_periodsCreateNestedOneWithoutPayment_recordsInput = {
    create?: XOR<payment_periodsCreateWithoutPayment_recordsInput, payment_periodsUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_periodsCreateOrConnectWithoutPayment_recordsInput
    connect?: payment_periodsWhereUniqueInput
  }

  export type payment_platformsCreateNestedOneWithoutPayment_recordsInput = {
    create?: XOR<payment_platformsCreateWithoutPayment_recordsInput, payment_platformsUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_platformsCreateOrConnectWithoutPayment_recordsInput
    connect?: payment_platformsWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type payment_categoriesUpdateOneRequiredWithoutPayment_recordsNestedInput = {
    create?: XOR<payment_categoriesCreateWithoutPayment_recordsInput, payment_categoriesUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_categoriesCreateOrConnectWithoutPayment_recordsInput
    upsert?: payment_categoriesUpsertWithoutPayment_recordsInput
    connect?: payment_categoriesWhereUniqueInput
    update?: XOR<XOR<payment_categoriesUpdateToOneWithWhereWithoutPayment_recordsInput, payment_categoriesUpdateWithoutPayment_recordsInput>, payment_categoriesUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_frequenciesUpdateOneRequiredWithoutPayment_recordsNestedInput = {
    create?: XOR<payment_frequenciesCreateWithoutPayment_recordsInput, payment_frequenciesUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_frequenciesCreateOrConnectWithoutPayment_recordsInput
    upsert?: payment_frequenciesUpsertWithoutPayment_recordsInput
    connect?: payment_frequenciesWhereUniqueInput
    update?: XOR<XOR<payment_frequenciesUpdateToOneWithWhereWithoutPayment_recordsInput, payment_frequenciesUpdateWithoutPayment_recordsInput>, payment_frequenciesUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_periodsUpdateOneRequiredWithoutPayment_recordsNestedInput = {
    create?: XOR<payment_periodsCreateWithoutPayment_recordsInput, payment_periodsUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_periodsCreateOrConnectWithoutPayment_recordsInput
    upsert?: payment_periodsUpsertWithoutPayment_recordsInput
    connect?: payment_periodsWhereUniqueInput
    update?: XOR<XOR<payment_periodsUpdateToOneWithWhereWithoutPayment_recordsInput, payment_periodsUpdateWithoutPayment_recordsInput>, payment_periodsUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_platformsUpdateOneRequiredWithoutPayment_recordsNestedInput = {
    create?: XOR<payment_platformsCreateWithoutPayment_recordsInput, payment_platformsUncheckedCreateWithoutPayment_recordsInput>
    connectOrCreate?: payment_platformsCreateOrConnectWithoutPayment_recordsInput
    upsert?: payment_platformsUpsertWithoutPayment_recordsInput
    connect?: payment_platformsWhereUniqueInput
    update?: XOR<XOR<payment_platformsUpdateToOneWithWhereWithoutPayment_recordsInput, payment_platformsUpdateWithoutPayment_recordsInput>, payment_platformsUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_categoriesCreateNestedOneWithoutPayment_templatesInput = {
    create?: XOR<payment_categoriesCreateWithoutPayment_templatesInput, payment_categoriesUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_categoriesCreateOrConnectWithoutPayment_templatesInput
    connect?: payment_categoriesWhereUniqueInput
  }

  export type payment_frequenciesCreateNestedOneWithoutPayment_templatesInput = {
    create?: XOR<payment_frequenciesCreateWithoutPayment_templatesInput, payment_frequenciesUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_frequenciesCreateOrConnectWithoutPayment_templatesInput
    connect?: payment_frequenciesWhereUniqueInput
  }

  export type payment_platformsCreateNestedOneWithoutPayment_templatesInput = {
    create?: XOR<payment_platformsCreateWithoutPayment_templatesInput, payment_platformsUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_platformsCreateOrConnectWithoutPayment_templatesInput
    connect?: payment_platformsWhereUniqueInput
  }

  export type payment_categoriesUpdateOneRequiredWithoutPayment_templatesNestedInput = {
    create?: XOR<payment_categoriesCreateWithoutPayment_templatesInput, payment_categoriesUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_categoriesCreateOrConnectWithoutPayment_templatesInput
    upsert?: payment_categoriesUpsertWithoutPayment_templatesInput
    connect?: payment_categoriesWhereUniqueInput
    update?: XOR<XOR<payment_categoriesUpdateToOneWithWhereWithoutPayment_templatesInput, payment_categoriesUpdateWithoutPayment_templatesInput>, payment_categoriesUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type payment_frequenciesUpdateOneRequiredWithoutPayment_templatesNestedInput = {
    create?: XOR<payment_frequenciesCreateWithoutPayment_templatesInput, payment_frequenciesUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_frequenciesCreateOrConnectWithoutPayment_templatesInput
    upsert?: payment_frequenciesUpsertWithoutPayment_templatesInput
    connect?: payment_frequenciesWhereUniqueInput
    update?: XOR<XOR<payment_frequenciesUpdateToOneWithWhereWithoutPayment_templatesInput, payment_frequenciesUpdateWithoutPayment_templatesInput>, payment_frequenciesUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type payment_platformsUpdateOneRequiredWithoutPayment_templatesNestedInput = {
    create?: XOR<payment_platformsCreateWithoutPayment_templatesInput, payment_platformsUncheckedCreateWithoutPayment_templatesInput>
    connectOrCreate?: payment_platformsCreateOrConnectWithoutPayment_templatesInput
    upsert?: payment_platformsUpsertWithoutPayment_templatesInput
    connect?: payment_platformsWhereUniqueInput
    update?: XOR<XOR<payment_platformsUpdateToOneWithWhereWithoutPayment_templatesInput, payment_platformsUpdateWithoutPayment_templatesInput>, payment_platformsUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type payment_recordsCreateWithoutPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_recordsInput
    payment_periods: payment_periodsCreateNestedOneWithoutPayment_recordsInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordsUncheckedCreateWithoutPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsCreateOrConnectWithoutPayment_categoriesInput = {
    where: payment_recordsWhereUniqueInput
    create: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput>
  }

  export type payment_recordsCreateManyPayment_categoriesInputEnvelope = {
    data: payment_recordsCreateManyPayment_categoriesInput | payment_recordsCreateManyPayment_categoriesInput[]
    skipDuplicates?: boolean
  }

  export type payment_templatesCreateWithoutPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_templatesInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_templatesInput
  }

  export type payment_templatesUncheckedCreateWithoutPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_templatesCreateOrConnectWithoutPayment_categoriesInput = {
    where: payment_templatesWhereUniqueInput
    create: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput>
  }

  export type payment_templatesCreateManyPayment_categoriesInputEnvelope = {
    data: payment_templatesCreateManyPayment_categoriesInput | payment_templatesCreateManyPayment_categoriesInput[]
    skipDuplicates?: boolean
  }

  export type payment_recordsUpsertWithWhereUniqueWithoutPayment_categoriesInput = {
    where: payment_recordsWhereUniqueInput
    update: XOR<payment_recordsUpdateWithoutPayment_categoriesInput, payment_recordsUncheckedUpdateWithoutPayment_categoriesInput>
    create: XOR<payment_recordsCreateWithoutPayment_categoriesInput, payment_recordsUncheckedCreateWithoutPayment_categoriesInput>
  }

  export type payment_recordsUpdateWithWhereUniqueWithoutPayment_categoriesInput = {
    where: payment_recordsWhereUniqueInput
    data: XOR<payment_recordsUpdateWithoutPayment_categoriesInput, payment_recordsUncheckedUpdateWithoutPayment_categoriesInput>
  }

  export type payment_recordsUpdateManyWithWhereWithoutPayment_categoriesInput = {
    where: payment_recordsScalarWhereInput
    data: XOR<payment_recordsUpdateManyMutationInput, payment_recordsUncheckedUpdateManyWithoutPayment_categoriesInput>
  }

  export type payment_recordsScalarWhereInput = {
    AND?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
    OR?: payment_recordsScalarWhereInput[]
    NOT?: payment_recordsScalarWhereInput | payment_recordsScalarWhereInput[]
    id?: BigIntFilter<"payment_records"> | bigint | number
    name?: StringFilter<"payment_records"> | string
    billing_date?: DateTimeFilter<"payment_records"> | Date | string
    payment_date?: DateTimeFilter<"payment_records"> | Date | string
    due_date?: DateTimeFilter<"payment_records"> | Date | string
    currency?: StringFilter<"payment_records"> | string
    amount_usd?: FloatFilter<"payment_records"> | number
    amount_clp?: FloatFilter<"payment_records"> | number
    payment_period_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_platform_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_records"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_records"> | bigint | number
    image_url?: StringNullableFilter<"payment_records"> | string | null
    description?: StringNullableFilter<"payment_records"> | string | null
    created_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_records"> | Date | string | null
    monitored?: BoolFilter<"payment_records"> | boolean
  }

  export type payment_templatesUpsertWithWhereUniqueWithoutPayment_categoriesInput = {
    where: payment_templatesWhereUniqueInput
    update: XOR<payment_templatesUpdateWithoutPayment_categoriesInput, payment_templatesUncheckedUpdateWithoutPayment_categoriesInput>
    create: XOR<payment_templatesCreateWithoutPayment_categoriesInput, payment_templatesUncheckedCreateWithoutPayment_categoriesInput>
  }

  export type payment_templatesUpdateWithWhereUniqueWithoutPayment_categoriesInput = {
    where: payment_templatesWhereUniqueInput
    data: XOR<payment_templatesUpdateWithoutPayment_categoriesInput, payment_templatesUncheckedUpdateWithoutPayment_categoriesInput>
  }

  export type payment_templatesUpdateManyWithWhereWithoutPayment_categoriesInput = {
    where: payment_templatesScalarWhereInput
    data: XOR<payment_templatesUpdateManyMutationInput, payment_templatesUncheckedUpdateManyWithoutPayment_categoriesInput>
  }

  export type payment_templatesScalarWhereInput = {
    AND?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
    OR?: payment_templatesScalarWhereInput[]
    NOT?: payment_templatesScalarWhereInput | payment_templatesScalarWhereInput[]
    id?: BigIntFilter<"payment_templates"> | bigint | number
    name?: StringFilter<"payment_templates"> | string
    billing_date?: DateTimeFilter<"payment_templates"> | Date | string
    due_date?: DateTimeFilter<"payment_templates"> | Date | string
    currency?: StringFilter<"payment_templates"> | string
    amount_usd?: FloatFilter<"payment_templates"> | number
    amount_clp?: FloatFilter<"payment_templates"> | number
    payment_platform_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_frequency_id?: BigIntFilter<"payment_templates"> | bigint | number
    payment_category_id?: BigIntFilter<"payment_templates"> | bigint | number
    monitored?: BoolFilter<"payment_templates"> | boolean
    description?: StringNullableFilter<"payment_templates"> | string | null
    created_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"payment_templates"> | Date | string | null
  }

  export type payment_recordsCreateWithoutPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_recordsInput
    payment_periods: payment_periodsCreateNestedOneWithoutPayment_recordsInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordsUncheckedCreateWithoutPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsCreateOrConnectWithoutPayment_frequenciesInput = {
    where: payment_recordsWhereUniqueInput
    create: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput>
  }

  export type payment_recordsCreateManyPayment_frequenciesInputEnvelope = {
    data: payment_recordsCreateManyPayment_frequenciesInput | payment_recordsCreateManyPayment_frequenciesInput[]
    skipDuplicates?: boolean
  }

  export type payment_templatesCreateWithoutPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_templatesInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_templatesInput
  }

  export type payment_templatesUncheckedCreateWithoutPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_templatesCreateOrConnectWithoutPayment_frequenciesInput = {
    where: payment_templatesWhereUniqueInput
    create: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput>
  }

  export type payment_templatesCreateManyPayment_frequenciesInputEnvelope = {
    data: payment_templatesCreateManyPayment_frequenciesInput | payment_templatesCreateManyPayment_frequenciesInput[]
    skipDuplicates?: boolean
  }

  export type payment_recordsUpsertWithWhereUniqueWithoutPayment_frequenciesInput = {
    where: payment_recordsWhereUniqueInput
    update: XOR<payment_recordsUpdateWithoutPayment_frequenciesInput, payment_recordsUncheckedUpdateWithoutPayment_frequenciesInput>
    create: XOR<payment_recordsCreateWithoutPayment_frequenciesInput, payment_recordsUncheckedCreateWithoutPayment_frequenciesInput>
  }

  export type payment_recordsUpdateWithWhereUniqueWithoutPayment_frequenciesInput = {
    where: payment_recordsWhereUniqueInput
    data: XOR<payment_recordsUpdateWithoutPayment_frequenciesInput, payment_recordsUncheckedUpdateWithoutPayment_frequenciesInput>
  }

  export type payment_recordsUpdateManyWithWhereWithoutPayment_frequenciesInput = {
    where: payment_recordsScalarWhereInput
    data: XOR<payment_recordsUpdateManyMutationInput, payment_recordsUncheckedUpdateManyWithoutPayment_frequenciesInput>
  }

  export type payment_templatesUpsertWithWhereUniqueWithoutPayment_frequenciesInput = {
    where: payment_templatesWhereUniqueInput
    update: XOR<payment_templatesUpdateWithoutPayment_frequenciesInput, payment_templatesUncheckedUpdateWithoutPayment_frequenciesInput>
    create: XOR<payment_templatesCreateWithoutPayment_frequenciesInput, payment_templatesUncheckedCreateWithoutPayment_frequenciesInput>
  }

  export type payment_templatesUpdateWithWhereUniqueWithoutPayment_frequenciesInput = {
    where: payment_templatesWhereUniqueInput
    data: XOR<payment_templatesUpdateWithoutPayment_frequenciesInput, payment_templatesUncheckedUpdateWithoutPayment_frequenciesInput>
  }

  export type payment_templatesUpdateManyWithWhereWithoutPayment_frequenciesInput = {
    where: payment_templatesScalarWhereInput
    data: XOR<payment_templatesUpdateManyMutationInput, payment_templatesUncheckedUpdateManyWithoutPayment_frequenciesInput>
  }

  export type payment_recordsCreateWithoutPayment_periodsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_recordsInput
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_recordsInput
    payment_platforms: payment_platformsCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordsUncheckedCreateWithoutPayment_periodsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsCreateOrConnectWithoutPayment_periodsInput = {
    where: payment_recordsWhereUniqueInput
    create: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput>
  }

  export type payment_recordsCreateManyPayment_periodsInputEnvelope = {
    data: payment_recordsCreateManyPayment_periodsInput | payment_recordsCreateManyPayment_periodsInput[]
    skipDuplicates?: boolean
  }

  export type payment_recordsUpsertWithWhereUniqueWithoutPayment_periodsInput = {
    where: payment_recordsWhereUniqueInput
    update: XOR<payment_recordsUpdateWithoutPayment_periodsInput, payment_recordsUncheckedUpdateWithoutPayment_periodsInput>
    create: XOR<payment_recordsCreateWithoutPayment_periodsInput, payment_recordsUncheckedCreateWithoutPayment_periodsInput>
  }

  export type payment_recordsUpdateWithWhereUniqueWithoutPayment_periodsInput = {
    where: payment_recordsWhereUniqueInput
    data: XOR<payment_recordsUpdateWithoutPayment_periodsInput, payment_recordsUncheckedUpdateWithoutPayment_periodsInput>
  }

  export type payment_recordsUpdateManyWithWhereWithoutPayment_periodsInput = {
    where: payment_recordsScalarWhereInput
    data: XOR<payment_recordsUpdateManyMutationInput, payment_recordsUncheckedUpdateManyWithoutPayment_periodsInput>
  }

  export type payment_recordsCreateWithoutPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_recordsInput
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_recordsInput
    payment_periods: payment_periodsCreateNestedOneWithoutPayment_recordsInput
  }

  export type payment_recordsUncheckedCreateWithoutPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsCreateOrConnectWithoutPayment_platformsInput = {
    where: payment_recordsWhereUniqueInput
    create: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput>
  }

  export type payment_recordsCreateManyPayment_platformsInputEnvelope = {
    data: payment_recordsCreateManyPayment_platformsInput | payment_recordsCreateManyPayment_platformsInput[]
    skipDuplicates?: boolean
  }

  export type payment_templatesCreateWithoutPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_categories: payment_categoriesCreateNestedOneWithoutPayment_templatesInput
    payment_frequencies: payment_frequenciesCreateNestedOneWithoutPayment_templatesInput
  }

  export type payment_templatesUncheckedCreateWithoutPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_templatesCreateOrConnectWithoutPayment_platformsInput = {
    where: payment_templatesWhereUniqueInput
    create: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput>
  }

  export type payment_templatesCreateManyPayment_platformsInputEnvelope = {
    data: payment_templatesCreateManyPayment_platformsInput | payment_templatesCreateManyPayment_platformsInput[]
    skipDuplicates?: boolean
  }

  export type payment_recordsUpsertWithWhereUniqueWithoutPayment_platformsInput = {
    where: payment_recordsWhereUniqueInput
    update: XOR<payment_recordsUpdateWithoutPayment_platformsInput, payment_recordsUncheckedUpdateWithoutPayment_platformsInput>
    create: XOR<payment_recordsCreateWithoutPayment_platformsInput, payment_recordsUncheckedCreateWithoutPayment_platformsInput>
  }

  export type payment_recordsUpdateWithWhereUniqueWithoutPayment_platformsInput = {
    where: payment_recordsWhereUniqueInput
    data: XOR<payment_recordsUpdateWithoutPayment_platformsInput, payment_recordsUncheckedUpdateWithoutPayment_platformsInput>
  }

  export type payment_recordsUpdateManyWithWhereWithoutPayment_platformsInput = {
    where: payment_recordsScalarWhereInput
    data: XOR<payment_recordsUpdateManyMutationInput, payment_recordsUncheckedUpdateManyWithoutPayment_platformsInput>
  }

  export type payment_templatesUpsertWithWhereUniqueWithoutPayment_platformsInput = {
    where: payment_templatesWhereUniqueInput
    update: XOR<payment_templatesUpdateWithoutPayment_platformsInput, payment_templatesUncheckedUpdateWithoutPayment_platformsInput>
    create: XOR<payment_templatesCreateWithoutPayment_platformsInput, payment_templatesUncheckedCreateWithoutPayment_platformsInput>
  }

  export type payment_templatesUpdateWithWhereUniqueWithoutPayment_platformsInput = {
    where: payment_templatesWhereUniqueInput
    data: XOR<payment_templatesUpdateWithoutPayment_platformsInput, payment_templatesUncheckedUpdateWithoutPayment_platformsInput>
  }

  export type payment_templatesUpdateManyWithWhereWithoutPayment_platformsInput = {
    where: payment_templatesScalarWhereInput
    data: XOR<payment_templatesUpdateManyMutationInput, payment_templatesUncheckedUpdateManyWithoutPayment_platformsInput>
  }

  export type payment_categoriesCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesUncheckedCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesCreateOrConnectWithoutPayment_recordsInput = {
    where: payment_categoriesWhereUniqueInput
    create: XOR<payment_categoriesCreateWithoutPayment_recordsInput, payment_categoriesUncheckedCreateWithoutPayment_recordsInput>
  }

  export type payment_frequenciesCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesUncheckedCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesCreateOrConnectWithoutPayment_recordsInput = {
    where: payment_frequenciesWhereUniqueInput
    create: XOR<payment_frequenciesCreateWithoutPayment_recordsInput, payment_frequenciesUncheckedCreateWithoutPayment_recordsInput>
  }

  export type payment_periodsCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    start_date: Date | string
    end_date: Date | string
    month: string
    year: number
    active: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_periodsUncheckedCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    start_date: Date | string
    end_date: Date | string
    month: string
    year: number
    active: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_periodsCreateOrConnectWithoutPayment_recordsInput = {
    where: payment_periodsWhereUniqueInput
    create: XOR<payment_periodsCreateWithoutPayment_recordsInput, payment_periodsUncheckedCreateWithoutPayment_recordsInput>
  }

  export type payment_platformsCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsUncheckedCreateWithoutPayment_recordsInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_templates?: payment_templatesUncheckedCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsCreateOrConnectWithoutPayment_recordsInput = {
    where: payment_platformsWhereUniqueInput
    create: XOR<payment_platformsCreateWithoutPayment_recordsInput, payment_platformsUncheckedCreateWithoutPayment_recordsInput>
  }

  export type payment_categoriesUpsertWithoutPayment_recordsInput = {
    update: XOR<payment_categoriesUpdateWithoutPayment_recordsInput, payment_categoriesUncheckedUpdateWithoutPayment_recordsInput>
    create: XOR<payment_categoriesCreateWithoutPayment_recordsInput, payment_categoriesUncheckedCreateWithoutPayment_recordsInput>
    where?: payment_categoriesWhereInput
  }

  export type payment_categoriesUpdateToOneWithWhereWithoutPayment_recordsInput = {
    where?: payment_categoriesWhereInput
    data: XOR<payment_categoriesUpdateWithoutPayment_recordsInput, payment_categoriesUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_categoriesUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_categoriesUncheckedUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_frequenciesUpsertWithoutPayment_recordsInput = {
    update: XOR<payment_frequenciesUpdateWithoutPayment_recordsInput, payment_frequenciesUncheckedUpdateWithoutPayment_recordsInput>
    create: XOR<payment_frequenciesCreateWithoutPayment_recordsInput, payment_frequenciesUncheckedCreateWithoutPayment_recordsInput>
    where?: payment_frequenciesWhereInput
  }

  export type payment_frequenciesUpdateToOneWithWhereWithoutPayment_recordsInput = {
    where?: payment_frequenciesWhereInput
    data: XOR<payment_frequenciesUpdateWithoutPayment_recordsInput, payment_frequenciesUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_frequenciesUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_frequenciesUncheckedUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_periodsUpsertWithoutPayment_recordsInput = {
    update: XOR<payment_periodsUpdateWithoutPayment_recordsInput, payment_periodsUncheckedUpdateWithoutPayment_recordsInput>
    create: XOR<payment_periodsCreateWithoutPayment_recordsInput, payment_periodsUncheckedCreateWithoutPayment_recordsInput>
    where?: payment_periodsWhereInput
  }

  export type payment_periodsUpdateToOneWithWhereWithoutPayment_recordsInput = {
    where?: payment_periodsWhereInput
    data: XOR<payment_periodsUpdateWithoutPayment_recordsInput, payment_periodsUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_periodsUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_periodsUncheckedUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_date?: DateTimeFieldUpdateOperationsInput | Date | string
    end_date?: DateTimeFieldUpdateOperationsInput | Date | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_platformsUpsertWithoutPayment_recordsInput = {
    update: XOR<payment_platformsUpdateWithoutPayment_recordsInput, payment_platformsUncheckedUpdateWithoutPayment_recordsInput>
    create: XOR<payment_platformsCreateWithoutPayment_recordsInput, payment_platformsUncheckedCreateWithoutPayment_recordsInput>
    where?: payment_platformsWhereInput
  }

  export type payment_platformsUpdateToOneWithWhereWithoutPayment_recordsInput = {
    where?: payment_platformsWhereInput
    data: XOR<payment_platformsUpdateWithoutPayment_recordsInput, payment_platformsUncheckedUpdateWithoutPayment_recordsInput>
  }

  export type payment_platformsUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_platformsUncheckedUpdateWithoutPayment_recordsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_templates?: payment_templatesUncheckedUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_categoriesCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesUncheckedCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_categoriesInput
  }

  export type payment_categoriesCreateOrConnectWithoutPayment_templatesInput = {
    where: payment_categoriesWhereUniqueInput
    create: XOR<payment_categoriesCreateWithoutPayment_templatesInput, payment_categoriesUncheckedCreateWithoutPayment_templatesInput>
  }

  export type payment_frequenciesCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesUncheckedCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    color: string
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_frequenciesInput
  }

  export type payment_frequenciesCreateOrConnectWithoutPayment_templatesInput = {
    where: payment_frequenciesWhereUniqueInput
    create: XOR<payment_frequenciesCreateWithoutPayment_templatesInput, payment_frequenciesUncheckedCreateWithoutPayment_templatesInput>
  }

  export type payment_platformsCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsUncheckedCreateWithoutPayment_templatesInput = {
    id?: bigint | number
    name: string
    description?: string | null
    image_url?: string | null
    color: string
    abbreviation: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    payment_records?: payment_recordsUncheckedCreateNestedManyWithoutPayment_platformsInput
  }

  export type payment_platformsCreateOrConnectWithoutPayment_templatesInput = {
    where: payment_platformsWhereUniqueInput
    create: XOR<payment_platformsCreateWithoutPayment_templatesInput, payment_platformsUncheckedCreateWithoutPayment_templatesInput>
  }

  export type payment_categoriesUpsertWithoutPayment_templatesInput = {
    update: XOR<payment_categoriesUpdateWithoutPayment_templatesInput, payment_categoriesUncheckedUpdateWithoutPayment_templatesInput>
    create: XOR<payment_categoriesCreateWithoutPayment_templatesInput, payment_categoriesUncheckedCreateWithoutPayment_templatesInput>
    where?: payment_categoriesWhereInput
  }

  export type payment_categoriesUpdateToOneWithWhereWithoutPayment_templatesInput = {
    where?: payment_categoriesWhereInput
    data: XOR<payment_categoriesUpdateWithoutPayment_templatesInput, payment_categoriesUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type payment_categoriesUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_categoriesUncheckedUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_categoriesNestedInput
  }

  export type payment_frequenciesUpsertWithoutPayment_templatesInput = {
    update: XOR<payment_frequenciesUpdateWithoutPayment_templatesInput, payment_frequenciesUncheckedUpdateWithoutPayment_templatesInput>
    create: XOR<payment_frequenciesCreateWithoutPayment_templatesInput, payment_frequenciesUncheckedCreateWithoutPayment_templatesInput>
    where?: payment_frequenciesWhereInput
  }

  export type payment_frequenciesUpdateToOneWithWhereWithoutPayment_templatesInput = {
    where?: payment_frequenciesWhereInput
    data: XOR<payment_frequenciesUpdateWithoutPayment_templatesInput, payment_frequenciesUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type payment_frequenciesUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_frequenciesUncheckedUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_frequenciesNestedInput
  }

  export type payment_platformsUpsertWithoutPayment_templatesInput = {
    update: XOR<payment_platformsUpdateWithoutPayment_templatesInput, payment_platformsUncheckedUpdateWithoutPayment_templatesInput>
    create: XOR<payment_platformsCreateWithoutPayment_templatesInput, payment_platformsUncheckedCreateWithoutPayment_templatesInput>
    where?: payment_platformsWhereInput
  }

  export type payment_platformsUpdateToOneWithWhereWithoutPayment_templatesInput = {
    where?: payment_platformsWhereInput
    data: XOR<payment_platformsUpdateWithoutPayment_templatesInput, payment_platformsUncheckedUpdateWithoutPayment_templatesInput>
  }

  export type payment_platformsUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_platformsUncheckedUpdateWithoutPayment_templatesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    color?: StringFieldUpdateOperationsInput | string
    abbreviation?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_records?: payment_recordsUncheckedUpdateManyWithoutPayment_platformsNestedInput
  }

  export type payment_recordsCreateManyPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_templatesCreateManyPayment_categoriesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_recordsUpdateWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_periods?: payment_periodsUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordsUncheckedUpdateWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_templatesUpdateWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_templatesNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_templatesNestedInput
  }

  export type payment_templatesUncheckedUpdateWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_categoriesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_recordsCreateManyPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_platform_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_templatesCreateManyPayment_frequenciesInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_recordsUpdateWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_periods?: payment_periodsUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordsUncheckedUpdateWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_templatesUpdateWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_templatesNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_templatesNestedInput
  }

  export type payment_templatesUncheckedUpdateWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_frequenciesInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_recordsCreateManyPayment_periodsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_platform_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_recordsUpdateWithoutPayment_periodsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_platforms?: payment_platformsUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordsUncheckedUpdateWithoutPayment_periodsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_periodsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_platform_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsCreateManyPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    payment_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_period_id: bigint | number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    image_url?: string | null
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    monitored?: boolean
  }

  export type payment_templatesCreateManyPayment_platformsInput = {
    id?: bigint | number
    name: string
    billing_date: Date | string
    due_date: Date | string
    currency: string
    amount_usd: number
    amount_clp: number
    payment_frequency_id: bigint | number
    payment_category_id: bigint | number
    monitored?: boolean
    description?: string | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type payment_recordsUpdateWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_recordsNestedInput
    payment_periods?: payment_periodsUpdateOneRequiredWithoutPayment_recordsNestedInput
  }

  export type payment_recordsUncheckedUpdateWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_recordsUncheckedUpdateManyWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_period_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    image_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    monitored?: BoolFieldUpdateOperationsInput | boolean
  }

  export type payment_templatesUpdateWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    payment_categories?: payment_categoriesUpdateOneRequiredWithoutPayment_templatesNestedInput
    payment_frequencies?: payment_frequenciesUpdateOneRequiredWithoutPayment_templatesNestedInput
  }

  export type payment_templatesUncheckedUpdateWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type payment_templatesUncheckedUpdateManyWithoutPayment_platformsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    billing_date?: DateTimeFieldUpdateOperationsInput | Date | string
    due_date?: DateTimeFieldUpdateOperationsInput | Date | string
    currency?: StringFieldUpdateOperationsInput | string
    amount_usd?: FloatFieldUpdateOperationsInput | number
    amount_clp?: FloatFieldUpdateOperationsInput | number
    payment_frequency_id?: BigIntFieldUpdateOperationsInput | bigint | number
    payment_category_id?: BigIntFieldUpdateOperationsInput | bigint | number
    monitored?: BoolFieldUpdateOperationsInput | boolean
    description?: NullableStringFieldUpdateOperationsInput | string | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use Payment_categoriesCountOutputTypeDefaultArgs instead
     */
    export type Payment_categoriesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Payment_categoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Payment_frequenciesCountOutputTypeDefaultArgs instead
     */
    export type Payment_frequenciesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Payment_frequenciesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Payment_periodsCountOutputTypeDefaultArgs instead
     */
    export type Payment_periodsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Payment_periodsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use Payment_platformsCountOutputTypeDefaultArgs instead
     */
    export type Payment_platformsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = Payment_platformsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cacheDefaultArgs instead
     */
    export type cacheArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cacheDefaultArgs<ExtArgs>
    /**
     * @deprecated Use cache_locksDefaultArgs instead
     */
    export type cache_locksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = cache_locksDefaultArgs<ExtArgs>
    /**
     * @deprecated Use failed_jobsDefaultArgs instead
     */
    export type failed_jobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = failed_jobsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use migrationsDefaultArgs instead
     */
    export type migrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = migrationsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use password_reset_tokensDefaultArgs instead
     */
    export type password_reset_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = password_reset_tokensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_categoriesDefaultArgs instead
     */
    export type payment_categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_frequenciesDefaultArgs instead
     */
    export type payment_frequenciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_frequenciesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_periodsDefaultArgs instead
     */
    export type payment_periodsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_periodsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_platformsDefaultArgs instead
     */
    export type payment_platformsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_platformsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_recordsDefaultArgs instead
     */
    export type payment_recordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_recordsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use payment_templatesDefaultArgs instead
     */
    export type payment_templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = payment_templatesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use personal_access_tokensDefaultArgs instead
     */
    export type personal_access_tokensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = personal_access_tokensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use telescope_entriesDefaultArgs instead
     */
    export type telescope_entriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = telescope_entriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}